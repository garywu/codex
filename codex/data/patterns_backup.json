{
  "version": "1.0.0",
  "total_patterns": 39,
  "patterns": [
    {
      "name": "use-db-context-managers",
      "category": "database",
      "priority": "HIGH",
      "description": "Always use context managers for database sessions",
      "rule": "Always use context managers for sessions",
      "rationale": "",
      "detection": {
        "regex": "session\\s*=.*Session\\(\\)(?!\\s*with)",
        "ast_pattern": null,
        "keywords": [
          "session",
          "Session",
          "context manager"
        ],
        "confidence": 0.85
      },
      "fix": {
        "template": "with get_db_session() as session:",
        "complexity": "simple",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "with get_db_session() as session:\n    result = session.query(User).all()",
        "bad": "session = SessionLocal()\nresult = session.query(User).all()\nsession.close()",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "database",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "pin-production-dependencies",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Pin exact versions for production",
      "rule": "Use == for production, >= only for libraries",
      "rationale": "Ensures reproducible deployments",
      "detection": {
        "regex": "['\\\"][\\w-]+>=\\d+\\.|['\\\"][\\w-]+~=\\d+\\.",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Pin to exact version for production",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "requests==2.31.0",
        "bad": "requests>=2.28.0",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "dependencies"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "use-uv-not-pip",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Use uv for Python package management",
      "rule": "Replace pip with uv for 10-100x faster installs",
      "rationale": "uv is significantly faster and more reliable",
      "detection": {
        "regex": "pip\\s+install|python\\s+-m\\s+pip",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Use uv add or uv pip install",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "uv add requests",
        "bad": "pip install requests",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "dependencies"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "use-uv-package-manager",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Use uv for speed and reliability",
      "rule": "Use uv for speed and reliability",
      "rationale": "",
      "detection": {
        "regex": "pip install|pip freeze|requirements\\.txt",
        "ast_pattern": null,
        "keywords": [
          "pip",
          "requirements",
          "package manager"
        ],
        "confidence": 0.8
      },
      "fix": {
        "template": "Replace pip with uv commands",
        "complexity": "simple",
        "auto_fixable": true,
        "suggestions": [
          "uv pip install",
          "uv pip freeze",
          "pyproject.toml"
        ],
        "prerequisites": []
      },
      "examples": {
        "good": "uv pip install package-name",
        "bad": "pip install package-name",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "dependencies",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-broad-exception",
      "category": "error_handling",
      "priority": "HIGH",
      "description": "Avoid catching Exception without re-raising",
      "rule": "Catch specific exceptions or re-raise after logging",
      "rationale": "Broad exception handling masks programming errors",
      "detection": {
        "regex": "except\\s+Exception\\s*:|except\\s+Exception\\s+as\\s+\\w+:",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Use specific exception types or re-raise",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "except RequestException as e:\n    logger.error('Request failed', error=e)\n    raise",
        "bad": "except Exception:\n    return None  # Hides errors",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "error_handling"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-silent-defaults",
      "category": "error_handling",
      "priority": "HIGH",
      "description": "Don't use .get() with defaults for required config",
      "rule": "Required parameters should fail if missing",
      "rationale": "Silent defaults hide configuration errors",
      "detection": {
        "regex": "config\\.get\\(['\\\"](\\w+)['\\\"]\\s*,\\s*['\\\"]?[\\w\\d]+['\\\"]?\\)",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Use direct access: config['key']",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "api_key = config['api_key']  # Fails if missing",
        "bad": "api_key = config.get('api_key', 'default')  # Hides missing config",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "error_handling"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "gh-cli-operations",
      "category": "git",
      "priority": "HIGH",
      "description": "Use gh CLI for GitHub operations instead of git commands",
      "rule": "# No detection rule specified",
      "rationale": "",
      "detection": {
        "regex": null,
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "centralized-logging-config",
      "category": "logging",
      "priority": "HIGH",
      "description": "Configure logging in one central module",
      "rule": "Single logging configuration imported everywhere",
      "rationale": "Ensures consistent logging configuration",
      "detection": {
        "regex": "logging\\.basicConfig\\(|logging\\.getLogger\\(\\)\\.setLevel",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Create logging_config.py module",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "from .logging_config import logger",
        "bad": "logging.basicConfig(level=logging.INFO)  # In multiple files",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "logging"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-print-production",
      "category": "logging",
      "priority": "HIGH",
      "description": "Replace print() with proper logging",
      "rule": "Use logger instead of print in all production code",
      "rationale": "Print statements can't be controlled or filtered in production",
      "detection": {
        "regex": "^\\s*print\\s*\\(",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Use logger.info() or appropriate level",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "logger.info('Processing', item_id=item_id)",
        "bad": "print(f'Processing {item_id}')",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "logging"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "structured-logging",
      "category": "logging",
      "priority": "HIGH",
      "description": "Use JSON structured logs with consistent schema",
      "rule": "JSON structured logs with consistent schema",
      "rationale": "",
      "detection": {
        "regex": "logger\\.(info|debug|warning|error)\\([^{]",
        "ast_pattern": null,
        "keywords": [
          "logger",
          "logging",
          "structured"
        ],
        "confidence": 0.7
      },
      "fix": {
        "template": "Use structured logging with JSON format",
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "logger.info({'event': 'user_login', 'user_id': user.id, 'timestamp': now()})",
        "bad": "logger.info(f'User {user.id} logged in at {timestamp}')",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "logging",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "implement-health-checks",
      "category": "monitoring",
      "priority": "HIGH",
      "description": "Implement /health and /ready endpoints for container orchestration",
      "rule": "Health check endpoints required for production",
      "rationale": "",
      "detection": {
        "regex": "Health check endpoints required for production",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-impl-details-in-name",
      "category": "naming",
      "priority": "HIGH",
      "description": "Don't include implementation details in names",
      "rule": "Use functional names, not implementation specifics",
      "rationale": "Implementation may change but purpose remains",
      "detection": {
        "regex": "(_simple|_complex|_fast|_slow|_impl|_base|_abstract)\\.(py|js|ts)$",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Rename based on purpose, not implementation",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "processor.py",
        "bad": "processor_simple.py",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "naming"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-package-stutter",
      "category": "naming",
      "priority": "HIGH",
      "description": "Avoid repeating package name in module or class names",
      "rule": "Within heimdall package, use daemon.py not heimdall_daemon.py",
      "rationale": "Package context is already established by import path",
      "detection": {
        "regex": "class\\s+(\\w*Heimdall\\w+)|class\\s+(\\w*Circle\\w+)|class\\s+(\\w*Hermes\\w+)",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Remove package name from class/file name",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "from heimdall import Daemon  # Not HeimdallDaemon",
        "bad": "from heimdall import HeimdallDaemon  # Redundant",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "naming"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "sanitize-production-errors",
      "category": "security",
      "priority": "HIGH",
      "description": "Return generic error messages in production",
      "rule": "Return generic error messages in production",
      "rationale": "",
      "detection": {
        "regex": "raise.*Exception.*traceback|str\\(e\\)",
        "ast_pattern": null,
        "keywords": [
          "exception",
          "traceback",
          "debug"
        ],
        "confidence": 0.75
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": null,
        "bad": null,
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "security",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "minimum-test-coverage",
      "category": "testing",
      "priority": "HIGH",
      "description": "Maintain 80% minimum code coverage",
      "rule": "80% code coverage minimum",
      "rationale": "",
      "detection": {
        "regex": "def\\s+(?!test_)\\w+.*:",
        "ast_pattern": null,
        "keywords": [
          "function",
          "coverage",
          "test"
        ],
        "confidence": 0.6
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": null,
        "bad": null,
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "testing",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "mock-naming-convention",
      "category": "testing",
      "priority": "HIGH",
      "description": "Mock code must use mock_ prefix for clear identification",
      "rule": "# No detection rule specified",
      "rationale": "",
      "detection": {
        "regex": null,
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "avoid-any-type",
      "category": "typing",
      "priority": "HIGH",
      "description": "Avoid Any type except at boundaries",
      "rule": "Use specific types instead of Any",
      "rationale": "",
      "detection": {
        "regex": "Use specific types instead of Any",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "strict-type-checking",
      "category": "typing",
      "priority": "HIGH",
      "description": "Enable strict type checking in production code",
      "rule": "Use strict mypy configuration",
      "rationale": "",
      "detection": {
        "regex": "Use strict mypy configuration",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "fail-fast-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Validate inputs immediately and fail with clear errors",
      "rule": "Check required parameters at function entry",
      "rationale": "Early validation prevents cascading errors",
      "detection": {
        "regex": "if\\s+not\\s+\\w+:\\s*return\\s+None",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Raise ValueError with descriptive message",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "if not user_id:\n    raise ValueError('user_id is required')",
        "bad": "if not user_id:\n    return None  # Silent failure",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "validation"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "pydantic-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Use Pydantic models for data validation",
      "rule": "Replace manual validation with Pydantic models",
      "rationale": "Pydantic provides automatic validation with clear errors",
      "detection": {
        "regex": "if\\s+isinstance\\(.*,\\s*(dict|list|str|int)\\)|type\\(\\w+\\)\\s*==",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Create Pydantic model",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "class UserInput(BaseModel):\n    name: str\n    age: int",
        "bad": "if not isinstance(data, dict):\n    raise ValueError",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "high",
        "validation"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "use-pydantic-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Use Pydantic for all API input validation",
      "rule": "Use Pydantic for all API input validation",
      "rationale": "",
      "detection": {
        "regex": "@app\\.(post|put|patch).*def.*request.*:",
        "ast_pattern": null,
        "keywords": [
          "fastapi",
          "request",
          "validation"
        ],
        "confidence": 0.8
      },
      "fix": {
        "template": "Create Pydantic model for request validation",
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": null,
        "bad": null,
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "validation",
        "high"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "standard-import-order",
      "category": "imports",
      "priority": "LOW",
      "description": "Follow standard library, third-party, local import order",
      "rule": "Group imports: stdlib, third-party, local",
      "rationale": "Consistent import order improves readability",
      "detection": {
        "regex": "^from \\.|^import (?!sys|os|re|json|time|datetime)",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.7
      },
      "fix": {
        "template": "Reorder imports according to convention",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "import os\\nimport sys\\n\\nimport requests\\n\\nfrom .config import settings",
        "bad": "from .config import settings\\nimport os",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "low",
        "imports"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "test-ai-pattern",
      "category": "testing",
      "priority": "LOW",
      "description": "Test pattern added via AI CLI",
      "rule": "test_.*\\.py",
      "rationale": "",
      "detection": {
        "regex": "test_.*\\.py",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": "Add proper test assertions",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "zero-tolerance-precommit",
      "category": "ci_cd",
      "priority": "MANDATORY",
      "description": "All pre-commit hook errors must be fixed before commit",
      "rule": "# No detection rule specified",
      "rationale": "",
      "detection": {
        "regex": null,
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "uv-package-manager",
      "category": "dependencies",
      "priority": "MANDATORY",
      "description": "Use UV package manager instead of pip or poetry",
      "rule": "# No detection rule specified",
      "rationale": "",
      "detection": {
        "regex": null,
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-bare-except",
      "category": "error_handling",
      "priority": "MANDATORY",
      "description": "Never use bare except: clauses",
      "rule": "Always catch specific exception types",
      "rationale": "Bare except catches SystemExit, KeyboardInterrupt, and hides bugs",
      "detection": {
        "regex": "except\\s*:\\s*$|except\\s*:\\s*#",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 1.0
      },
      "fix": {
        "template": "Specify exception type: except SpecificError:",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "except ValueError as e:\n    logger.error('Invalid value', error=e)",
        "bad": "except:\n    pass  # Silently swallows all errors",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "mandatory",
        "error_handling"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-version-in-filename",
      "category": "naming",
      "priority": "MANDATORY",
      "description": "Never use version numbers in production filenames",
      "rule": "Maintain single canonical implementation without v1, v2, etc.",
      "rationale": "Version suffixes indicate unresolved technical debt",
      "detection": {
        "regex": "[\\w_]+(v\\d+|_v\\d+|_version\\d+)\\.(py|js|ts|go)$",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 1.0
      },
      "fix": {
        "template": "Consolidate to single canonical file",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "cache_manager.py",
        "bad": "cache_manager_v2.py",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "mandatory",
        "naming"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "flat-module-structure",
      "category": "organization",
      "priority": "MANDATORY",
      "description": "Use flat module structure with no subdirectories in main package",
      "rule": "# No detection rule specified",
      "rationale": "",
      "detection": {
        "regex": null,
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-backup-files",
      "category": "organization",
      "priority": "MANDATORY",
      "description": "Remove backup/temporary files from version control",
      "rule": "No _backup, _old, _tmp, .bak files in repository",
      "rationale": "Backup files create confusion and security risks",
      "detection": {
        "regex": "(_backup|_old|_tmp|_copy|\\.bak|~|\\.(swp|swo))$",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 1.0
      },
      "fix": {
        "template": "Delete or add to .gitignore",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": ".gitignore contains *.bak",
        "bad": "config_backup.py tracked in git",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "mandatory",
        "organization"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "no-cors-wildcard",
      "category": "security",
      "priority": "MANDATORY",
      "description": "NEVER use '*' in production CORS origins",
      "rule": "NEVER use '*' in production CORS origins",
      "rationale": "",
      "detection": {
        "regex": "cors.*origins.*[\\[\\\"'][*][\\\"'\\]]",
        "ast_pattern": null,
        "keywords": [
          "cors",
          "origins",
          "*",
          "wildcard"
        ],
        "confidence": 0.9
      },
      "fix": {
        "template": "Replace '*' with specific allowed origins",
        "complexity": "simple",
        "auto_fixable": true,
        "suggestions": [
          "List specific domains",
          "Use environment-specific origins"
        ],
        "prerequisites": []
      },
      "examples": {
        "good": "origins=['https://app.example.com', 'https://admin.example.com']",
        "bad": "origins=['*']",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "security",
        "mandatory"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "secure-jwt-storage",
      "category": "security",
      "priority": "MANDATORY",
      "description": "Store JWT secrets in secure credential manager, never hardcode",
      "rule": "Store JWT secrets in secure credential manager, never hardcode",
      "rationale": "Hardcoded secrets in code are a critical security vulnerability",
      "detection": {
        "regex": "(jwt_secret|JWT_SECRET)\\s*=\\s*['\\\"][^'\\\"]+['\\\"]",
        "ast_pattern": null,
        "keywords": [
          "jwt_secret",
          "JWT_SECRET",
          "hardcode"
        ],
        "confidence": 0.95
      },
      "fix": {
        "template": "Use environment variables or secure credential manager",
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [
          "Use secrets manager",
          "Environment variables",
          "Vault integration"
        ],
        "prerequisites": []
      },
      "examples": {
        "good": "jwt_secret = os.getenv('JWT_SECRET') or vault.get_secret('jwt_secret')",
        "bad": "jwt_secret = 'hardcoded-secret-key'",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "security",
        "mandatory"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "mock-code-naming",
      "category": "testing",
      "priority": "MANDATORY",
      "description": "Mock functions must start with mock_ prefix and log warnings",
      "rule": "Mock code must be clearly identified and include runtime warnings",
      "rationale": "",
      "detection": {
        "regex": "def\\s+((?!mock_)\\w+).*mock|def\\s+\\w+.*:\\s*#.*mock",
        "ast_pattern": null,
        "keywords": [
          "mock",
          "test",
          "warning"
        ],
        "confidence": 0.85
      },
      "fix": {
        "template": "Add mock_ prefix and logfire.warning('\u26a0\ufe0f MOCK: ...')",
        "complexity": "simple",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "def mock_process_payment():\n    logfire.warning('\u26a0\ufe0f MOCK: Using mock_process_payment - not for production')",
        "bad": "def process_payment():\n    # Mock implementation\n    return True",
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "testing",
        "mandatory"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "public-function-docstrings",
      "category": "documentation",
      "priority": "MEDIUM",
      "description": "All public functions need docstrings",
      "rule": "All public functions need docstrings",
      "rationale": "",
      "detection": {
        "regex": "def\\s+(?!_)\\w+.*:\\n(?!\\s*['\\\"])",
        "ast_pattern": null,
        "keywords": [
          "function",
          "docstring",
          "documentation"
        ],
        "confidence": 0.85
      },
      "fix": {
        "template": "Add docstring with description and parameters",
        "complexity": "simple",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": null,
        "bad": null,
        "context": null
      },
      "source": "project-init-v3-comprehensive",
      "tags": [
        "documentation",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "conventional-commits",
      "category": "git",
      "priority": "MEDIUM",
      "description": "Use conventional commit messages",
      "rule": "Format: type(scope): description",
      "rationale": "Enables automatic changelog generation",
      "detection": {
        "regex": "^(Updated?|Fixed?|Added?|Changed?|Removed?)",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.8
      },
      "fix": {
        "template": "Use: feat:, fix:, docs:, refactor:, test:",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "feat(auth): add OAuth2 support",
        "bad": "Updated authentication system",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "git",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "prefer-relative-imports",
      "category": "imports",
      "priority": "MEDIUM",
      "description": "Use relative imports within packages",
      "rule": "Use from . imports for internal package modules",
      "rationale": "Makes packages more portable and refactorable",
      "detection": {
        "regex": "from\\s+(heimdall|circle|hermes|codex)\\.",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.8
      },
      "fix": {
        "template": "Convert to relative import",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "from .utils import helper",
        "bad": "from mypackage.utils import helper",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "imports",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "use-structured-logging",
      "category": "logging",
      "priority": "MEDIUM",
      "description": "Use key-value pairs in logging",
      "rule": "Log with structured data, not string formatting",
      "rationale": "Structured logs are searchable and parseable",
      "detection": {
        "regex": "logger\\.\\w+\\(f['\\\"].*\\{.*\\}|logger\\.\\w+\\(['\\\"].*%s",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.8
      },
      "fix": {
        "template": "Use key-value parameters",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "logger.info('user_login', user_id=123, ip=request.ip)",
        "bad": "logger.info(f'User {user_id} logged in from {ip}')",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "logging",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "organized-documentation",
      "category": "organization",
      "priority": "MEDIUM",
      "description": "Keep documentation in organized structure",
      "rule": "Use docs/ with api/, guides/, architecture/ subdirs",
      "rationale": "Organized docs are easier to maintain and find",
      "detection": {
        "regex": "(README_\\w+\\.md|NOTES\\.md|TODO\\.md|CHANGELOG\\d+\\.md)$",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.8
      },
      "fix": {
        "template": "Move to appropriate docs/ subdirectory",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "docs/architecture/design.md",
        "bad": "README_OLD.md in root",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "organization",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "test-naming-convention",
      "category": "testing",
      "priority": "MEDIUM",
      "description": "Follow test_{component}_{aspect}.py naming",
      "rule": "Test files should clearly indicate what they test",
      "rationale": "Clear test names improve discoverability",
      "detection": {
        "regex": "test\\.py$|tests\\.py$|_test\\.py$",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.8
      },
      "fix": {
        "template": "Rename to test_{component}_{aspect}.py",
        "complexity": "medium",
        "auto_fixable": true,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "test_auth_validation.py",
        "bad": "auth_tests.py",
        "context": null
      },
      "source": "project-init-v2-enhanced",
      "tags": [
        "testing",
        "medium"
      ],
      "ai_explanation": null,
      "business_impact": null
    },
    {
      "name": "test-pattern",
      "category": "testing",
      "priority": "MEDIUM",
      "description": "Test pattern for validation",
      "rule": "Test rule",
      "rationale": "",
      "detection": {
        "regex": "Test rule",
        "ast_pattern": null,
        "keywords": [],
        "confidence": 0.9
      },
      "fix": {
        "template": null,
        "complexity": "medium",
        "auto_fixable": false,
        "suggestions": [],
        "prerequisites": []
      },
      "examples": {
        "good": "",
        "bad": "",
        "context": null
      },
      "source": "cli",
      "tags": [],
      "ai_explanation": null,
      "business_impact": null
    }
  ]
}
