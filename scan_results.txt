WARNING:root:experiment_fts.py:259: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:experiment_fts.py:190: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:experiment_fts.py:89: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:experiment_fts.py:258: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:experiment_fts.py:258: sanitize-production-errors - Return generic error messages in production
WARNING:root:experiment_fts.py:190: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:intelligent_fixer.py:369: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:intelligent_fixer.py:211: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:intelligent_fixer.py:112: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:intelligent_fixer.py:102: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:intelligent_fixer.py:143: sanitize-production-errors - Return generic error messages in production
WARNING:root:intelligent_fixer.py:112: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_startup.py:17: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_startup.py:14: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_startup.py:14: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:demo_negative_space_integration.py:24: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:demo_negative_space_integration.py:15: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:demo_negative_space_integration.py:11: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:demo_negative_space_integration.py:15: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:demo_negative_space_integration.py:124: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:import_patterns_unified.py:22: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:import_patterns_unified.py:73: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:import_patterns_unified.py:70: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:import_patterns_unified.py:73: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:smart_scanner.py:42: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:smart_scanner.py:232: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:smart_scanner.py:68: use-db-context-managers - Always use context managers for database sessions
WARNING:root:smart_scanner.py:131: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:smart_scanner.py:25: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:smart_scanner.py:232: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:negative_space_analyzer.py:94: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:negative_space_analyzer.py:128: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:negative_space_analyzer.py:105: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:negative_space_analyzer.py:42: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:negative_space_analyzer.py:128: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_sqlite_scanning.py:24: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_sqlite_scanning.py:13: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_sqlite_scanning.py:126: sanitize-production-errors - Return generic error messages in production
WARNING:root:test_sqlite_scanning.py:13: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_sqlite_scanning.py:34: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:ai_query_interface.py:115: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:ai_query_interface.py:135: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:ai_query_interface.py:137: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:ai_query_interface.py:134: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:ai_query_interface.py:134: sanitize-production-errors - Return generic error messages in production
WARNING:root:ai_query_interface.py:185: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:ai_query_interface.py:141: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:enhanced_pattern_extractor.py:27: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:enhanced_pattern_extractor.py:180: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:enhanced_pattern_extractor.py:242: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:enhanced_pattern_extractor.py:74: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:enhanced_pattern_extractor.py:70: sanitize-production-errors - Return generic error messages in production
WARNING:root:enhanced_pattern_extractor.py:54: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:enhanced_pattern_extractor.py:146: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_fts_direct.py:13: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_fts_direct.py:12: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_fts_direct.py:102: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:test_fts_direct.py:116: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:test_fts_direct.py:116: sanitize-production-errors - Return generic error messages in production
WARNING:root:test_fts_direct.py:29: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_fts_direct.py:94: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:demo_ai_workflow.py:57: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:demo_ai_workflow.py:254: use-db-context-managers - Always use context managers for database sessions
WARNING:root:demo_ai_workflow.py:131: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:demo_ai_workflow.py:97: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:demo_ai_workflow.py:309: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:demo_ai_workflow.py:25: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:detailed_violation_scanner.py:91: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:detailed_violation_scanner.py:86: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:detailed_violation_scanner.py:92: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:test.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:pattern_refiner.py:85: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:pattern_refiner.py:43: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:pattern_refiner.py:386: use-db-context-managers - Always use context managers for database sessions
WARNING:root:pattern_refiner.py:140: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:pattern_refiner.py:139: sanitize-production-errors - Return generic error messages in production
WARNING:root:pattern_refiner.py:226: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_implementation.py:76: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_implementation.py:14: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_implementation.py:43: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:test_implementation.py:14: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_implementation.py:57: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:evolution_tracker.py:111: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:evolution_tracker.py:101: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:evolution_tracker.py:101: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:evolution_tracker.py:401: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_violation.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:test_violation.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:import_patterns_to_sqlite.py:220: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:import_patterns_to_sqlite.py:34: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:import_patterns_to_sqlite.py:70: use-db-context-managers - Always use context managers for database sessions
WARNING:root:import_patterns_to_sqlite.py:29: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:import_patterns_to_sqlite.py:217: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:import_patterns_to_sqlite.py:30: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:demo_full_implementation.py:14: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:demo_full_implementation.py:180: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:demo_full_implementation.py:132: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:demo_full_implementation.py:181: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:demo_full_implementation.py:163: sanitize-production-errors - Return generic error messages in production
WARNING:root:demo_full_implementation.py:345: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:demo_full_implementation.py:149: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:example.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:example.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_file.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:test_file.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:extract_comprehensive_patterns.py:50: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:extract_comprehensive_patterns.py:32: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:extract_comprehensive_patterns.py:320: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:extract_comprehensive_patterns.py:121: use-db-context-managers - Always use context managers for database sessions
WARNING:root:extract_comprehensive_patterns.py:302: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:extract_comprehensive_patterns.py:164: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:extract_comprehensive_patterns.py:104: sanitize-production-errors - Return generic error messages in production
WARNING:root:extract_comprehensive_patterns.py:196: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:extract_comprehensive_patterns.py:84: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:mycode.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:mycode.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:comprehensive_fixer.py:85: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:comprehensive_fixer.py:165: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:comprehensive_fixer.py:414: use-db-context-managers - Always use context managers for database sessions
WARNING:root:comprehensive_fixer.py:81: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:update_patterns_from_project_init.py:31: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:update_patterns_from_project_init.py:187: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:update_patterns_from_project_init.py:261: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:update_patterns_from_project_init.py:130: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:update_patterns_from_project_init.py:87: sanitize-production-errors - Return generic error messages in production
WARNING:root:update_patterns_from_project_init.py:324: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:update_patterns_from_project_init.py:132: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_sqlite_core.py:323: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_sqlite_core.py:3: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_sqlite_core.py:27: use-db-context-managers - Always use context managers for database sessions
WARNING:root:test_sqlite_core.py:204: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:test_sqlite_core.py:517: sanitize-production-errors - Return generic error messages in production
WARNING:root:test_sqlite_core.py:479: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_sqlite_core.py:189: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:simple_fixer.py:158: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:simple_fixer.py:261: use-db-context-managers - Always use context managers for database sessions
WARNING:root:simple_fixer.py:185: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:simple_fixer.py:141: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_cli_commands.py:12: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:test_cli_commands.py:42: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_cli_commands.py:3: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:broader_scope_scanner.py:77: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:broader_scope_scanner.py:21: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:broader_scope_scanner.py:70: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:broader_scope_scanner.py:21: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_dogfooding.py:30: sanitize-production-errors - Return generic error messages in production
WARNING:root:test_dogfooding.py:11: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:test_dogfooding.py:8: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:final_intelligent_scanner.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:final_intelligent_scanner.py:61: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:final_intelligent_scanner.py:76: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:final_intelligent_scanner.py:55: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:final_intelligent_scanner.py:118: sanitize-production-errors - Return generic error messages in production
WARNING:root:final_intelligent_scanner.py:213: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:systematic_quality_enforcer.py:137: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:systematic_quality_enforcer.py:153: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:systematic_quality_enforcer.py:83: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:systematic_quality_enforcer.py:14: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:systematic_quality_enforcer.py:288: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:systematic_quality_enforcer.py:51: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:pattern_enhancement_analyzer.py:212: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:pattern_enhancement_analyzer.py:243: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:pattern_enhancement_analyzer.py:85: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:pattern_enhancement_analyzer.py:96: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:pattern_enhancement_analyzer.py:135: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:pattern_enhancement_analyzer.py:126: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:pattern_enhancement_analyzer.py:146: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:simple_scanner.py:96: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:enhanced_intelligent_scanner.py:365: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:enhanced_intelligent_scanner.py:367: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:enhanced_intelligent_scanner.py:121: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:enhanced_intelligent_scanner.py:45: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:enhanced_intelligent_scanner.py:97: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:enhanced_intelligent_scanner.py:24: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:intelligent_scanner.py:66: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:intelligent_scanner.py:61: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:intelligent_scanner.py:63: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:intelligent_scanner.py:276: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:intelligent_scanner.py:196: sanitize-production-errors - Return generic error messages in production
WARNING:root:intelligent_scanner.py:296: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:violation_analyzer.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:violation_analyzer.py:25: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:violation_analyzer.py:87: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:best_practices_scanner.py:139: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:best_practices_scanner.py:167: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:best_practices_scanner.py:656: use-db-context-managers - Always use context managers for database sessions
WARNING:root:best_practices_scanner.py:614: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:best_practices_scanner.py:111: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:best_practices_scanner.py:111: sanitize-production-errors - Return generic error messages in production
WARNING:root:best_practices_scanner.py:300: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:best_practices_scanner.py:394: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:test_quick_mcp.py:12: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:test_quick_mcp.py:5: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_models.py:22: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_models.py:5: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_models.py:28: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_models.py:18: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:90: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:268: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:255: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:268: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/scanner.py:79: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/config.py:68: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/models.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/models.py:33: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/models.py:4: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/unified_database.py:168: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/unified_database.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:93: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:114: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:165: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:262: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/scan_rules.py:292: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/database.py:8: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/client.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/client.py:36: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/client.py:248: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/client.py:13: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/client.py:36: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/tools.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/tools.py:340: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/tools.py:83: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/tools.py:118: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:509: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:146: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:59: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:509: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:620: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:9: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:57: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:620: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_cli.py:66: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/__init__.py:10: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:218: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:344: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:35: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:461: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:477: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:487: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/sqlite_scanner.py:327: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/project_config.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/project_config.py:188: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/project_config.py:10: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/project_config.py:188: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/scan_cli.py:281: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/scan_cli.py:293: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/scan_cli.py:111: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/scan_cli.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/fts_database_OLD.py:31: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/fts_database.py:9: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:155: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:255: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:130: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:141: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:141: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:255: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/ai_query.py:261: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/scan_registry.py:107: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/scan_registry.py:44: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/scan_registry.py:154: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/scan_registry.py:258: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/scan_registry.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:251: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:1609: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:1721: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:361: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:35: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:1863: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/cli.py:1041: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/database_OLD.py:102: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/database_OLD.py:13: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:97: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:97: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:291: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:212: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:93: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:97: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/portable_tools.py:229: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/settings.py:67: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_importer.py:153: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_importer.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_importer.py:7: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_importer.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_importer.py:150: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/exceptions.py:2: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/gitignore_handler.py:24: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/gitignore_handler.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/gitignore_handler.py:27: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/gitignore_handler.py:31: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/gitignore_handler.py:26: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_extractor.py:48: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_extractor.py:41: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_extractor.py:153: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/pattern_extractor.py:48: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:220: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:28: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:79: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:89: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:220: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/scan_manager.py:40: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/rules_cli.py:92: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/rules_cli.py:98: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/rules_cli.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/rules_cli.py:98: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/rules_cli.py:116: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/uv_check.py:38: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/uv_check.py:12: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:255: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:108: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:48: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:9: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:108: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/mcp_server.py:160: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:demo_repository/server.py:10: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:demo_repository/server.py:2: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:demo_repository/client.py:2: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:demo_repository/utils.py:7: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:demo_repository/utils.py:19: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/pattern_models.py:22: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/pattern_models.py:5: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/pattern_models.py:28: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_models.py:18: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/scanner.py:509: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/scanner.py:504: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/scanner.py:285: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/scanner.py:9: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/scanner.py:272: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/scanner.py:285: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/scanner.py:96: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/config.py:68: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/models.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/models.py:37: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/models.py:33: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/models.py:4: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/negative_space_patterns.py:81: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/negative_space_patterns.py:104: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/negative_space_patterns.py:126: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/negative_space_patterns.py:446: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/negative_space_patterns.py:462: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/unified_database.py:168: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/unified_database.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/scan_rules.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/scan_rules.py:93: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/scan_rules.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/scan_rules.py:114: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/scan_rules.py:165: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/scan_rules.py:262: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/scan_rules.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/scan_rules.py:292: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/database.py:8: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/client.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/client.py:36: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/client.py:248: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/client.py:13: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/client.py:36: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/tools.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/tools.py:340: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/tools.py:83: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/tools.py:118: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/ai_sqlite_query.py:509: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/ai_sqlite_query.py:146: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/ai_sqlite_query.py:59: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/ai_sqlite_query.py:509: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_cli.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/pattern_cli.py:620: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/pattern_cli.py:9: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/pattern_cli.py:57: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/pattern_cli.py:620: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_cli.py:66: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/__init__.py:10: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/sqlite_scanner.py:218: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/sqlite_scanner.py:344: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/sqlite_scanner.py:35: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/sqlite_scanner.py:461: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/sqlite_scanner.py:477: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/sqlite_scanner.py:487: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/sqlite_scanner.py:327: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/project_config.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/project_config.py:188: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/project_config.py:10: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/project_config.py:188: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/scan_cli.py:281: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/scan_cli.py:293: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/scan_cli.py:111: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/scan_cli.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/fts_database_OLD.py:31: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/fts_database.py:9: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/ai_query.py:155: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/ai_query.py:255: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/ai_query.py:130: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/ai_query.py:141: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/ai_query.py:141: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/ai_query.py:255: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/ai_query.py:261: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/scan_registry.py:107: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/scan_registry.py:44: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/scan_registry.py:154: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/scan_registry.py:258: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/scan_registry.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/cli.py:232: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/cli.py:1590: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/cli.py:1702: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/cli.py:342: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/cli.py:35: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/cli.py:127: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/cli.py:165: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/database_OLD.py:102: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/database_OLD.py:13: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/portable_tools.py:97: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/portable_tools.py:97: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/portable_tools.py:291: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/portable_tools.py:212: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/portable_tools.py:93: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/portable_tools.py:97: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/portable_tools.py:229: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/settings.py:67: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_importer.py:153: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/pattern_importer.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/pattern_importer.py:7: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/pattern_importer.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_importer.py:150: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/exceptions.py:2: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/gitignore_handler.py:24: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/gitignore_handler.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/gitignore_handler.py:27: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/gitignore_handler.py:31: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/gitignore_handler.py:26: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/pattern_extractor.py:48: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/pattern_extractor.py:41: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/pattern_extractor.py:153: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/pattern_extractor.py:48: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/scan_manager.py:220: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/scan_manager.py:28: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/scan_manager.py:79: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/scan_manager.py:89: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/scan_manager.py:220: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/scan_manager.py:40: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/rules_cli.py:92: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/rules_cli.py:98: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/rules_cli.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/rules_cli.py:98: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/rules_cli.py:116: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/uv_check.py:38: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/uv_check.py:12: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/mcp_server.py:255: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/mcp_server.py:108: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/mcp_server.py:48: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/mcp_server.py:9: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/mcp_server.py:108: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/mcp_server.py:160: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:tests/test_mcp_protocol.py:35: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:tests/test_mcp_protocol.py:14: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:tests/test_mcp_protocol.py:101: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:tests/test_mcp_protocol.py:207: sanitize-production-errors - Return generic error messages in production
WARNING:root:tests/test_mcp_protocol.py:34: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:tests/test_mcp_protocol.py:272: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:fixers/__init__.py:10: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:fixers/__init__.py:9: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/external_tools_fixer.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/print_to_logging_fixer.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:fixers/print_to_logging_fixer.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/import_consolidation_fixer.py:100: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:fixers/import_consolidation_fixer.py:12: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/fixer_orchestrator.py:17: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:fixers/fixer_orchestrator.py:181: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:fixers/fixer_orchestrator.py:80: use-db-context-managers - Always use context managers for database sessions
WARNING:root:fixers/fixer_orchestrator.py:20: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/fixer_orchestrator.py:175: sanitize-production-errors - Return generic error messages in production
WARNING:root:fixers/fixer_orchestrator.py:181: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:fixers/hardcoded_paths_fixer.py:137: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:fixers/hardcoded_paths_fixer.py:3: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:fixers/hardcoded_paths_fixer.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:fixers/remaining_issues_fixer.py:119: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:fixers/remaining_issues_fixer.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/pattern_models.py:22: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/pattern_models.py:10: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/pattern_models.py:28: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_models.py:18: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/scanner.py:90: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/scanner.py:268: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/scanner.py:16: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/scanner.py:255: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/scanner.py:268: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/scanner.py:79: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/config.py:68: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/models.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/models.py:33: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/models.py:4: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/unified_database.py:168: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/unified_database.py:16: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/scan_rules.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/scan_rules.py:93: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/scan_rules.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/scan_rules.py:114: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/scan_rules.py:165: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/scan_rules.py:262: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/scan_rules.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/scan_rules.py:292: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/database.py:8: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/client.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/client.py:36: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/client.py:248: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/client.py:13: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/client.py:36: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/tools.py:84: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/tools.py:16: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/tools.py:84: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/tools.py:119: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/ai_sqlite_query.py:509: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/ai_sqlite_query.py:146: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/ai_sqlite_query.py:59: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/ai_sqlite_query.py:509: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:620: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:19: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:57: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:620: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_cli.py:66: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/__init__.py:10: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:218: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:344: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:35: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:461: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:477: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:487: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/sqlite_scanner.py:327: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/project_config.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/project_config.py:188: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/project_config.py:17: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/project_config.py:188: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/scan_cli.py:281: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/scan_cli.py:293: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/scan_cli.py:111: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/scan_cli.py:23: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/fts_database_OLD.py:30: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/fts_database.py:9: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/ai_query.py:155: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/ai_query.py:255: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/ai_query.py:130: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/ai_query.py:141: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/ai_query.py:141: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/ai_query.py:255: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/ai_query.py:261: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/scan_registry.py:107: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/scan_registry.py:44: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/scan_registry.py:154: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/scan_registry.py:258: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/scan_registry.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/cli.py:252: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/cli.py:1610: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/cli.py:1722: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/cli.py:362: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/cli.py:48: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/cli.py:1864: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/cli.py:1042: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/database_OLD.py:102: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/database_OLD.py:13: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/portable_tools.py:98: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/portable_tools.py:98: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/portable_tools.py:292: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/portable_tools.py:20: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/portable_tools.py:94: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/portable_tools.py:98: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/portable_tools.py:230: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/settings.py:67: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_importer.py:154: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/pattern_importer.py:40: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/pattern_importer.py:7: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/pattern_importer.py:155: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_importer.py:151: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/exceptions.py:2: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/gitignore_handler.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/gitignore_handler.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/gitignore_handler.py:26: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/gitignore_handler.py:30: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/gitignore_handler.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/pattern_extractor.py:49: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/pattern_extractor.py:42: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/pattern_extractor.py:154: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/pattern_extractor.py:49: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/scan_manager.py:220: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/scan_manager.py:28: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/scan_manager.py:79: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/scan_manager.py:89: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/scan_manager.py:220: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/scan_manager.py:40: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/rules_cli.py:92: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/rules_cli.py:98: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/rules_cli.py:23: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/rules_cli.py:98: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/rules_cli.py:116: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/uv_check.py:38: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/uv_check.py:15: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/mcp_server.py:255: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/mcp_server.py:108: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/mcp_server.py:48: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/mcp_server.py:9: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/mcp_server.py:108: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/mcp_server.py:160: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_models.py:22: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_models.py:5: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_models.py:28: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_models.py:18: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:90: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:268: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:255: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:268: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/scanner.py:79: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/config.py:68: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/models.py:26: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/models.py:33: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/models.py:4: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/unified_database.py:168: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/unified_database.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:93: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:114: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:165: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:262: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/scan_rules.py:292: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/database.py:8: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/client.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/client.py:36: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/client.py:248: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/client.py:13: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/client.py:36: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/tools.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/tools.py:340: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/tools.py:83: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/tools.py:118: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:509: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:146: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:59: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:509: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:60: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:620: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:9: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:57: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:620: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_cli.py:66: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/__init__.py:10: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:218: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:344: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:35: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:461: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:477: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:487: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/sqlite_scanner.py:327: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/project_config.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/project_config.py:188: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/project_config.py:10: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/project_config.py:188: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/scan_cli.py:281: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/scan_cli.py:293: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/scan_cli.py:111: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/scan_cli.py:13: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/fts_database_OLD.py:31: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/fts_database.py:9: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:155: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:255: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:130: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:141: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:141: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:255: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/ai_query.py:261: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/scan_registry.py:107: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/scan_registry.py:44: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/scan_registry.py:154: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/scan_registry.py:258: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/scan_registry.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:251: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:1609: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:1721: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:361: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:35: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:1863: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/cli.py:1041: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/database_OLD.py:102: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/database_OLD.py:13: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:97: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:97: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:291: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:212: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:93: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:97: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/portable_tools.py:229: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/settings.py:67: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_importer.py:153: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_importer.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_importer.py:7: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_importer.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_importer.py:150: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/exceptions.py:2: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/gitignore_handler.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/gitignore_handler.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/gitignore_handler.py:26: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/gitignore_handler.py:30: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/gitignore_handler.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_extractor.py:48: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_extractor.py:41: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_extractor.py:153: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/pattern_extractor.py:48: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:220: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:28: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:79: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:89: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:220: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/scan_manager.py:40: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/rules_cli.py:92: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/rules_cli.py:98: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/rules_cli.py:8: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/rules_cli.py:98: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/rules_cli.py:116: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/uv_check.py:38: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/uv_check.py:12: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:255: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:108: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:48: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:9: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:108: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/mcp_server.py:160: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:src/main.py:1: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:src/main.py:1: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/rules/settings_rules.py:89: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/rules/settings_rules.py:63: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/rules/settings_rules.py:38: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/rules/settings_rules.py:30: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/rules/registry.py:129: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/rules/registry.py:21: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/rules/categories.py:45: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/rules/categories.py:60: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_200552/rules/database_rules.py:191: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/rules/database_rules.py:34: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_200552/rules/database_rules.py:40: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/rules/database_rules.py:123: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/rules/loader.py:24: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/rules/loader.py:24: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:107: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:144: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:193: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:82: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:148: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_200552/data/default_patterns.py:51: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/rules/settings_rules.py:89: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/rules/settings_rules.py:63: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/rules/settings_rules.py:38: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/rules/settings_rules.py:30: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/rules/registry.py:129: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/rules/registry.py:21: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/rules/categories.py:45: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/rules/categories.py:60: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex/rules/database_rules.py:191: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/rules/database_rules.py:34: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex/rules/database_rules.py:40: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/rules/database_rules.py:123: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/rules/loader.py:24: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/rules/loader.py:24: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/data/default_patterns.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex/data/default_patterns.py:107: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex/data/default_patterns.py:144: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex/data/default_patterns.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex/data/default_patterns.py:193: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex/data/default_patterns.py:82: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex/data/default_patterns.py:148: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex/data/default_patterns.py:51: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/rules/settings_rules.py:89: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/rules/settings_rules.py:63: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/rules/settings_rules.py:38: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/rules/settings_rules.py:30: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/rules/registry.py:129: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/rules/registry.py:21: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/rules/categories.py:45: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/rules/categories.py:60: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:codex_backup_20250819_185515/rules/database_rules.py:191: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/rules/database_rules.py:34: use-db-context-managers - Always use context managers for database sessions
WARNING:root:codex_backup_20250819_185515/rules/database_rules.py:40: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/rules/database_rules.py:123: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/rules/loader.py:24: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/rules/loader.py:24: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:107: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:144: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:193: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:82: sanitize-production-errors - Return generic error messages in production
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:148: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:codex_backup_20250819_185515/data/default_patterns.py:51: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/rules/settings_rules.py:89: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/rules/settings_rules.py:63: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/rules/settings_rules.py:38: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/rules/settings_rules.py:30: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/rules/registry.py:129: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/rules/registry.py:21: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/rules/categories.py:45: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/rules/categories.py:60: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:quality_enforcement_backup_20250819_194047/rules/database_rules.py:191: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/rules/database_rules.py:34: use-db-context-managers - Always use context managers for database sessions
WARNING:root:quality_enforcement_backup_20250819_194047/rules/database_rules.py:40: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/rules/database_rules.py:123: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/rules/loader.py:24: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/rules/loader.py:24: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:107: secure-jwt-storage - Store JWT secrets in secure credential manager, never hardcode
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:144: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:193: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:82: sanitize-production-errors - Return generic error messages in production
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:148: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:quality_enforcement_backup_20250819_194047/data/default_patterns.py:51: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/pattern_models.py:20: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/pattern_models.py:15: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/pattern_models.py:26: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_models.py:16: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/scanner.py:89: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/scanner.py:224: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/scanner.py:224: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/scanner.py:78: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/config.py:68: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/models.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/models.py:32: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/models.py:4: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/unified_database.py:168: use-db-context-managers - Always use context managers for database sessions
WARNING:root:build/lib/codex/database.py:101: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/database.py:13: use-db-context-managers - Always use context managers for database sessions
WARNING:root:build/lib/codex/client.py:87: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/client.py:40: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/client.py:252: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/client.py:16: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/client.py:40: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/tools.py:76: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/tools.py:76: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/tools.py:109: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/ai_sqlite_query.py:29: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/ai_sqlite_query.py:510: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/ai_sqlite_query.py:147: use-db-context-managers - Always use context managers for database sessions
WARNING:root:build/lib/codex/ai_sqlite_query.py:60: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/ai_sqlite_query.py:510: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_cli.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/pattern_cli.py:622: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/pattern_cli.py:622: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/pattern_cli.py:59: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/pattern_cli.py:622: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_cli.py:68: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/__init__.py:11: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/sqlite_scanner.py:221: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/sqlite_scanner.py:347: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/sqlite_scanner.py:38: use-db-context-managers - Always use context managers for database sessions
WARNING:root:build/lib/codex/sqlite_scanner.py:464: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/sqlite_scanner.py:480: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/sqlite_scanner.py:490: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/sqlite_scanner.py:330: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/project_config.py:28: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/project_config.py:187: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/project_config.py:187: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/fts_database.py:32: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/ai_query.py:156: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/ai_query.py:256: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/ai_query.py:131: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/ai_query.py:142: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/ai_query.py:142: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/ai_query.py:256: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/ai_query.py:262: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/cli.py:232: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/cli.py:1588: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/cli.py:1699: use-db-context-managers - Always use context managers for database sessions
WARNING:root:build/lib/codex/cli.py:342: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/cli.py:1466: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/cli.py:36: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/cli.py:1841: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/cli.py:1020: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/portable_tools.py:101: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/portable_tools.py:101: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/portable_tools.py:295: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/portable_tools.py:97: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/portable_tools.py:101: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/portable_tools.py:233: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/settings.py:67: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_importer.py:153: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/pattern_importer.py:39: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/pattern_importer.py:8: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/pattern_importer.py:154: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_importer.py:150: use-pydantic-validation - Use Pydantic for all API input validation
WARNING:root:build/lib/codex/exceptions.py:2: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/gitignore_handler.py:23: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/gitignore_handler.py:25: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/gitignore_handler.py:26: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/gitignore_handler.py:30: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/gitignore_handler.py:25: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/pattern_extractor.py:49: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/pattern_extractor.py:42: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/pattern_extractor.py:154: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/pattern_extractor.py:49: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/uv_check.py:38: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
WARNING:root:build/lib/codex/mcp_server.py:257: no-cors-wildcard - NEVER use '*' in production CORS origins
WARNING:root:build/lib/codex/mcp_server.py:110: mock-code-naming - Mock functions must start with mock_ prefix and log warnings
WARNING:root:build/lib/codex/mcp_server.py:50: structured-logging - Use JSON structured logs with consistent schema
WARNING:root:build/lib/codex/mcp_server.py:10: sanitize-production-errors - Return generic error messages in production
WARNING:root:build/lib/codex/mcp_server.py:110: minimum-test-coverage - Maintain 80% minimum code coverage
WARNING:root:build/lib/codex/mcp_server.py:162: use-pydantic-validation - Use Pydantic for all API input validation
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /Users/admin/Work/codex/codex/cli.py:195 in scan                             │
│                                                                              │
│    192 │   │   │   │   logging.info(message)                                 │
│    193 │   │   │   return 0                                                  │
│    194 │                                                                     │
│ ❱  195 │   exit_code = asyncio.run(_scan())                                  │
│    196 │   raise typer.Exit(exit_code)                                       │
│    197                                                                       │
│    198                                                                       │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │ best_practices = True                                                    │ │
│ │         config = None                                                    │ │
│ │    config_data = {                                                       │ │
│ │                  │   'patterns': ['all'],                                │ │
│ │                  │   'exclude': [                                        │ │
│ │                  │   │   '*.pyc',                                        │ │
│ │                  │   │   '__pycache__',                                  │ │
│ │                  │   │   '.git',                                         │ │
│ │                  │   │   '.venv',                                        │ │
│ │                  │   │   'venv'                                          │ │
│ │                  │   ],                                                  │ │
│ │                  │   'auto_fix': False,                                  │ │
│ │                  │   'enforce': [                                        │ │
│ │                  │   │   'mandatory',                                    │ │
│ │                  │   │   'critical',                                     │ │
│ │                  │   │   'high'                                          │ │
│ │                  │   ],                                                  │ │
│ │                  │   'farm_url': 'http://localhost:8001',                │ │
│ │                  │   'quiet': False,                                     │ │
│ │                  │   'show_diff': False,                                 │ │
│ │                  │   'run_tools': True,                                  │ │
│ │                  │   'tools': {                                          │ │
│ │                  │   │   'ruff': True,                                   │ │
│ │                  │   │   'mypy': True,                                   │ │
│ │                  │   │   'typos': True                                   │ │
│ │                  │   }                                                   │ │
│ │                  }                                                       │ │
│ │           diff = False                                                   │ │
│ │        exclude = None                                                    │ │
│ │            fix = False                                                   │ │
│ │       no_tools = False                                                   │ │
│ │          paths = [PosixPath('.')]                                        │ │
│ │          quiet = False                                                   │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /Users/admin/.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/p │
│ ython3.12/asyncio/runners.py:195 in run                                      │
│                                                                              │
│   192 │   │   │   "asyncio.run() cannot be called from a running event loop" │
│   193 │                                                                      │
│   194 │   with Runner(debug=debug, loop_factory=loop_factory) as runner:     │
│ ❱ 195 │   │   return runner.run(main)                                        │
│   196                                                                        │
│   197                                                                        │
│   198 def _cancel_all_tasks(loop):                                           │
│                                                                              │
│ ╭─────────────────────────────── locals ───────────────────────────────╮     │
│ │        debug = None                                                  │     │
│ │ loop_factory = None                                                  │     │
│ │         main = <coroutine object scan.<locals>._scan at 0x1048d4880> │     │
│ │       runner = <asyncio.runners.Runner object at 0x104275fa0>        │     │
│ ╰──────────────────────────────────────────────────────────────────────╯     │
│                                                                              │
│ /Users/admin/.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/p │
│ ython3.12/asyncio/runners.py:118 in run                                      │
│                                                                              │
│   115 │   │                                                                  │
│   116 │   │   self._interrupt_count = 0                                      │
│   117 │   │   try:                                                           │
│ ❱ 118 │   │   │   return self._loop.run_until_complete(task)                 │
│   119 │   │   except exceptions.CancelledError:                              │
│   120 │   │   │   if self._interrupt_count > 0:                              │
│   121 │   │   │   │   uncancel = getattr(task, "uncancel", None)             │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │        context = <_contextvars.Context object at 0x10482be80>            │ │
│ │           coro = <coroutine object scan.<locals>._scan at 0x1048d4880>   │ │
│ │           self = <asyncio.runners.Runner object at 0x104275fa0>          │ │
│ │ sigint_handler = functools.partial(<bound method Runner._on_sigint of    │ │
│ │                  <asyncio.runners.Runner object at 0x104275fa0>>,        │ │
│ │                  main_task=<Task finished name='Task-1'                  │ │
│ │                  coro=<scan.<locals>._scan() done, defined at            │ │
│ │                  /Users/admin/Work/codex/codex/cli.py:125> exception=1   │ │
│ │                  validation error for PatternMatch                       │ │
│ │                  category                                                │ │
│ │                    Input should be 'package_management',                 │ │
│ │                  'core_libraries', 'quality_tools', 'project_structure', │ │
│ │                  'error_handling', 'validation', 'resource_management',  │ │
│ │                  'testing', 'security', 'documentation', 'decorators',   │ │
│ │                  'database', 'api_design', 'cli_design', 'functional',   │ │
│ │                  'dependencies', 'git', 'logging', 'monitoring',         │ │
│ │                  'naming', 'typing', 'imports', 'ci_cd' or               │ │
│ │                  'organization' [type=enum, input_value='QUALITY_TOOLS', │ │
│ │                  input_type=str]                                         │ │
│ │                  │   For further information visit                       │ │
│ │                  https://errors.pydantic.dev/2.11/v/enum>)               │ │
│ │           task = <Task finished name='Task-1'                            │ │
│ │                  coro=<scan.<locals>._scan() done, defined at            │ │
│ │                  /Users/admin/Work/codex/codex/cli.py:125> exception=1   │ │
│ │                  validation error for PatternMatch                       │ │
│ │                  category                                                │ │
│ │                    Input should be 'package_management',                 │ │
│ │                  'core_libraries', 'quality_tools', 'project_structure', │ │
│ │                  'error_handling', 'validation', 'resource_management',  │ │
│ │                  'testing', 'security', 'documentation', 'decorators',   │ │
│ │                  'database', 'api_design', 'cli_design', 'functional',   │ │
│ │                  'dependencies', 'git', 'logging', 'monitoring',         │ │
│ │                  'naming', 'typing', 'imports', 'ci_cd' or               │ │
│ │                  'organization' [type=enum, input_value='QUALITY_TOOLS', │ │
│ │                  input_type=str]                                         │ │
│ │                  │   For further information visit                       │ │
│ │                  https://errors.pydantic.dev/2.11/v/enum>                │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /Users/admin/.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/p │
│ ython3.12/asyncio/base_events.py:691 in run_until_complete                   │
│                                                                              │
│    688 │   │   if not future.done():                                         │
│    689 │   │   │   raise RuntimeError('Event loop stopped before Future comp │
│    690 │   │                                                                 │
│ ❱  691 │   │   return future.result()                                        │
│    692 │                                                                     │
│    693 │   def stop(self):                                                   │
│    694 │   │   """Stop running the event loop.                               │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │   future = <Task finished name='Task-1' coro=<scan.<locals>._scan()      │ │
│ │            done, defined at /Users/admin/Work/codex/codex/cli.py:125>    │ │
│ │            exception=1 validation error for PatternMatch                 │ │
│ │            category                                                      │ │
│ │              Input should be 'package_management', 'core_libraries',     │ │
│ │            'quality_tools', 'project_structure', 'error_handling',       │ │
│ │            'validation', 'resource_management', 'testing', 'security',   │ │
│ │            'documentation', 'decorators', 'database', 'api_design',      │ │
│ │            'cli_design', 'functional', 'dependencies', 'git', 'logging', │ │
│ │            'monitoring', 'naming', 'typing', 'imports', 'ci_cd' or       │ │
│ │            'organization' [type=enum, input_value='QUALITY_TOOLS',       │ │
│ │            input_type=str]                                               │ │
│ │            │   For further information visit                             │ │
│ │            https://errors.pydantic.dev/2.11/v/enum>                      │ │
│ │ new_task = False                                                         │ │
│ │     self = <_UnixSelectorEventLoop running=False closed=True             │ │
│ │            debug=False>                                                  │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /Users/admin/Work/codex/codex/cli.py:157 in _scan                            │
│                                                                              │
│    154 │   │   │                                                             │
│    155 │   │   │   elif path.is_dir():                                       │
│    156 │   │   │   │   # Scan directory                                      │
│ ❱  157 │   │   │   │   results = await scanner.scan_directory(path)          │
│    158 │   │   │   │   for result in results:                                │
│    159 │   │   │   │   │   if result.violations:                             │
│    160 │   │   │   │   │   │   total_violations += len(result.violations)    │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │   best_practices = True                                                  │ │
│ │      config_data = {                                                     │ │
│ │                    │   'patterns': ['all'],                              │ │
│ │                    │   'exclude': [                                      │ │
│ │                    │   │   '*.pyc',                                      │ │
│ │                    │   │   '__pycache__',                                │ │
│ │                    │   │   '.git',                                       │ │
│ │                    │   │   '.venv',                                      │ │
│ │                    │   │   'venv'                                        │ │
│ │                    │   ],                                                │ │
│ │                    │   'auto_fix': False,                                │ │
│ │                    │   'enforce': [                                      │ │
│ │                    │   │   'mandatory',                                  │ │
│ │                    │   │   'critical',                                   │ │
│ │                    │   │   'high'                                        │ │
│ │                    │   ],                                                │ │
│ │                    │   'farm_url': 'http://localhost:8001',              │ │
│ │                    │   'quiet': False,                                   │ │
│ │                    │   'show_diff': False,                               │ │
│ │                    │   'run_tools': True,                                │ │
│ │                    │   'tools': {                                        │ │
│ │                    │   │   'ruff': True,                                 │ │
│ │                    │   │   'mypy': True,                                 │ │
│ │                    │   │   'typos': True                                 │ │
│ │                    │   }                                                 │ │
│ │                    }                                                     │ │
│ │             diff = False                                                 │ │
│ │          exclude = None                                                  │ │
│ │              fix = False                                                 │ │
│ │             path = PosixPath('.')                                        │ │
│ │            paths = [PosixPath('.')]                                      │ │
│ │            quiet = False                                                 │ │
│ │          scanner = <codex.scanner.Scanner object at 0x103f702c0>         │ │
│ │ total_violations = 0                                                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /Users/admin/Work/codex/codex/scanner.py:127 in scan_directory               │
│                                                                              │
│   124 │   │   │   │   │   tool_analysis = AnalysisResult(                    │
│   125 │   │   │   │   │   │   file_path=f"[{tool.value}]",                   │
│   126 │   │   │   │   │   │   violations=[                                   │
│ ❱ 127 │   │   │   │   │   │   │   PatternMatch(                              │
│   128 │   │   │   │   │   │   │   │   pattern_id=0,                          │
│   129 │   │   │   │   │   │   │   │   pattern_name=f"{tool.value}_check",    │
│   130 │   │   │   │   │   │   │   │   category="QUALITY_TOOLS",  # type: ign │
│                                                                              │
│ ╭───────────────────────────────── locals ─────────────────────────────────╮ │
│ │        directory = PosixPath('.')                                        │ │
│ │        file_path = PosixPath('.venv/lib/python3.12/site-packages/pre_co… │ │
│ │          pattern = '*.rs'                                                │ │
│ │ patterns_to_scan = ['*.py', '*.js', '*.ts', '*.go', '*.rs']              │ │
│ │           result = AnalysisResult(                                       │ │
│ │                    │   file_path='build/lib/codex/mcp_server.py',        │ │
│ │                    │   matches=[],                                       │ │
│ │                    │   applied_patterns=[],                              │ │
│ │                    │   missing_patterns=[],                              │ │
│ │                    │   violations=[                                      │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=22,                            │ │
│ │                    │   │   │   pattern_name='no-cors-wildcard',          │ │
│ │                    │   │   │   category=<PatternCategory.SECURITY:       │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   priority=<PatternPriority.MANDATORY:      │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=257,                          │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='markdown += f"**Found       │ │
│ │                    {len(patterns)} patterns**\\n\\n"',                   │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion="NEVER use '*' in production   │ │
│ │                    CORS origins",                                        │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   ),                                            │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=30,                            │ │
│ │                    │   │   │   pattern_name='mock-code-naming',          │ │
│ │                    │   │   │   category=<PatternCategory.TESTING:        │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   priority=<PatternPriority.MANDATORY:      │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=110,                          │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='"description": "Path to     │ │
│ │                    file being worked on (e.g., \'src/api.py\',           │ │
│ │                    \'tests/test_cl'+10,                                  │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion='Mock functions must start     │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   ),                                            │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=26,                            │ │
│ │                    │   │   │   pattern_name='structured-logging',        │ │
│ │                    │   │   │   category=<PatternCategory.LOGGING:        │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   priority=<PatternPriority.HIGH: 'HIGH'>,  │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=50,                           │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='logger =                    │ │
│ │                    logging.getLogger("codex-mcp-server")',               │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion='Use JSON structured logs with │ │
│ │                    consistent schema',                                   │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   ),                                            │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=24,                            │ │
│ │                    │   │   │                                             │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   category=<PatternCategory.SECURITY:       │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   priority=<PatternPriority.HIGH: 'HIGH'>,  │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=10,                           │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='import traceback',          │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion='Return generic error messages │ │
│ │                    in production',                                       │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   ),                                            │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=27,                            │ │
│ │                    │   │   │   pattern_name='minimum-test-coverage',     │ │
│ │                    │   │   │   category=<PatternCategory.TESTING:        │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   priority=<PatternPriority.HIGH: 'HIGH'>,  │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=110,                          │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='"description": "Path to     │ │
│ │                    file being worked on (e.g., \'src/api.py\',           │ │
│ │                    \'tests/test_cl'+10,                                  │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion='Maintain 80% minimum code     │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   ),                                            │ │
│ │                    │   │   PatternMatch(                                 │ │
│ │                    │   │   │   pattern_id=23,                            │ │
│ │                    │   │   │   pattern_name='use-pydantic-validation',   │ │
│ │                    │   │   │   category=<PatternCategory.VALIDATION:     │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   priority=<PatternPriority.HIGH: 'HIGH'>,  │ │
│ │                    │   │   │                                             │ │
│ │                    file_path='build/lib/codex/mcp_server.py',            │ │
│ │                    │   │   │   line_number=162,                          │ │
│ │                    │   │   │   column=None,                              │ │
│ │                    │   │   │   matched_code='"description": "What you    │ │
│ │                    want to accomplish (e.g., \'make HTTP requests\',     │ │
│ │                    \'handle'+25,                                         │ │
│ │                    │   │   │   confidence=0.9,                           │ │
│ │                    │   │   │   suggestion='Use Pydantic for all API      │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   auto_fixable=False,                       │ │
│ │                    │   │   │   fix_code=None                             │ │
│ │                    │   │   )                                             │ │
│ │                    │   ],                                                │ │
│ │                    │   score=1.0,                                        │ │
│ │                    │   suggestions=[]                                    │ │
│ │                    )                                                     │ │
│ │          results = [                                                     │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='experiment_fts.py',                │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=259,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='("test*", "Find testing │ │
│ │                    patterns with wildcard"),',                           │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=190,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'rationale': 'Required  │ │
│ │                    for testability',",                                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=29,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-uv-package-manager',                │ │
│ │                    │   │   │   │                                         │ │
│ │                    category=<PatternCategory.DEPENDENCIES:               │ │
│ │                    'dependencies'>,                                      │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=89,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'name':                 │ │
│ │                    'use-uv-not-pip',",                                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use uv for speed and      │ │
│ │                    reliability',                                         │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=258,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='("logging.exception",   │ │
│ │                    "Find logging exception patterns"),',                 │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=24,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=258,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='("logging.exception",   │ │
│ │                    "Find logging exception patterns"),',                 │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Return generic error      │ │
│ │                    messages in production',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='experiment_fts.py',        │ │
│ │                    │   │   │   │   line_number=190,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'rationale': 'Required  │ │
│ │                    for testability',",                                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='intelligent_fixer.py',             │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=369,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='new_line =              │ │
│ │                    re.sub(r\'print\\s*\\(\', f"{strategy[\'method\']}(", │ │
│ │                    original_line)',                                      │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=21,                        │ │
│ │                    │   │   │   │   pattern_name='secure-jwt-storage',    │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=211,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'action':               │ │
│ │                    'replace_hardcoded_path',",                           │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Store JWT secrets in      │ │
│ │                    secure credential manager, never hardcode',           │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=112,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="if 'test' in path_str   │ │
│ │                    or 'test' in content:",                               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=102,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'has_logging':          │ │
│ │                    any('logging' in line for line in lines[:30])",       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=24,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=143,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='return "Print statement │ │
│ │                    in test context - likely debug output"',              │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Return generic error      │ │
│ │                    messages in production',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='intelligent_fixer.py',     │ │
│ │                    │   │   │   │   line_number=112,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="if 'test' in path_str   │ │
│ │                    or 'test' in content:",                               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='test_startup.py',                  │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='test_startup.py',          │ │
│ │                    │   │   │   │   line_number=17,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='print("="*60)',         │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='test_startup.py',          │ │
│ │                    │   │   │   │   line_number=14,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='def                     │ │
│ │                    test_startup_files():',                               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='test_startup.py',          │ │
│ │                    │   │   │   │   line_number=14,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='def                     │ │
│ │                    test_startup_files():',                               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │                                                 │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   │   │   line_number=24,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='print("=" * 60,         │ │
│ │                    file=sys.stderr)',                                    │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   │   │   line_number=15,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='from unittest.mock      │ │
│ │                    import patch',                                        │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   │   │   line_number=11,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='import logging',        │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   │   │   line_number=15,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='from unittest.mock      │ │
│ │                    import patch',                                        │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=23,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-pydantic-validation',               │ │
│ │                    │   │   │   │   category=<PatternCategory.VALIDATION: │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='demo_negative_space_integration.py',       │ │
│ │                    │   │   │   │   line_number=124,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Error is expected due │ │
│ │                    to validation issues, but check MCP compliance',      │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use Pydantic for all API  │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='import_patterns_unified.py',       │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='import_patterns_unified.py',               │ │
│ │                    │   │   │   │   line_number=22,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='print("=" * 40)',       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='import_patterns_unified.py',               │ │
│ │                    │   │   │   │   line_number=73,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='test_queries =          │ │
│ │                    ["naming", "error", "validation"]',                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='import_patterns_unified.py',               │ │
│ │                    │   │   │   │   line_number=70,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Test search           │ │
│ │                    functionality',                                       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=23,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-pydantic-validation',               │ │
│ │                    │   │   │   │   category=<PatternCategory.VALIDATION: │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='import_patterns_unified.py',               │ │
│ │                    │   │   │   │   line_number=73,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='test_queries =          │ │
│ │                    ["naming", "error", "validation"]',                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use Pydantic for all API  │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='smart_scanner.py',                 │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=42,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │                                         │ │
│ │                    matched_code="'cors-wildcard-refined': {",            │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=232,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='Today I tested my       │ │
│ │                    refined patterns against the same codebase.',         │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=25,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-db-context-managers',               │ │
│ │                    │   │   │   │   category=<PatternCategory.DATABASE:   │ │
│ │                    'database'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=68,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │                                         │ │
│ │                    matched_code="r'session\\s*=.*Session\\(\\)',",       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Always use context        │ │
│ │                    managers for database sessions',                      │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=29,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-uv-package-manager',                │ │
│ │                    │   │   │   │                                         │ │
│ │                    category=<PatternCategory.DEPENDENCIES:               │ │
│ │                    'dependencies'>,                                      │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=131,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Check context         │ │
│ │                    requirements if specified',                           │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use uv for speed and      │ │
│ │                    reliability',                                         │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=25,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │                                         │ │
│ │                    matched_code="'structured-logging-refined': {",       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='smart_scanner.py',         │ │
│ │                    │   │   │   │   line_number=232,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='Today I tested my       │ │
│ │                    refined patterns against the same codebase.',         │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='negative_space_analyzer.py',       │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='negative_space_analyzer.py',               │ │
│ │                    │   │   │   │   line_number=94,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'files_count':          │ │
│ │                    len(list(project_dir.rglob('*.py'))),",               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='negative_space_analyzer.py',               │ │
│ │                    │   │   │   │   line_number=128,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'has_tests':            │ │
│ │                    (project_dir / 'tests').exists() or                   │ │
│ │                    bool(list(project_dir.rglob('te"+12,                  │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=29,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-uv-package-manager',                │ │
│ │                    │   │   │   │                                         │ │
│ │                    category=<PatternCategory.DEPENDENCIES:               │ │
│ │                    'dependencies'>,                                      │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='negative_space_analyzer.py',               │ │
│ │                    │   │   │   │   line_number=105,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="indicators =            │ │
│ │                    ['pyproject.toml', 'setup.py', 'requirements.txt']",  │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use uv for speed and      │ │
│ │                    reliability',                                         │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='negative_space_analyzer.py',               │ │
│ │                    │   │   │   │   line_number=42,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='import logging',        │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='negative_space_analyzer.py',               │ │
│ │                    │   │   │   │   line_number=128,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'has_tests':            │ │
│ │                    (project_dir / 'tests').exists() or                   │ │
│ │                    bool(list(project_dir.rglob('te"+12,                  │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='test_sqlite_scanning.py',          │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='test_sqlite_scanning.py',  │ │
│ │                    │   │   │   │   line_number=24,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='print("=" * 50)',       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='test_sqlite_scanning.py',  │ │
│ │                    │   │   │   │   line_number=13,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Add codex to path for │ │
│ │                    testing',                                             │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=24,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='test_sqlite_scanning.py',  │ │
│ │                    │   │   │   │   line_number=126,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='import traceback',      │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Return generic error      │ │
│ │                    messages in production',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='test_sqlite_scanning.py',  │ │
│ │                    │   │   │   │   line_number=13,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Add codex to path for │ │
│ │                    testing',                                             │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=23,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-pydantic-validation',               │ │
│ │                    │   │   │   │   category=<PatternCategory.VALIDATION: │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='test_sqlite_scanning.py',  │ │
│ │                    │   │   │   │   line_number=34,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='import requests',       │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use Pydantic for all API  │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='ai_query_interface.py',            │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=115,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='output += f"- **Rule**: │ │
│ │                    {row[\'description\']}\\n"',                          │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=135,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'testing': 'test pytest │ │
│ │                    coverage mock',",                                     │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=29,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-uv-package-manager',                │ │
│ │                    │   │   │   │                                         │ │
│ │                    category=<PatternCategory.DEPENDENCIES:               │ │
│ │                    'dependencies'>,                                      │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=137,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'package management':   │ │
│ │                    'uv pip poetry package install',",                    │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use uv for speed and      │ │
│ │                    reliability',                                         │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=134,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'error handling':       │ │
│ │                    'exception error logging try catch',",                │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=24,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=134,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'error handling':       │ │
│ │                    'exception error logging try catch',",                │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Return generic error      │ │
│ │                    messages in production',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=185,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='print("\\n1. AI Query:  │ │
│ │                    \'About to implement HTTP client functionality\'")',  │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=23,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-pydantic-validation',               │ │
│ │                    │   │   │   │   category=<PatternCategory.VALIDATION: │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │   file_path='ai_query_interface.py',    │ │
│ │                    │   │   │   │   line_number=141,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code="'api': 'fastapi api     │ │
│ │                    rest http endpoint',",                                │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use Pydantic for all API  │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   AnalysisResult(                                   │ │
│ │                    │   │   file_path='enhanced_pattern_extractor.py',    │ │
│ │                    │   │   matches=[],                                   │ │
│ │                    │   │   applied_patterns=[],                          │ │
│ │                    │   │   missing_patterns=[],                          │ │
│ │                    │   │   violations=[                                  │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=22,                        │ │
│ │                    │   │   │   │   pattern_name='no-cors-wildcard',      │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=27,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"detect":               │ │
│ │                    r"class\\s+(\\w*Heimdall\\w+)|class\\s+(\\w*Circle\\… │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion="NEVER use '*' in          │ │
│ │                    production CORS origins",                             │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=30,                        │ │
│ │                    │   │   │   │   pattern_name='mock-code-naming',      │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.MANDATORY:  │ │
│ │                    'MANDATORY'>,                                         │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=180,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='# Pattern: Proper test  │ │
│ │                    naming',                                              │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Mock functions must start │ │
│ │                    with mock_ prefix and log warnings',                  │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=29,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-uv-package-manager',                │ │
│ │                    │   │   │   │                                         │ │
│ │                    category=<PatternCategory.DEPENDENCIES:               │ │
│ │                    'dependencies'>,                                      │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=242,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"name":                 │ │
│ │                    "use-uv-not-pip",',                                   │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use uv for speed and      │ │
│ │                    reliability',                                         │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=26,                        │ │
│ │                    │   │   │   │   pattern_name='structured-logging',    │ │
│ │                    │   │   │   │   category=<PatternCategory.LOGGING:    │ │
│ │                    'logging'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=74,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"good_example": "except │ │
│ │                    ValueError as e:\\n    logger.error(\'Invalid         │ │
│ │                    value\', error'+6,                                     │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use JSON structured logs  │ │
│ │                    with consistent schema',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=24,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='sanitize-production-errors',            │ │
│ │                    │   │   │   │   category=<PatternCategory.SECURITY:   │ │
│ │                    'security'>,                                          │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=70,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"rule": "Always catch   │ │
│ │                    specific exception types",',                          │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Return generic error      │ │
│ │                    messages in production',                              │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=27,                        │ │
│ │                    │   │   │   │   pattern_name='minimum-test-coverage', │ │
│ │                    │   │   │   │   category=<PatternCategory.TESTING:    │ │
│ │                    'testing'>,                                           │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=54,                       │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"rule": "Use functional │ │
│ │                    names, not implementation specifics",',               │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Maintain 80% minimum code │ │
│ │                    coverage',                                            │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   ),                                        │ │
│ │                    │   │   │   PatternMatch(                             │ │
│ │                    │   │   │   │   pattern_id=23,                        │ │
│ │                    │   │   │   │                                         │ │
│ │                    pattern_name='use-pydantic-validation',               │ │
│ │                    │   │   │   │   category=<PatternCategory.VALIDATION: │ │
│ │                    'validation'>,                                        │ │
│ │                    │   │   │   │   priority=<PatternPriority.HIGH:       │ │
│ │                    'HIGH'>,                                              │ │
│ │                    │   │   │   │                                         │ │
│ │                    file_path='enhanced_pattern_extractor.py',            │ │
│ │                    │   │   │   │   line_number=146,                      │ │
│ │                    │   │   │   │   column=None,                          │ │
│ │                    │   │   │   │   matched_code='"good_example":         │ │
│ │                    "logger.info(\'user_login\', user_id=123,             │ │
│ │                    ip=request.ip)",',                                    │ │
│ │                    │   │   │   │   confidence=0.9,                       │ │
│ │                    │   │   │   │   suggestion='Use Pydantic for all API  │ │
│ │                    input validation',                                    │ │
│ │                    │   │   │   │   auto_fixable=False,                   │ │
│ │                    │   │   │   │   fix_code=None                         │ │
│ │                    │   │   │   )                                         │ │
│ │                    │   │   ],                                            │ │
│ │                    │   │   score=1.0,                                    │ │
│ │                    │   │   suggestions=[]                                │ │
│ │                    │   ),                                                │ │
│ │                    │   ... +215                                          │ │
│ │                    ]                                                     │ │
│ │             self = <codex.scanner.Scanner object at 0x103f702c0>         │ │
│ │             tool = <ToolType.RUFF: 'ruff'>                               │ │
│ │      tool_result = ToolResult(                                           │ │
│ │                    │   tool=<ToolType.RUFF: 'ruff'>,                     │ │
│ │                    │   success=False,                                    │ │
│ │                    │   violations=11757,                                 │ │
│ │                    │   output='[\n  {\n    "cell": null,\n    "code":    │ │
│ │                    "I001",\n    "end_location": {\n                      │ │
│ │                    "column"'+5125651,                                    │ │
│ │                    │   fixed=0,                                          │ │
│ │                    │   exit_code=1                                       │ │
│ │                    )                                                     │ │
│ │     tool_results = {                                                     │ │
│ │                    │   <ToolType.RUFF: 'ruff'>: ToolResult(              │ │
│ │                    │   │   tool=<ToolType.RUFF: 'ruff'>,                 │ │
│ │                    │   │   success=False,                                │ │
│ │                    │   │   violations=11757,                             │ │
│ │                    │   │   output='[\n  {\n    "cell": null,\n           │ │
│ │                    "code": "I001",\n    "end_location": {\n              │ │
│ │                    "column"'+5125651,                                    │ │
│ │                    │   │   fixed=0,                                      │ │
│ │                    │   │   exit_code=1                                   │ │
│ │                    │   ),                                                │ │
│ │                    │   <ToolType.MYPY: 'mypy'>: ToolResult(              │ │
│ │                    │   │   tool=<ToolType.MYPY: 'mypy'>,                 │ │
│ │                    │   │   success=False,                                │ │
│ │                    │   │   violations=1,                                 │ │
│ │                    │   │   output='codex/rules/loader.py:18:5: error:    │ │
│ │                    Unexpected indent  [syntax]\n        settings_'+50,   │ │
│ │                    │   │   fixed=0,                                      │ │
│ │                    │   │   exit_code=2                                   │ │
│ │                    │   ),                                                │ │
│ │                    │   <ToolType.TYPOS: 'typos'>: ToolResult(            │ │
│ │                    │   │   tool=<ToolType.TYPOS: 'typos'>,               │ │
│ │                    │   │   success=True,                                 │ │
│ │                    │   │   violations=0,                                 │ │
│ │                    │   │   output='',                                    │ │
│ │                    │   │   fixed=0,                                      │ │
│ │                    │   │   exit_code=0                                   │ │
│ │                    │   )                                                 │ │
│ │                    }                                                     │ │
│ ╰──────────────────────────────────────────────────────────────────────────╯ │
│                                                                              │
│ /Users/admin/Work/codex/.venv/lib/python3.12/site-packages/pydantic/main.py: │
│ 253 in __init__                                                              │
│                                                                              │
│    250 │   │   """                                                           │
│    251 │   │   # `__tracebackhide__` tells pytest and some other tools to om │
│    252 │   │   __tracebackhide__ = True                                      │
│ ❱  253 │   │   validated_self = self.__pydantic_validator__.validate_python( │
│    254 │   │   if self is not validated_self:                                │
│    255 │   │   │   warnings.warn(                                            │
│    256 │   │   │   │   'A custom validator is returning a value other than ` │
│                                                                              │
│ ╭─────────────────────── locals ────────────────────────╮                    │
│ │ data = {                                              │                    │
│ │        │   'pattern_id': 0,                           │                    │
│ │        │   'pattern_name': 'ruff_check',              │                    │
│ │        │   'category': 'QUALITY_TOOLS',               │                    │
│ │        │   'priority': 'HIGH',                        │                    │
│ │        │   'file_path': '.',                          │                    │
│ │        │   'line_number': 0,                          │                    │
│ │        │   'matched_code': '',                        │                    │
│ │        │   'confidence': 1.0,                         │                    │
│ │        │   'suggestion': '11757 ruff issue(s) found', │                    │
│ │        │   'auto_fixable': False                      │                    │
│ │        }                                              │                    │
│ │ self = PatternMatch()                                 │                    │
│ ╰───────────────────────────────────────────────────────╯                    │
╰──────────────────────────────────────────────────────────────────────────────╯
ValidationError: 1 validation error for PatternMatch
category
  Input should be 'package_management', 'core_libraries', 'quality_tools',
'project_structure', 'error_handling', 'validation', 'resource_management',
'testing', 'security', 'documentation', 'decorators', 'database', 'api_design',
'cli_design', 'functional', 'dependencies', 'git', 'logging', 'monitoring',
'naming', 'typing', 'imports', 'ci_cd' or 'organization' [type=enum,
input_value='QUALITY_TOOLS', input_type=str]
    For further information visit https://errors.pydantic.dev/2.11/v/enum
