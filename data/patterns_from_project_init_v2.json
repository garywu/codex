{
  "version": "2.0.0",
  "source": "project-init.json",
  "description": "Patterns extracted from updated project organization principles",
  "patterns": [
    {
      "name": "no-redundant-package-prefix",
      "category": "naming",
      "priority": "HIGH",
      "description": "Remove redundant package name prefixes from files and classes",
      "rule": "Don't repeat package name in file or class names within that package",
      "detect": "class\\s+(\\w*Package\\w+)|(\\w+_package\\w+\\.py)",
      "fix": "Remove the package name prefix/suffix",
      "why": "Reduces redundancy and improves clarity - the package context is already known",
      "good_example": "# In heimdall package\nclass Daemon:  # Not HeimdallDaemon",
      "bad_example": "# In heimdall package\nclass HeimdallDaemon:  # Redundant prefix",
      "id": 1000,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "no-version-suffixes",
      "category": "naming",
      "priority": "MANDATORY",
      "description": "Remove version suffixes from canonical implementations",
      "rule": "Use single canonical version without v1, v2, _simple, _new suffixes",
      "detect": "(_v\\d+|_simple|_new|_old|_backup)\\.(py|js|ts|go)$",
      "fix": "Consolidate to single canonical implementation",
      "why": "Version suffixes indicate technical debt and unclear ownership",
      "good_example": "server.py  # Single canonical implementation",
      "bad_example": "server_v2.py  # Multiple versions create confusion",
      "id": 1001,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "purpose-based-naming",
      "category": "naming",
      "priority": "HIGH",
      "description": "Use purpose-based suffixes instead of implementation details",
      "rule": "Name components by their purpose (manager, handler, client, config)",
      "detect": "(_impl|_base|_abstract|_concrete)\\.(py|js|ts)$",
      "fix": "Rename to describe purpose, not implementation",
      "why": "Purpose-based names are more maintainable and self-documenting",
      "good_example": "cache_manager.py  # Clear purpose",
      "bad_example": "cache_impl_v2.py  # Implementation detail in name",
      "id": 1002,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "no-silent-defaults",
      "category": "error_handling",
      "priority": "HIGH",
      "description": "Avoid .get() with defaults for required parameters",
      "rule": "Don't use dict.get() with defaults for required configuration",
      "detect": "\\.get\\(['\\\"][\\w_]+['\\\"]\\s*,\\s*[^)]+\\)",
      "fix": "Use direct access and handle KeyError explicitly",
      "why": "Silent defaults hide configuration errors and make debugging harder",
      "good_example": "port = config['port']  # Fails fast if missing",
      "bad_example": "port = config.get('port', 8080)  # Hides missing config",
      "id": 1003,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "specific-exceptions",
      "category": "error_handling",
      "priority": "MANDATORY",
      "description": "Catch specific exceptions, never bare except",
      "rule": "Always catch specific exception types",
      "detect": "except\\s*:|except\\s+Exception\\s*:",
      "fix": "Replace with specific exception types",
      "why": "Broad exceptions hide bugs and make debugging difficult",
      "good_example": "except FileNotFoundError:",
      "bad_example": "except:  # Catches everything including SystemExit",
      "id": 1004,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "use-pydantic-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Use Pydantic models for data validation",
      "rule": "Replace manual validation with Pydantic models",
      "detect": "if\\s+not\\s+isinstance\\(|if\\s+type\\(.*\\)\\s*!=",
      "fix": "Create Pydantic model for validation",
      "why": "Pydantic provides automatic validation, serialization, and clear error messages",
      "good_example": "class Config(BaseModel):\n    port: int\n    host: str",
      "bad_example": "if not isinstance(port, int):\n    port = 8080",
      "id": 1005,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "no-print-statements",
      "category": "logging",
      "priority": "HIGH",
      "description": "Replace print statements with structured logging",
      "rule": "Use logging module instead of print() in production code",
      "detect": "print\\s*\\(",
      "fix": "Replace with logger.info() or appropriate log level",
      "why": "Print statements can't be controlled, filtered, or structured",
      "good_example": "logger.info('Processing request', user_id=user_id)",
      "bad_example": "print(f'Processing request for {user_id}')",
      "id": 1006,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "structured-logging",
      "category": "logging",
      "priority": "MEDIUM",
      "description": "Use structured logging with key-value pairs",
      "rule": "Log with structured data instead of string formatting",
      "detect": "logger\\.\\w+\\(f['\\\"]|logger\\.\\w+\\(['\\\"].*%",
      "fix": "Use structured logging with key-value pairs",
      "why": "Structured logs are searchable, parseable, and integrable with monitoring",
      "good_example": "logger.info('user_action', action='login', user_id=123)",
      "bad_example": "logger.info(f'User {user_id} logged in')",
      "id": 1007,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "centralized-logging",
      "category": "logging",
      "priority": "HIGH",
      "description": "Use centralized logging configuration",
      "rule": "Configure logging in one place, import everywhere",
      "detect": "logging\\.basicConfig\\(|logging\\.getLogger\\(__name__\\)\\.setLevel",
      "fix": "Create central logging config module",
      "why": "Centralized configuration ensures consistent logging across the application",
      "good_example": "from .logging_config import get_logger\nlogger = get_logger(__name__)",
      "bad_example": "import logging\nlogging.basicConfig(level=logging.INFO)",
      "id": 1008,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "documentation-structure",
      "category": "organization",
      "priority": "MEDIUM",
      "description": "Organize documentation in standard folders",
      "rule": "Use docs/api/, docs/architecture/, docs/guides/ structure",
      "detect": "(README_.*\\.md|NOTES\\.md|TODO\\.md)$",
      "fix": "Move to appropriate docs/ subfolder",
      "why": "Organized documentation is easier to maintain and discover",
      "good_example": "docs/architecture/system-design.md",
      "bad_example": "README_OLD.md in root directory",
      "id": 1009,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "test-file-naming",
      "category": "testing",
      "priority": "MEDIUM",
      "description": "Use consistent test file naming",
      "rule": "Name tests as test_{component}_{aspect}.py",
      "detect": "test_.*\\.py$",
      "fix": "Rename to follow pattern: test_{component}_{aspect}.py",
      "why": "Consistent naming makes tests discoverable and their purpose clear",
      "good_example": "test_auth_validation.py",
      "bad_example": "auth_tests.py",
      "id": 1010,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "no-backup-files",
      "category": "organization",
      "priority": "MANDATORY",
      "description": "Remove backup and temporary files from version control",
      "rule": "No _backup, _old, _tmp files in production code",
      "detect": "(_backup|_old|_tmp|\\.bak|~)$",
      "fix": "Delete or move to archive if needed",
      "why": "Backup files create confusion and potential security risks",
      "good_example": "config.py  # Current version only",
      "bad_example": "config_backup.py  # Should not be in repo",
      "id": 1011,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "import-order",
      "category": "imports",
      "priority": "LOW",
      "description": "Follow standard import ordering",
      "rule": "Standard library, third-party, then local imports",
      "detect": "^import|^from\\s+\\w+\\s+import",
      "fix": "Reorder imports: stdlib, third-party, local",
      "why": "Consistent import order improves readability",
      "good_example": "import os\nimport sys\n\nimport requests\n\nfrom .config import settings",
      "bad_example": "from .config import settings\nimport requests\nimport os",
      "id": 1012,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "use-relative-imports",
      "category": "imports",
      "priority": "MEDIUM",
      "description": "Use relative imports within packages",
      "rule": "Prefer relative imports for internal package modules",
      "detect": "from\\s+mypackage\\.",
      "fix": "Replace with relative import",
      "why": "Relative imports make packages more portable and refactorable",
      "good_example": "from .utils import helper",
      "bad_example": "from mypackage.utils import helper",
      "id": 1013,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "use-modern-tools",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Use uv for Python dependency management",
      "rule": "Prefer uv over pip for faster, more reliable dependency management",
      "detect": "pip\\s+install|requirements\\.txt",
      "fix": "Migrate to uv and pyproject.toml",
      "why": "uv is 10-100x faster than pip and more reliable",
      "good_example": "uv add requests",
      "bad_example": "pip install requests",
      "id": 1014,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    },
    {
      "name": "pin-production-versions",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Pin exact versions in production",
      "rule": "Use exact version pins for production dependencies",
      "detect": "['\\\"][\\w-]+>=|['\\\"][\\w-]+~=",
      "fix": "Pin to exact version for production",
      "why": "Exact versions ensure reproducible deployments",
      "good_example": "requests==2.31.0",
      "bad_example": "requests>=2.0.0",
      "id": 1015,
      "source": "project-init-v2",
      "enabled": true,
      "auto_fixable": true
    }
  ]
}
