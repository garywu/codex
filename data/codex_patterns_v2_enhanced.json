{
  "version": "2.0.0",
  "source": "project-init.json",
  "generated": "/Users/admin/Work/codex/codex_patterns_v2_enhanced.json",
  "description": "Enhanced patterns from project organization principles",
  "statistics": {
    "total_patterns": 19,
    "categories": {
      "naming": 3,
      "error_handling": 3,
      "validation": 2,
      "logging": 3,
      "organization": 2,
      "testing": 1,
      "imports": 2,
      "dependencies": 2,
      "git": 1
    },
    "priorities": {
      "HIGH": 10,
      "MANDATORY": 3,
      "MEDIUM": 5,
      "LOW": 1
    }
  },
  "patterns": [
    {
      "name": "no-package-stutter",
      "category": "naming",
      "priority": "HIGH",
      "description": "Avoid repeating package name in module or class names",
      "rule": "Within heimdall package, use daemon.py not heimdall_daemon.py",
      "detect": "class\\s+(\\w*Heimdall\\w+)|class\\s+(\\w*Circle\\w+)|class\\s+(\\w*Hermes\\w+)",
      "fix": "Remove package name from class/file name",
      "why": "Package context is already established by import path",
      "good_example": "from heimdall import Daemon  # Not HeimdallDaemon",
      "bad_example": "from heimdall import HeimdallDaemon  # Redundant",
      "id": 2000,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "naming high"
    },
    {
      "name": "no-version-in-filename",
      "category": "naming",
      "priority": "MANDATORY",
      "description": "Never use version numbers in production filenames",
      "rule": "Maintain single canonical implementation without v1, v2, etc.",
      "detect": "[\\w_]+(v\\d+|_v\\d+|_version\\d+)\\.(py|js|ts|go)$",
      "fix": "Consolidate to single canonical file",
      "why": "Version suffixes indicate unresolved technical debt",
      "good_example": "cache_manager.py",
      "bad_example": "cache_manager_v2.py",
      "id": 2001,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 1.0,
      "tags": "naming mandatory"
    },
    {
      "name": "no-impl-details-in-name",
      "category": "naming",
      "priority": "HIGH",
      "description": "Don't include implementation details in names",
      "rule": "Use functional names, not implementation specifics",
      "detect": "(_simple|_complex|_fast|_slow|_impl|_base|_abstract)\\.(py|js|ts)$",
      "fix": "Rename based on purpose, not implementation",
      "why": "Implementation may change but purpose remains",
      "good_example": "processor.py",
      "bad_example": "processor_simple.py",
      "id": 2002,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "naming high"
    },
    {
      "name": "no-bare-except",
      "category": "error_handling",
      "priority": "MANDATORY",
      "description": "Never use bare except: clauses",
      "rule": "Always catch specific exception types",
      "detect": "except\\s*:\\s*$|except\\s*:\\s*#",
      "fix": "Specify exception type: except SpecificError:",
      "why": "Bare except catches SystemExit, KeyboardInterrupt, and hides bugs",
      "good_example": "except ValueError as e:\n    logger.error('Invalid value', error=e)",
      "bad_example": "except:\n    pass  # Silently swallows all errors",
      "id": 2003,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 1.0,
      "tags": "error_handling mandatory"
    },
    {
      "name": "no-broad-exception",
      "category": "error_handling",
      "priority": "HIGH",
      "description": "Avoid catching Exception without re-raising",
      "rule": "Catch specific exceptions or re-raise after logging",
      "detect": "except\\s+Exception\\s*:|except\\s+Exception\\s+as\\s+\\w+:",
      "fix": "Use specific exception types or re-raise",
      "why": "Broad exception handling masks programming errors",
      "good_example": "except RequestException as e:\n    logger.error('Request failed', error=e)\n    raise",
      "bad_example": "except Exception:\n    return None  # Hides errors",
      "id": 2004,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "error_handling high"
    },
    {
      "name": "fail-fast-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Validate inputs immediately and fail with clear errors",
      "rule": "Check required parameters at function entry",
      "detect": "if\\s+not\\s+\\w+:\\s*return\\s+None",
      "fix": "Raise ValueError with descriptive message",
      "why": "Early validation prevents cascading errors",
      "good_example": "if not user_id:\n    raise ValueError('user_id is required')",
      "bad_example": "if not user_id:\n    return None  # Silent failure",
      "id": 2005,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "validation high"
    },
    {
      "name": "no-silent-defaults",
      "category": "error_handling",
      "priority": "HIGH",
      "description": "Don't use .get() with defaults for required config",
      "rule": "Required parameters should fail if missing",
      "detect": "config\\.get\\(['\\\"](\\w+)['\\\"]\\s*,\\s*['\\\"]?[\\w\\d]+['\\\"]?\\)",
      "fix": "Use direct access: config['key']",
      "why": "Silent defaults hide configuration errors",
      "good_example": "api_key = config['api_key']  # Fails if missing",
      "bad_example": "api_key = config.get('api_key', 'default')  # Hides missing config",
      "id": 2006,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "error_handling high"
    },
    {
      "name": "no-print-production",
      "category": "logging",
      "priority": "HIGH",
      "description": "Replace print() with proper logging",
      "rule": "Use logger instead of print in all production code",
      "detect": "^\\s*print\\s*\\(",
      "fix": "Use logger.info() or appropriate level",
      "why": "Print statements can't be controlled or filtered in production",
      "good_example": "logger.info('Processing', item_id=item_id)",
      "bad_example": "print(f'Processing {item_id}')",
      "id": 2007,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "logging high"
    },
    {
      "name": "use-structured-logging",
      "category": "logging",
      "priority": "MEDIUM",
      "description": "Use key-value pairs in logging",
      "rule": "Log with structured data, not string formatting",
      "detect": "logger\\.\\w+\\(f['\\\"].*\\{.*\\}|logger\\.\\w+\\(['\\\"].*%s",
      "fix": "Use key-value parameters",
      "why": "Structured logs are searchable and parseable",
      "good_example": "logger.info('user_login', user_id=123, ip=request.ip)",
      "bad_example": "logger.info(f'User {user_id} logged in from {ip}')",
      "id": 2008,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.8,
      "tags": "logging medium"
    },
    {
      "name": "centralized-logging-config",
      "category": "logging",
      "priority": "HIGH",
      "description": "Configure logging in one central module",
      "rule": "Single logging configuration imported everywhere",
      "detect": "logging\\.basicConfig\\(|logging\\.getLogger\\(\\)\\.setLevel",
      "fix": "Create logging_config.py module",
      "why": "Ensures consistent logging configuration",
      "good_example": "from .logging_config import logger",
      "bad_example": "logging.basicConfig(level=logging.INFO)  # In multiple files",
      "id": 2009,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "logging high"
    },
    {
      "name": "no-backup-files",
      "category": "organization",
      "priority": "MANDATORY",
      "description": "Remove backup/temporary files from version control",
      "rule": "No _backup, _old, _tmp, .bak files in repository",
      "detect": "(_backup|_old|_tmp|_copy|\\.bak|~|\\.(swp|swo))$",
      "fix": "Delete or add to .gitignore",
      "why": "Backup files create confusion and security risks",
      "good_example": ".gitignore contains *.bak",
      "bad_example": "config_backup.py tracked in git",
      "id": 2010,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 1.0,
      "tags": "organization mandatory"
    },
    {
      "name": "test-naming-convention",
      "category": "testing",
      "priority": "MEDIUM",
      "description": "Follow test_{component}_{aspect}.py naming",
      "rule": "Test files should clearly indicate what they test",
      "detect": "test\\.py$|tests\\.py$|_test\\.py$",
      "fix": "Rename to test_{component}_{aspect}.py",
      "why": "Clear test names improve discoverability",
      "good_example": "test_auth_validation.py",
      "bad_example": "auth_tests.py",
      "id": 2011,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.8,
      "tags": "testing medium"
    },
    {
      "name": "organized-documentation",
      "category": "organization",
      "priority": "MEDIUM",
      "description": "Keep documentation in organized structure",
      "rule": "Use docs/ with api/, guides/, architecture/ subdirs",
      "detect": "(README_\\w+\\.md|NOTES\\.md|TODO\\.md|CHANGELOG\\d+\\.md)$",
      "fix": "Move to appropriate docs/ subdirectory",
      "why": "Organized docs are easier to maintain and find",
      "good_example": "docs/architecture/design.md",
      "bad_example": "README_OLD.md in root",
      "id": 2012,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.8,
      "tags": "organization medium"
    },
    {
      "name": "standard-import-order",
      "category": "imports",
      "priority": "LOW",
      "description": "Follow standard library, third-party, local import order",
      "rule": "Group imports: stdlib, third-party, local",
      "detect": "^from \\.|^import (?!sys|os|re|json|time|datetime)",
      "fix": "Reorder imports according to convention",
      "why": "Consistent import order improves readability",
      "good_example": "import os\\nimport sys\\n\\nimport requests\\n\\nfrom .config import settings",
      "bad_example": "from .config import settings\\nimport os",
      "id": 2013,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.7,
      "tags": "imports low"
    },
    {
      "name": "prefer-relative-imports",
      "category": "imports",
      "priority": "MEDIUM",
      "description": "Use relative imports within packages",
      "rule": "Use from . imports for internal package modules",
      "detect": "from\\s+(heimdall|circle|hermes|codex)\\.",
      "fix": "Convert to relative import",
      "why": "Makes packages more portable and refactorable",
      "good_example": "from .utils import helper",
      "bad_example": "from mypackage.utils import helper",
      "id": 2014,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.8,
      "tags": "imports medium"
    },
    {
      "name": "use-uv-not-pip",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Use uv for Python package management",
      "rule": "Replace pip with uv for 10-100x faster installs",
      "detect": "pip\\s+install|python\\s+-m\\s+pip",
      "fix": "Use uv add or uv pip install",
      "why": "uv is significantly faster and more reliable",
      "good_example": "uv add requests",
      "bad_example": "pip install requests",
      "id": 2015,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "dependencies high"
    },
    {
      "name": "pin-production-dependencies",
      "category": "dependencies",
      "priority": "HIGH",
      "description": "Pin exact versions for production",
      "rule": "Use == for production, >= only for libraries",
      "detect": "['\\\"][\\w-]+>=\\d+\\.|['\\\"][\\w-]+~=\\d+\\.",
      "fix": "Pin to exact version for production",
      "why": "Ensures reproducible deployments",
      "good_example": "requests==2.31.0",
      "bad_example": "requests>=2.28.0",
      "id": 2016,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "dependencies high"
    },
    {
      "name": "pydantic-validation",
      "category": "validation",
      "priority": "HIGH",
      "description": "Use Pydantic models for data validation",
      "rule": "Replace manual validation with Pydantic models",
      "detect": "if\\s+isinstance\\(.*,\\s*(dict|list|str|int)\\)|type\\(\\w+\\)\\s*==",
      "fix": "Create Pydantic model",
      "why": "Pydantic provides automatic validation with clear errors",
      "good_example": "class UserInput(BaseModel):\n    name: str\n    age: int",
      "bad_example": "if not isinstance(data, dict):\n    raise ValueError",
      "id": 2017,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.9,
      "tags": "validation high"
    },
    {
      "name": "conventional-commits",
      "category": "git",
      "priority": "MEDIUM",
      "description": "Use conventional commit messages",
      "rule": "Format: type(scope): description",
      "detect": "^(Updated?|Fixed?|Added?|Changed?|Removed?)",
      "fix": "Use: feat:, fix:, docs:, refactor:, test:",
      "why": "Enables automatic changelog generation",
      "good_example": "feat(auth): add OAuth2 support",
      "bad_example": "Updated authentication system",
      "id": 2018,
      "source": "project-init-v2-enhanced",
      "enabled": true,
      "auto_fixable": true,
      "confidence": 0.8,
      "tags": "git medium"
    }
  ]
}
