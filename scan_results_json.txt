
📋 Pre-scan Discovery for .:
     File Discovery Summary
┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┓
┃ Metric             ┃   Value ┃
┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━┩
│ Scan Root          │       . │
│ Total Files Found  │    2926 │
│ Files to Scan      │     101 │
│ Files Excluded     │    2825 │
│ Exclusion Rate     │   96.5% │
│ Discovery Time     │ 181.7ms │
│ Gitignore Patterns │       0 │
└────────────────────┴─────────┘
 Files by Extension
┏━━━━━━━━━━━┳━━━━━━━┓
┃ Extension ┃ Count ┃
┡━━━━━━━━━━━╇━━━━━━━┩
│ .py       │   101 │
└───────────┴───────┘
          Exclusion Reasons
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┓
┃ Reason                    ┃ Count ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━┩
│ Matched exclusion pattern │  2825 │
└───────────────────────────┴───────┘
experiment_fts.py:259: no-cors-wildcard - NEVER use '*' in production CORS
origins
experiment_fts.py:190: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
experiment_fts.py:89: use-uv-package-manager - Use uv for speed and reliability
experiment_fts.py:258: structured-logging - Use JSON structured logs with
consistent schema
experiment_fts.py:258: sanitize-production-errors - Return generic error
messages in production
experiment_fts.py:190: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 6 violations in experiment_fts.py
intelligent_fixer.py:369: no-cors-wildcard - NEVER use '*' in production CORS
origins
intelligent_fixer.py:211: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
intelligent_fixer.py:112: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
intelligent_fixer.py:102: structured-logging - Use JSON structured logs with
consistent schema
intelligent_fixer.py:143: sanitize-production-errors - Return generic error
messages in production
intelligent_fixer.py:112: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 6 violations in intelligent_fixer.py
test_startup.py:17: no-cors-wildcard - NEVER use '*' in production CORS origins
test_startup.py:14: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
test_startup.py:14: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 3 violations in test_startup.py
demo_negative_space_integration.py:24: no-cors-wildcard - NEVER use '*' in
production CORS origins
demo_negative_space_integration.py:15: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
demo_negative_space_integration.py:11: structured-logging - Use JSON structured
logs with consistent schema
demo_negative_space_integration.py:15: minimum-test-coverage - Maintain 80%
minimum code coverage
demo_negative_space_integration.py:124: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 5 violations in demo_negative_space_integration.py
import_patterns_unified.py:22: no-cors-wildcard - NEVER use '*' in production
CORS origins
import_patterns_unified.py:73: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
import_patterns_unified.py:70: minimum-test-coverage - Maintain 80% minimum code
coverage
import_patterns_unified.py:73: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 4 violations in import_patterns_unified.py
smart_scanner.py:42: no-cors-wildcard - NEVER use '*' in production CORS origins
smart_scanner.py:232: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
smart_scanner.py:68: use-db-context-managers - Always use context managers for
database sessions
smart_scanner.py:131: use-uv-package-manager - Use uv for speed and reliability
smart_scanner.py:25: structured-logging - Use JSON structured logs with
consistent schema
smart_scanner.py:232: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 6 violations in smart_scanner.py
negative_space_analyzer.py:94: no-cors-wildcard - NEVER use '*' in production
CORS origins
negative_space_analyzer.py:128: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
negative_space_analyzer.py:105: use-uv-package-manager - Use uv for speed and
reliability
negative_space_analyzer.py:42: structured-logging - Use JSON structured logs
with consistent schema
negative_space_analyzer.py:128: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 5 violations in negative_space_analyzer.py
test_sqlite_scanning.py:24: no-cors-wildcard - NEVER use '*' in production CORS
origins
test_sqlite_scanning.py:13: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
test_sqlite_scanning.py:126: sanitize-production-errors - Return generic error
messages in production
test_sqlite_scanning.py:13: minimum-test-coverage - Maintain 80% minimum code
coverage
test_sqlite_scanning.py:34: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 5 violations in test_sqlite_scanning.py
ai_query_interface.py:115: no-cors-wildcard - NEVER use '*' in production CORS
origins
ai_query_interface.py:135: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
ai_query_interface.py:137: use-uv-package-manager - Use uv for speed and
reliability
ai_query_interface.py:134: structured-logging - Use JSON structured logs with
consistent schema
ai_query_interface.py:134: sanitize-production-errors - Return generic error
messages in production
ai_query_interface.py:185: minimum-test-coverage - Maintain 80% minimum code
coverage
ai_query_interface.py:141: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 7 violations in ai_query_interface.py
enhanced_pattern_extractor.py:27: no-cors-wildcard - NEVER use '*' in production
CORS origins
enhanced_pattern_extractor.py:180: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
enhanced_pattern_extractor.py:242: use-uv-package-manager - Use uv for speed and
reliability
enhanced_pattern_extractor.py:74: structured-logging - Use JSON structured logs
with consistent schema
enhanced_pattern_extractor.py:70: sanitize-production-errors - Return generic
error messages in production
enhanced_pattern_extractor.py:54: minimum-test-coverage - Maintain 80% minimum
code coverage
enhanced_pattern_extractor.py:146: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 7 violations in enhanced_pattern_extractor.py
test_fts_direct.py:13: no-cors-wildcard - NEVER use '*' in production CORS
origins
test_fts_direct.py:12: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
test_fts_direct.py:102: use-uv-package-manager - Use uv for speed and
reliability
test_fts_direct.py:116: structured-logging - Use JSON structured logs with
consistent schema
test_fts_direct.py:116: sanitize-production-errors - Return generic error
messages in production
test_fts_direct.py:29: minimum-test-coverage - Maintain 80% minimum code
coverage
test_fts_direct.py:94: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 7 violations in test_fts_direct.py
demo_ai_workflow.py:57: no-cors-wildcard - NEVER use '*' in production CORS
origins
demo_ai_workflow.py:254: use-db-context-managers - Always use context managers
for database sessions
demo_ai_workflow.py:131: use-uv-package-manager - Use uv for speed and
reliability
demo_ai_workflow.py:97: structured-logging - Use JSON structured logs with
consistent schema
demo_ai_workflow.py:309: minimum-test-coverage - Maintain 80% minimum code
coverage
demo_ai_workflow.py:25: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 6 violations in demo_ai_workflow.py
detailed_violation_scanner.py:91: no-cors-wildcard - NEVER use '*' in production
CORS origins
detailed_violation_scanner.py:86: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
detailed_violation_scanner.py:92: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
  → Found 3 violations in detailed_violation_scanner.py
test.py:1: use-uv-package-manager - Use uv for speed and reliability
test.py:1: use-pydantic-validation - Use Pydantic for all API input validation
  → Found 2 violations in test.py
pattern_refiner.py:85: no-cors-wildcard - NEVER use '*' in production CORS
origins
pattern_refiner.py:43: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
pattern_refiner.py:386: use-db-context-managers - Always use context managers
for database sessions
pattern_refiner.py:140: structured-logging - Use JSON structured logs with
consistent schema
pattern_refiner.py:139: sanitize-production-errors - Return generic error
messages in production
pattern_refiner.py:226: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 6 violations in pattern_refiner.py
test_implementation.py:76: no-cors-wildcard - NEVER use '*' in production CORS
origins
test_implementation.py:14: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
test_implementation.py:43: use-uv-package-manager - Use uv for speed and
reliability
test_implementation.py:14: minimum-test-coverage - Maintain 80% minimum code
coverage
test_implementation.py:57: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 5 violations in test_implementation.py
evolution_tracker.py:111: no-cors-wildcard - NEVER use '*' in production CORS
origins
evolution_tracker.py:101: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
evolution_tracker.py:101: minimum-test-coverage - Maintain 80% minimum code
coverage
evolution_tracker.py:401: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 4 violations in evolution_tracker.py
test_violation.py:1: use-uv-package-manager - Use uv for speed and reliability
test_violation.py:1: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 2 violations in test_violation.py
import_patterns_to_sqlite.py:220: no-cors-wildcard - NEVER use '*' in production
CORS origins
import_patterns_to_sqlite.py:34: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
import_patterns_to_sqlite.py:70: use-db-context-managers - Always use context
managers for database sessions
import_patterns_to_sqlite.py:29: structured-logging - Use JSON structured logs
with consistent schema
import_patterns_to_sqlite.py:217: minimum-test-coverage - Maintain 80% minimum
code coverage
import_patterns_to_sqlite.py:30: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 6 violations in import_patterns_to_sqlite.py
demo_full_implementation.py:14: no-cors-wildcard - NEVER use '*' in production
CORS origins
demo_full_implementation.py:180: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
demo_full_implementation.py:132: use-uv-package-manager - Use uv for speed and
reliability
demo_full_implementation.py:181: structured-logging - Use JSON structured logs
with consistent schema
demo_full_implementation.py:163: sanitize-production-errors - Return generic
error messages in production
demo_full_implementation.py:345: minimum-test-coverage - Maintain 80% minimum
code coverage
demo_full_implementation.py:149: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 7 violations in demo_full_implementation.py
example.py:1: use-uv-package-manager - Use uv for speed and reliability
example.py:1: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 2 violations in example.py
test_file.py:1: use-uv-package-manager - Use uv for speed and reliability
test_file.py:1: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 2 violations in test_file.py
extract_comprehensive_patterns.py:50: no-cors-wildcard - NEVER use '*' in
production CORS origins
extract_comprehensive_patterns.py:32: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
extract_comprehensive_patterns.py:320: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
extract_comprehensive_patterns.py:121: use-db-context-managers - Always use
context managers for database sessions
extract_comprehensive_patterns.py:302: use-uv-package-manager - Use uv for speed
and reliability
extract_comprehensive_patterns.py:164: structured-logging - Use JSON structured
logs with consistent schema
extract_comprehensive_patterns.py:104: sanitize-production-errors - Return
generic error messages in production
extract_comprehensive_patterns.py:196: minimum-test-coverage - Maintain 80%
minimum code coverage
extract_comprehensive_patterns.py:84: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 9 violations in extract_comprehensive_patterns.py
mycode.py:1: use-uv-package-manager - Use uv for speed and reliability
mycode.py:1: use-pydantic-validation - Use Pydantic for all API input validation
  → Found 2 violations in mycode.py
comprehensive_fixer.py:85: no-cors-wildcard - NEVER use '*' in production CORS
origins
comprehensive_fixer.py:165: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
comprehensive_fixer.py:414: use-db-context-managers - Always use context
managers for database sessions
comprehensive_fixer.py:81: structured-logging - Use JSON structured logs with
consistent schema
  → Found 4 violations in comprehensive_fixer.py
update_patterns_from_project_init.py:31: no-cors-wildcard - NEVER use '*' in
production CORS origins
update_patterns_from_project_init.py:187: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
update_patterns_from_project_init.py:261: use-uv-package-manager - Use uv for
speed and reliability
update_patterns_from_project_init.py:130: structured-logging - Use JSON
structured logs with consistent schema
update_patterns_from_project_init.py:87: sanitize-production-errors - Return
generic error messages in production
update_patterns_from_project_init.py:324: minimum-test-coverage - Maintain 80%
minimum code coverage
update_patterns_from_project_init.py:132: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 7 violations in update_patterns_from_project_init.py
test_sqlite_core.py:323: no-cors-wildcard - NEVER use '*' in production CORS
origins
test_sqlite_core.py:3: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
test_sqlite_core.py:27: use-db-context-managers - Always use context managers
for database sessions
test_sqlite_core.py:204: structured-logging - Use JSON structured logs with
consistent schema
test_sqlite_core.py:517: sanitize-production-errors - Return generic error
messages in production
test_sqlite_core.py:479: minimum-test-coverage - Maintain 80% minimum code
coverage
test_sqlite_core.py:189: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 7 violations in test_sqlite_core.py
simple_fixer.py:158: no-cors-wildcard - NEVER use '*' in production CORS origins
simple_fixer.py:261: use-db-context-managers - Always use context managers for
database sessions
simple_fixer.py:185: structured-logging - Use JSON structured logs with
consistent schema
simple_fixer.py:141: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 4 violations in simple_fixer.py
test_cli_commands.py:12: no-cors-wildcard - NEVER use '*' in production CORS
origins
test_cli_commands.py:42: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
test_cli_commands.py:3: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 3 violations in test_cli_commands.py
broader_scope_scanner.py:77: no-cors-wildcard - NEVER use '*' in production CORS
origins
broader_scope_scanner.py:21: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
broader_scope_scanner.py:70: use-uv-package-manager - Use uv for speed and
reliability
broader_scope_scanner.py:21: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 4 violations in broader_scope_scanner.py
test_dogfooding.py:30: sanitize-production-errors - Return generic error
messages in production
test_dogfooding.py:11: minimum-test-coverage - Maintain 80% minimum code
coverage
test_dogfooding.py:8: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 3 violations in test_dogfooding.py
final_intelligent_scanner.py:28: no-cors-wildcard - NEVER use '*' in production
CORS origins
final_intelligent_scanner.py:61: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
final_intelligent_scanner.py:76: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
final_intelligent_scanner.py:55: structured-logging - Use JSON structured logs
with consistent schema
final_intelligent_scanner.py:118: sanitize-production-errors - Return generic
error messages in production
final_intelligent_scanner.py:213: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 6 violations in final_intelligent_scanner.py
systematic_quality_enforcer.py:137: no-cors-wildcard - NEVER use '*' in
production CORS origins
systematic_quality_enforcer.py:153: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
systematic_quality_enforcer.py:83: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
systematic_quality_enforcer.py:14: structured-logging - Use JSON structured logs
with consistent schema
systematic_quality_enforcer.py:288: minimum-test-coverage - Maintain 80% minimum
code coverage
systematic_quality_enforcer.py:51: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 6 violations in systematic_quality_enforcer.py
pattern_enhancement_analyzer.py:212: no-cors-wildcard - NEVER use '*' in
production CORS origins
pattern_enhancement_analyzer.py:243: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
pattern_enhancement_analyzer.py:85: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
pattern_enhancement_analyzer.py:96: use-uv-package-manager - Use uv for speed
and reliability
pattern_enhancement_analyzer.py:135: structured-logging - Use JSON structured
logs with consistent schema
pattern_enhancement_analyzer.py:126: minimum-test-coverage - Maintain 80%
minimum code coverage
pattern_enhancement_analyzer.py:146: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 7 violations in pattern_enhancement_analyzer.py
simple_scanner.py:96: no-cors-wildcard - NEVER use '*' in production CORS
origins
  → Found 1 violations in simple_scanner.py
enhanced_intelligent_scanner.py:365: no-cors-wildcard - NEVER use '*' in
production CORS origins
enhanced_intelligent_scanner.py:367: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
enhanced_intelligent_scanner.py:121: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
enhanced_intelligent_scanner.py:45: structured-logging - Use JSON structured
logs with consistent schema
enhanced_intelligent_scanner.py:97: minimum-test-coverage - Maintain 80% minimum
code coverage
enhanced_intelligent_scanner.py:24: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 6 violations in enhanced_intelligent_scanner.py
intelligent_scanner.py:66: no-cors-wildcard - NEVER use '*' in production CORS
origins
intelligent_scanner.py:61: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
intelligent_scanner.py:63: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
intelligent_scanner.py:276: structured-logging - Use JSON structured logs with
consistent schema
intelligent_scanner.py:196: sanitize-production-errors - Return generic error
messages in production
intelligent_scanner.py:296: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 6 violations in intelligent_scanner.py
violation_analyzer.py:29: no-cors-wildcard - NEVER use '*' in production CORS
origins
violation_analyzer.py:25: structured-logging - Use JSON structured logs with
consistent schema
violation_analyzer.py:87: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 3 violations in violation_analyzer.py
best_practices_scanner.py:139: no-cors-wildcard - NEVER use '*' in production
CORS origins
best_practices_scanner.py:167: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
best_practices_scanner.py:656: use-db-context-managers - Always use context
managers for database sessions
best_practices_scanner.py:614: use-uv-package-manager - Use uv for speed and
reliability
best_practices_scanner.py:111: structured-logging - Use JSON structured logs
with consistent schema
best_practices_scanner.py:111: sanitize-production-errors - Return generic error
messages in production
best_practices_scanner.py:300: minimum-test-coverage - Maintain 80% minimum code
coverage
best_practices_scanner.py:394: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 8 violations in best_practices_scanner.py
test_quick_mcp.py:12: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
test_quick_mcp.py:5: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 2 violations in test_quick_mcp.py
quality_enforcement_backup_20250819_200552/pattern_models.py:22:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/pattern_models.py:5:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/pattern_models.py:28:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/pattern_models.py:18:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 4 violations in
quality_enforcement_backup_20250819_200552/pattern_models.py
quality_enforcement_backup_20250819_200552/scanner.py:90: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/scanner.py:268: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/scanner.py:8: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/scanner.py:255:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/scanner.py:268: minimum-test-coverage
- Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/scanner.py:79:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in quality_enforcement_backup_20250819_200552/scanner.py
quality_enforcement_backup_20250819_200552/config.py:62: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/config.py:68: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/config.py:68: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 3 violations in quality_enforcement_backup_20250819_200552/config.py
quality_enforcement_backup_20250819_200552/models.py:26: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/models.py:33: minimum-test-coverage -
Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/models.py:4: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 3 violations in quality_enforcement_backup_20250819_200552/models.py
quality_enforcement_backup_20250819_200552/unified_database.py:280:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/unified_database.py:168:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/unified_database.py:8:
structured-logging - Use JSON structured logs with consistent schema
  → Found 3 violations in
quality_enforcement_backup_20250819_200552/unified_database.py
quality_enforcement_backup_20250819_200552/scan_rules.py:60: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/scan_rules.py:93: secure-jwt-storage
- Store JWT secrets in secure credential manager, never hardcode
quality_enforcement_backup_20250819_200552/scan_rules.py:25: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/scan_rules.py:114:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/scan_rules.py:165:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/scan_rules.py:262: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/scan_rules.py:25:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/scan_rules.py:292:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 8 violations in
quality_enforcement_backup_20250819_200552/scan_rules.py
quality_enforcement_backup_20250819_200552/database.py:8: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
  → Found 1 violations in quality_enforcement_backup_20250819_200552/database.py
quality_enforcement_backup_20250819_200552/client.py:83: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/client.py:36: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/client.py:248: use-uv-package-manager
- Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/client.py:13:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/client.py:36: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 5 violations in quality_enforcement_backup_20250819_200552/client.py
quality_enforcement_backup_20250819_200552/tools.py:83: no-cors-wildcard - NEVER
use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/tools.py:340: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/tools.py:83:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/tools.py:118: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 4 violations in quality_enforcement_backup_20250819_200552/tools.py
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:28:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:509:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:146:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:59:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py:509:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_200552/ai_sqlite_query.py
quality_enforcement_backup_20250819_200552/pattern_cli.py:60: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/pattern_cli.py:620: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/pattern_cli.py:9: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/pattern_cli.py:57:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/pattern_cli.py:620:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/pattern_cli.py:66:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in
quality_enforcement_backup_20250819_200552/pattern_cli.py
quality_enforcement_backup_20250819_200552/__init__.py:10:
sanitize-production-errors - Return generic error messages in production
  → Found 1 violations in quality_enforcement_backup_20250819_200552/__init__.py
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:218:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:344:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:35:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:461:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:477:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:487:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/sqlite_scanner.py:327:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in
quality_enforcement_backup_20250819_200552/sqlite_scanner.py
quality_enforcement_backup_20250819_200552/project_config.py:29:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/project_config.py:188:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/project_config.py:10:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/project_config.py:188:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_200552/project_config.py
quality_enforcement_backup_20250819_200552/scan_cli.py:281: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/scan_cli.py:293: secure-jwt-storage -
Store JWT secrets in secure credential manager, never hardcode
quality_enforcement_backup_20250819_200552/scan_cli.py:111:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/scan_cli.py:13: structured-logging -
Use JSON structured logs with consistent schema
  → Found 4 violations in quality_enforcement_backup_20250819_200552/scan_cli.py
quality_enforcement_backup_20250819_200552/fts_database_OLD.py:31:
no-cors-wildcard - NEVER use '*' in production CORS origins
  → Found 1 violations in
quality_enforcement_backup_20250819_200552/fts_database_OLD.py
quality_enforcement_backup_20250819_200552/fts_database.py:9: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
  → Found 1 violations in
quality_enforcement_backup_20250819_200552/fts_database.py
quality_enforcement_backup_20250819_200552/ai_query.py:155: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/ai_query.py:255: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/ai_query.py:130:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/ai_query.py:141: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/ai_query.py:141:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/ai_query.py:255:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/ai_query.py:261:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in quality_enforcement_backup_20250819_200552/ai_query.py
quality_enforcement_backup_20250819_200552/scan_registry.py:107:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/scan_registry.py:44:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_200552/scan_registry.py:154:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/scan_registry.py:258:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/scan_registry.py:154:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_200552/scan_registry.py
quality_enforcement_backup_20250819_200552/cli.py:251: no-cors-wildcard - NEVER
use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/cli.py:1609: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/cli.py:1721: use-db-context-managers
- Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/cli.py:361: use-uv-package-manager -
Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/cli.py:35: structured-logging - Use
JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/cli.py:1863: minimum-test-coverage -
Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/cli.py:1041: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 7 violations in quality_enforcement_backup_20250819_200552/cli.py
quality_enforcement_backup_20250819_200552/database_OLD.py:102: no-cors-wildcard
- NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/database_OLD.py:13:
use-db-context-managers - Always use context managers for database sessions
  → Found 2 violations in
quality_enforcement_backup_20250819_200552/database_OLD.py
quality_enforcement_backup_20250819_200552/portable_tools.py:97:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/portable_tools.py:97:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/portable_tools.py:291:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/portable_tools.py:212:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/portable_tools.py:93:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/portable_tools.py:97:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/portable_tools.py:229:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in
quality_enforcement_backup_20250819_200552/portable_tools.py
quality_enforcement_backup_20250819_200552/settings.py:68: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/settings.py:67: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/settings.py:67: minimum-test-coverage
- Maintain 80% minimum code coverage
  → Found 3 violations in quality_enforcement_backup_20250819_200552/settings.py
quality_enforcement_backup_20250819_200552/pattern_importer.py:153:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/pattern_importer.py:39:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/pattern_importer.py:7:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/pattern_importer.py:154:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/pattern_importer.py:150:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 5 violations in
quality_enforcement_backup_20250819_200552/pattern_importer.py
quality_enforcement_backup_20250819_200552/exceptions.py:2:
sanitize-production-errors - Return generic error messages in production
  → Found 1 violations in
quality_enforcement_backup_20250819_200552/exceptions.py
quality_enforcement_backup_20250819_200552/gitignore_handler.py:24:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/gitignore_handler.py:26:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/gitignore_handler.py:27:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/gitignore_handler.py:31:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/gitignore_handler.py:26:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_200552/gitignore_handler.py
quality_enforcement_backup_20250819_200552/pattern_extractor.py:48:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/pattern_extractor.py:41:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/pattern_extractor.py:153:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/pattern_extractor.py:48:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_200552/pattern_extractor.py
quality_enforcement_backup_20250819_200552/scan_manager.py:220: no-cors-wildcard
- NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/scan_manager.py:28:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_200552/scan_manager.py:79: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/scan_manager.py:89:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/scan_manager.py:220:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/scan_manager.py:40:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 6 violations in
quality_enforcement_backup_20250819_200552/scan_manager.py
quality_enforcement_backup_20250819_200552/rules_cli.py:92: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/rules_cli.py:98: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/rules_cli.py:8: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/rules_cli.py:98:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/rules_cli.py:116:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 5 violations in
quality_enforcement_backup_20250819_200552/rules_cli.py
quality_enforcement_backup_20250819_200552/uv_check.py:216: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/uv_check.py:38: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/uv_check.py:126:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/uv_check.py:12: structured-logging -
Use JSON structured logs with consistent schema
  → Found 4 violations in quality_enforcement_backup_20250819_200552/uv_check.py
quality_enforcement_backup_20250819_200552/mcp_server.py:255: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/mcp_server.py:108: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/mcp_server.py:48: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/mcp_server.py:9:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/mcp_server.py:108:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/mcp_server.py:160:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in
quality_enforcement_backup_20250819_200552/mcp_server.py
demo_repository/server.py:10: no-cors-wildcard - NEVER use '*' in production
CORS origins
demo_repository/server.py:2: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 2 violations in demo_repository/server.py
demo_repository/client.py:2: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 1 violations in demo_repository/client.py
demo_repository/utils.py:7: structured-logging - Use JSON structured logs with
consistent schema
demo_repository/utils.py:19: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 2 violations in demo_repository/utils.py
codex/pattern_models.py:22: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/pattern_models.py:5: structured-logging - Use JSON structured logs with
consistent schema
codex/pattern_models.py:28: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/pattern_models.py:18: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 4 violations in codex/pattern_models.py
codex/safe_fixer.py:36: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/safe_fixer.py:317: use-db-context-managers - Always use context managers
for database sessions
codex/safe_fixer.py:531: use-uv-package-manager - Use uv for speed and
reliability
codex/safe_fixer.py:13: structured-logging - Use JSON structured logs with
consistent schema
codex/safe_fixer.py:212: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/safe_fixer.py:5: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 6 violations in codex/safe_fixer.py
codex/fix_audit_trail.py:402: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/fix_audit_trail.py:652: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/fix_audit_trail.py:45: use-db-context-managers - Always use context
managers for database sessions
codex/fix_audit_trail.py:654: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/fix_audit_trail.py:35: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 5 violations in codex/fix_audit_trail.py
codex/scanner.py:611: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scanner.py:606: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/scanner.py:380: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/scanner.py:9: structured-logging - Use JSON structured logs with
consistent schema
codex/scanner.py:367: sanitize-production-errors - Return generic error messages
in production
codex/scanner.py:380: minimum-test-coverage - Maintain 80% minimum code coverage
codex/scanner.py:170: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 7 violations in codex/scanner.py
codex/config.py:62: no-cors-wildcard - NEVER use '*' in production CORS origins
codex/config.py:68: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/config.py:68: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 3 violations in codex/config.py
codex/models.py:26: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/models.py:37: structured-logging - Use JSON structured logs with
consistent schema
codex/models.py:33: minimum-test-coverage - Maintain 80% minimum code coverage
codex/models.py:4: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 4 violations in codex/models.py
codex/fix_validation_rules.py:15: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/fix_validation_rules.py:207: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
codex/fix_validation_rules.py:35: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
codex/fix_validation_rules.py:208: use-uv-package-manager - Use uv for speed and
reliability
codex/fix_validation_rules.py:139: structured-logging - Use JSON structured logs
with consistent schema
codex/fix_validation_rules.py:206: minimum-test-coverage - Maintain 80% minimum
code coverage
codex/fix_validation_rules.py:208: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 7 violations in codex/fix_validation_rules.py
codex/negative_space_patterns.py:81: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex/negative_space_patterns.py:104: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
codex/negative_space_patterns.py:126: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
codex/negative_space_patterns.py:446: use-uv-package-manager - Use uv for speed
and reliability
codex/negative_space_patterns.py:462: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 5 violations in codex/negative_space_patterns.py
codex/unified_database.py:280: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/unified_database.py:168: use-db-context-managers - Always use context
managers for database sessions
codex/unified_database.py:8: structured-logging - Use JSON structured logs with
consistent schema
  → Found 3 violations in codex/unified_database.py
codex/scan_rules.py:60: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_rules.py:93: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/scan_rules.py:25: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/scan_rules.py:114: use-db-context-managers - Always use context managers
for database sessions
codex/scan_rules.py:165: use-uv-package-manager - Use uv for speed and
reliability
codex/scan_rules.py:262: structured-logging - Use JSON structured logs with
consistent schema
codex/scan_rules.py:25: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/scan_rules.py:292: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 8 violations in codex/scan_rules.py
codex/scan_discovery.py:51: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_discovery.py:109: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/scan_discovery.py:76: structured-logging - Use JSON structured logs with
consistent schema
codex/scan_discovery.py:109: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/scan_discovery.py:123: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 5 violations in codex/scan_discovery.py
codex/database.py:8: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
  → Found 1 violations in codex/database.py
codex/client.py:83: no-cors-wildcard - NEVER use '*' in production CORS origins
codex/client.py:36: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/client.py:248: use-uv-package-manager - Use uv for speed and reliability
codex/client.py:13: sanitize-production-errors - Return generic error messages
in production
codex/client.py:36: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in codex/client.py
codex/tools.py:84: no-cors-wildcard - NEVER use '*' in production CORS origins
codex/tools.py:9: structured-logging - Use JSON structured logs with consistent
schema
codex/tools.py:84: sanitize-production-errors - Return generic error messages in
production
codex/tools.py:119: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 4 violations in codex/tools.py
codex/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/ai_sqlite_query.py:509: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/ai_sqlite_query.py:146: use-db-context-managers - Always use context
managers for database sessions
codex/ai_sqlite_query.py:59: structured-logging - Use JSON structured logs with
consistent schema
codex/ai_sqlite_query.py:509: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in codex/ai_sqlite_query.py
codex/pattern_cli.py:60: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/pattern_cli.py:620: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/pattern_cli.py:9: structured-logging - Use JSON structured logs with
consistent schema
codex/pattern_cli.py:57: sanitize-production-errors - Return generic error
messages in production
codex/pattern_cli.py:620: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/pattern_cli.py:66: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 6 violations in codex/pattern_cli.py
codex/__init__.py:10: sanitize-production-errors - Return generic error messages
in production
  → Found 1 violations in codex/__init__.py
codex/sqlite_scanner.py:218: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/sqlite_scanner.py:344: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/sqlite_scanner.py:35: use-db-context-managers - Always use context
managers for database sessions
codex/sqlite_scanner.py:461: structured-logging - Use JSON structured logs with
consistent schema
codex/sqlite_scanner.py:477: sanitize-production-errors - Return generic error
messages in production
codex/sqlite_scanner.py:487: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/sqlite_scanner.py:327: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 7 violations in codex/sqlite_scanner.py
codex/project_config.py:29: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/project_config.py:188: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/project_config.py:10: structured-logging - Use JSON structured logs with
consistent schema
codex/project_config.py:188: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 4 violations in codex/project_config.py
codex/scan_cli.py:281: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_cli.py:293: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/scan_cli.py:111: use-db-context-managers - Always use context managers for
database sessions
codex/scan_cli.py:13: structured-logging - Use JSON structured logs with
consistent schema
  → Found 4 violations in codex/scan_cli.py
codex/fts_database_OLD.py:31: no-cors-wildcard - NEVER use '*' in production
CORS origins
  → Found 1 violations in codex/fts_database_OLD.py
codex/fts_database.py:9: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
  → Found 1 violations in codex/fts_database.py
codex/fix_orchestrator.py:218: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/fix_orchestrator.py:499: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/fix_orchestrator.py:653: use-db-context-managers - Always use context
managers for database sessions
codex/fix_orchestrator.py:726: use-uv-package-manager - Use uv for speed and
reliability
codex/fix_orchestrator.py:65: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/fix_orchestrator.py:726: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 6 violations in codex/fix_orchestrator.py
codex/fix_context_analyzer.py:489: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex/fix_context_analyzer.py:300: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
codex/fix_context_analyzer.py:306: use-uv-package-manager - Use uv for speed and
reliability
codex/fix_context_analyzer.py:371: structured-logging - Use JSON structured logs
with consistent schema
codex/fix_context_analyzer.py:22: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 5 violations in codex/fix_context_analyzer.py
codex/ai_query.py:155: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/ai_query.py:255: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/ai_query.py:130: use-uv-package-manager - Use uv for speed and reliability
codex/ai_query.py:141: structured-logging - Use JSON structured logs with
consistent schema
codex/ai_query.py:141: sanitize-production-errors - Return generic error
messages in production
codex/ai_query.py:255: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/ai_query.py:261: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 7 violations in codex/ai_query.py
codex/scan_registry.py:107: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_registry.py:44: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/scan_registry.py:154: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/scan_registry.py:258: structured-logging - Use JSON structured logs with
consistent schema
codex/scan_registry.py:154: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in codex/scan_registry.py
codex/cli.py:363: no-cors-wildcard - NEVER use '*' in production CORS origins
codex/cli.py:353: mock-code-naming - Mock functions must start with mock_ prefix
and log warnings
codex/cli.py:343: use-db-context-managers - Always use context managers for
database sessions
codex/cli.py:716: use-uv-package-manager - Use uv for speed and reliability
codex/cli.py:36: structured-logging - Use JSON structured logs with consistent
schema
codex/cli.py:147: minimum-test-coverage - Maintain 80% minimum code coverage
codex/cli.py:243: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 7 violations in codex/cli.py
codex/database_OLD.py:102: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/database_OLD.py:13: use-db-context-managers - Always use context managers
for database sessions
  → Found 2 violations in codex/database_OLD.py
codex/scan_context.py:535: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_context.py:530: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/scan_context.py:98: structured-logging - Use JSON structured logs with
consistent schema
codex/scan_context.py:191: sanitize-production-errors - Return generic error
messages in production
codex/scan_context.py:530: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in codex/scan_context.py
codex/portable_tools.py:97: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/portable_tools.py:97: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/portable_tools.py:291: use-uv-package-manager - Use uv for speed and
reliability
codex/portable_tools.py:212: structured-logging - Use JSON structured logs with
consistent schema
codex/portable_tools.py:93: sanitize-production-errors - Return generic error
messages in production
codex/portable_tools.py:97: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/portable_tools.py:229: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 7 violations in codex/portable_tools.py
codex/settings.py:68: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/settings.py:67: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/settings.py:67: minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 3 violations in codex/settings.py
codex/pattern_importer.py:153: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/pattern_importer.py:39: use-uv-package-manager - Use uv for speed and
reliability
codex/pattern_importer.py:7: sanitize-production-errors - Return generic error
messages in production
codex/pattern_importer.py:154: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/pattern_importer.py:150: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 5 violations in codex/pattern_importer.py
codex/exceptions.py:2: sanitize-production-errors - Return generic error
messages in production
  → Found 1 violations in codex/exceptions.py
codex/gitignore_handler.py:24: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/gitignore_handler.py:26: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/gitignore_handler.py:27: use-uv-package-manager - Use uv for speed and
reliability
codex/gitignore_handler.py:31: sanitize-production-errors - Return generic error
messages in production
codex/gitignore_handler.py:26: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in codex/gitignore_handler.py
codex/pattern_extractor.py:48: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/pattern_extractor.py:41: use-uv-package-manager - Use uv for speed and
reliability
codex/pattern_extractor.py:153: sanitize-production-errors - Return generic
error messages in production
codex/pattern_extractor.py:48: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 4 violations in codex/pattern_extractor.py
codex/scan_manager.py:220: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/scan_manager.py:28: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/scan_manager.py:79: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/scan_manager.py:89: use-db-context-managers - Always use context managers
for database sessions
codex/scan_manager.py:220: sanitize-production-errors - Return generic error
messages in production
codex/scan_manager.py:40: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 6 violations in codex/scan_manager.py
codex/rules_cli.py:92: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/rules_cli.py:98: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/rules_cli.py:8: structured-logging - Use JSON structured logs with
consistent schema
codex/rules_cli.py:98: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/rules_cli.py:116: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 5 violations in codex/rules_cli.py
codex/violation_reporter.py:325: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/violation_reporter.py:336: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
codex/violation_reporter.py:46: structured-logging - Use JSON structured logs
with consistent schema
codex/violation_reporter.py:107: sanitize-production-errors - Return generic
error messages in production
codex/violation_reporter.py:340: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 5 violations in codex/violation_reporter.py
codex/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/uv_check.py:38: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/uv_check.py:126: use-uv-package-manager - Use uv for speed and reliability
codex/uv_check.py:12: structured-logging - Use JSON structured logs with
consistent schema
  → Found 4 violations in codex/uv_check.py
codex/mcp_server.py:255: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/mcp_server.py:108: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/mcp_server.py:48: structured-logging - Use JSON structured logs with
consistent schema
codex/mcp_server.py:9: sanitize-production-errors - Return generic error
messages in production
codex/mcp_server.py:108: minimum-test-coverage - Maintain 80% minimum code
coverage
codex/mcp_server.py:160: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 6 violations in codex/mcp_server.py
codex/batch_fixer.py:88: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/batch_fixer.py:23: mock-code-naming - Mock functions must start with mock_
prefix and log warnings
codex/batch_fixer.py:117: use-uv-package-manager - Use uv for speed and
reliability
codex/batch_fixer.py:10: structured-logging - Use JSON structured logs with
consistent schema
codex/batch_fixer.py:82: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in codex/batch_fixer.py
codex/interactive_fixer.py:71: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/interactive_fixer.py:596: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
codex/interactive_fixer.py:76: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/interactive_fixer.py:90: use-db-context-managers - Always use context
managers for database sessions
codex/interactive_fixer.py:402: use-uv-package-manager - Use uv for speed and
reliability
codex/interactive_fixer.py:11: structured-logging - Use JSON structured logs
with consistent schema
codex/interactive_fixer.py:521: sanitize-production-errors - Return generic
error messages in production
codex/interactive_fixer.py:211: minimum-test-coverage - Maintain 80% minimum
code coverage
codex/interactive_fixer.py:78: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 9 violations in codex/interactive_fixer.py
tests/test_safe_fixing.py:263: no-cors-wildcard - NEVER use '*' in production
CORS origins
tests/test_safe_fixing.py:183: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
tests/test_safe_fixing.py:12: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
tests/test_safe_fixing.py:209: use-uv-package-manager - Use uv for speed and
reliability
tests/test_safe_fixing.py:309: structured-logging - Use JSON structured logs
with consistent schema
tests/test_safe_fixing.py:333: sanitize-production-errors - Return generic error
messages in production
tests/test_safe_fixing.py:56: minimum-test-coverage - Maintain 80% minimum code
coverage
tests/test_safe_fixing.py:209: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 8 violations in tests/test_safe_fixing.py
tests/test_mcp_protocol.py:35: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
tests/test_mcp_protocol.py:14: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
tests/test_mcp_protocol.py:101: structured-logging - Use JSON structured logs
with consistent schema
tests/test_mcp_protocol.py:207: sanitize-production-errors - Return generic
error messages in production
tests/test_mcp_protocol.py:34: minimum-test-coverage - Maintain 80% minimum code
coverage
tests/test_mcp_protocol.py:272: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 6 violations in tests/test_mcp_protocol.py
fixers/__init__.py:10: secure-jwt-storage - Store JWT secrets in secure
credential manager, never hardcode
fixers/__init__.py:9: structured-logging - Use JSON structured logs with
consistent schema
  → Found 2 violations in fixers/__init__.py
fixers/external_tools_fixer.py:13: structured-logging - Use JSON structured logs
with consistent schema
  → Found 1 violations in fixers/external_tools_fixer.py
fixers/print_to_logging_fixer.py:60: no-cors-wildcard - NEVER use '*' in
production CORS origins
fixers/print_to_logging_fixer.py:13: structured-logging - Use JSON structured
logs with consistent schema
  → Found 2 violations in fixers/print_to_logging_fixer.py
fixers/import_consolidation_fixer.py💯 no-cors-wildcard - NEVER use '*' in
production CORS origins
fixers/import_consolidation_fixer.py:12: structured-logging - Use JSON
structured logs with consistent schema
  → Found 2 violations in fixers/import_consolidation_fixer.py
fixers/fixer_orchestrator.py:17: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
fixers/fixer_orchestrator.py:181: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
fixers/fixer_orchestrator.py:80: use-db-context-managers - Always use context
managers for database sessions
fixers/fixer_orchestrator.py:20: structured-logging - Use JSON structured logs
with consistent schema
fixers/fixer_orchestrator.py:175: sanitize-production-errors - Return generic
error messages in production
fixers/fixer_orchestrator.py:181: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 6 violations in fixers/fixer_orchestrator.py
fixers/hardcoded_paths_fixer.py:137: no-cors-wildcard - NEVER use '*' in
production CORS origins
fixers/hardcoded_paths_fixer.py:3: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
fixers/hardcoded_paths_fixer.py:13: structured-logging - Use JSON structured
logs with consistent schema
  → Found 3 violations in fixers/hardcoded_paths_fixer.py
fixers/remaining_issues_fixer.py:119: no-cors-wildcard - NEVER use '*' in
production CORS origins
fixers/remaining_issues_fixer.py:13: structured-logging - Use JSON structured
logs with consistent schema
  → Found 2 violations in fixers/remaining_issues_fixer.py
codex_backup_20250819_185515/pattern_models.py:22: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/pattern_models.py:10: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/pattern_models.py:28: minimum-test-coverage -
Maintain 80% minimum code coverage
codex_backup_20250819_185515/pattern_models.py:18: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 4 violations in codex_backup_20250819_185515/pattern_models.py
codex_backup_20250819_185515/scanner.py:90: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/scanner.py:268: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/scanner.py:16: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/scanner.py:255: sanitize-production-errors - Return
generic error messages in production
codex_backup_20250819_185515/scanner.py:268: minimum-test-coverage - Maintain
80% minimum code coverage
codex_backup_20250819_185515/scanner.py:79: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 6 violations in codex_backup_20250819_185515/scanner.py
codex_backup_20250819_185515/config.py:62: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/config.py:68: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/config.py:68: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 3 violations in codex_backup_20250819_185515/config.py
codex_backup_20250819_185515/models.py:26: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/models.py:33: minimum-test-coverage - Maintain 80%
minimum code coverage
codex_backup_20250819_185515/models.py:4: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 3 violations in codex_backup_20250819_185515/models.py
codex_backup_20250819_185515/unified_database.py:280: no-cors-wildcard - NEVER
use '*' in production CORS origins
codex_backup_20250819_185515/unified_database.py:168: use-db-context-managers -
Always use context managers for database sessions
codex_backup_20250819_185515/unified_database.py:16: structured-logging - Use
JSON structured logs with consistent schema
  → Found 3 violations in codex_backup_20250819_185515/unified_database.py
codex_backup_20250819_185515/scan_rules.py:60: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/scan_rules.py:93: secure-jwt-storage - Store JWT
secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/scan_rules.py:25: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/scan_rules.py:114: use-db-context-managers - Always
use context managers for database sessions
codex_backup_20250819_185515/scan_rules.py:165: use-uv-package-manager - Use uv
for speed and reliability
codex_backup_20250819_185515/scan_rules.py:262: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/scan_rules.py:25: minimum-test-coverage - Maintain
80% minimum code coverage
codex_backup_20250819_185515/scan_rules.py:292: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 8 violations in codex_backup_20250819_185515/scan_rules.py
codex_backup_20250819_185515/database.py:8: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
  → Found 1 violations in codex_backup_20250819_185515/database.py
codex_backup_20250819_185515/client.py:83: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/client.py:36: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/client.py:248: use-uv-package-manager - Use uv for
speed and reliability
codex_backup_20250819_185515/client.py:13: sanitize-production-errors - Return
generic error messages in production
codex_backup_20250819_185515/client.py:36: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 5 violations in codex_backup_20250819_185515/client.py
codex_backup_20250819_185515/tools.py:84: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/tools.py:16: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/tools.py:84: sanitize-production-errors - Return
generic error messages in production
codex_backup_20250819_185515/tools.py:119: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 4 violations in codex_backup_20250819_185515/tools.py
codex_backup_20250819_185515/ai_sqlite_query.py:28: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/ai_sqlite_query.py:509: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/ai_sqlite_query.py:146: use-db-context-managers -
Always use context managers for database sessions
codex_backup_20250819_185515/ai_sqlite_query.py:59: structured-logging - Use
JSON structured logs with consistent schema
codex_backup_20250819_185515/ai_sqlite_query.py:509: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 5 violations in codex_backup_20250819_185515/ai_sqlite_query.py
codex_backup_20250819_185515/pattern_cli.py:60: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/pattern_cli.py:620: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/pattern_cli.py:19: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/pattern_cli.py:57: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/pattern_cli.py:620: minimum-test-coverage -
Maintain 80% minimum code coverage
codex_backup_20250819_185515/pattern_cli.py:66: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 6 violations in codex_backup_20250819_185515/pattern_cli.py
codex_backup_20250819_185515/__init__.py:10: sanitize-production-errors - Return
generic error messages in production
  → Found 1 violations in codex_backup_20250819_185515/__init__.py
codex_backup_20250819_185515/sqlite_scanner.py:218: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/sqlite_scanner.py:344: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/sqlite_scanner.py:35: use-db-context-managers -
Always use context managers for database sessions
codex_backup_20250819_185515/sqlite_scanner.py:461: structured-logging - Use
JSON structured logs with consistent schema
codex_backup_20250819_185515/sqlite_scanner.py:477: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/sqlite_scanner.py:487: minimum-test-coverage -
Maintain 80% minimum code coverage
codex_backup_20250819_185515/sqlite_scanner.py:327: use-pydantic-validation -
Use Pydantic for all API input validation
  → Found 7 violations in codex_backup_20250819_185515/sqlite_scanner.py
codex_backup_20250819_185515/project_config.py:29: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/project_config.py:188: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/project_config.py:17: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/project_config.py:188: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 4 violations in codex_backup_20250819_185515/project_config.py
codex_backup_20250819_185515/scan_cli.py:281: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/scan_cli.py:293: secure-jwt-storage - Store JWT
secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/scan_cli.py:111: use-db-context-managers - Always
use context managers for database sessions
codex_backup_20250819_185515/scan_cli.py:23: structured-logging - Use JSON
structured logs with consistent schema
  → Found 4 violations in codex_backup_20250819_185515/scan_cli.py
codex_backup_20250819_185515/fts_database_OLD.py:30: no-cors-wildcard - NEVER
use '*' in production CORS origins
  → Found 1 violations in codex_backup_20250819_185515/fts_database_OLD.py
codex_backup_20250819_185515/fts_database.py:9: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
  → Found 1 violations in codex_backup_20250819_185515/fts_database.py
codex_backup_20250819_185515/ai_query.py:155: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/ai_query.py:255: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/ai_query.py:130: use-uv-package-manager - Use uv
for speed and reliability
codex_backup_20250819_185515/ai_query.py:141: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/ai_query.py:141: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/ai_query.py:255: minimum-test-coverage - Maintain
80% minimum code coverage
codex_backup_20250819_185515/ai_query.py:261: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 7 violations in codex_backup_20250819_185515/ai_query.py
codex_backup_20250819_185515/scan_registry.py:107: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/scan_registry.py:44: secure-jwt-storage - Store JWT
secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/scan_registry.py:154: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/scan_registry.py:258: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/scan_registry.py:154: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 5 violations in codex_backup_20250819_185515/scan_registry.py
codex_backup_20250819_185515/cli.py:252: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/cli.py:1610: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
codex_backup_20250819_185515/cli.py:1722: use-db-context-managers - Always use
context managers for database sessions
codex_backup_20250819_185515/cli.py:362: use-uv-package-manager - Use uv for
speed and reliability
codex_backup_20250819_185515/cli.py:48: structured-logging - Use JSON structured
logs with consistent schema
codex_backup_20250819_185515/cli.py:1864: minimum-test-coverage - Maintain 80%
minimum code coverage
codex_backup_20250819_185515/cli.py:1042: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 7 violations in codex_backup_20250819_185515/cli.py
codex_backup_20250819_185515/database_OLD.py:102: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/database_OLD.py:13: use-db-context-managers -
Always use context managers for database sessions
  → Found 2 violations in codex_backup_20250819_185515/database_OLD.py
codex_backup_20250819_185515/portable_tools.py:98: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/portable_tools.py:98: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/portable_tools.py:292: use-uv-package-manager - Use
uv for speed and reliability
codex_backup_20250819_185515/portable_tools.py:20: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/portable_tools.py:94: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/portable_tools.py:98: minimum-test-coverage -
Maintain 80% minimum code coverage
codex_backup_20250819_185515/portable_tools.py:230: use-pydantic-validation -
Use Pydantic for all API input validation
  → Found 7 violations in codex_backup_20250819_185515/portable_tools.py
codex_backup_20250819_185515/settings.py:68: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex_backup_20250819_185515/settings.py:67: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/settings.py:67: minimum-test-coverage - Maintain
80% minimum code coverage
  → Found 3 violations in codex_backup_20250819_185515/settings.py
codex_backup_20250819_185515/pattern_importer.py:154: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/pattern_importer.py:40: use-uv-package-manager -
Use uv for speed and reliability
codex_backup_20250819_185515/pattern_importer.py:7: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/pattern_importer.py:155: minimum-test-coverage -
Maintain 80% minimum code coverage
codex_backup_20250819_185515/pattern_importer.py:151: use-pydantic-validation -
Use Pydantic for all API input validation
  → Found 5 violations in codex_backup_20250819_185515/pattern_importer.py
codex_backup_20250819_185515/exceptions.py:2: sanitize-production-errors -
Return generic error messages in production
  → Found 1 violations in codex_backup_20250819_185515/exceptions.py
codex_backup_20250819_185515/gitignore_handler.py:23: no-cors-wildcard - NEVER
use '*' in production CORS origins
codex_backup_20250819_185515/gitignore_handler.py:25: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/gitignore_handler.py:26: use-uv-package-manager -
Use uv for speed and reliability
codex_backup_20250819_185515/gitignore_handler.py:30: sanitize-production-errors
- Return generic error messages in production
codex_backup_20250819_185515/gitignore_handler.py:25: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 5 violations in codex_backup_20250819_185515/gitignore_handler.py
codex_backup_20250819_185515/pattern_extractor.py:49: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/pattern_extractor.py:42: use-uv-package-manager -
Use uv for speed and reliability
codex_backup_20250819_185515/pattern_extractor.py:154:
sanitize-production-errors - Return generic error messages in production
codex_backup_20250819_185515/pattern_extractor.py:49: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 4 violations in codex_backup_20250819_185515/pattern_extractor.py
codex_backup_20250819_185515/scan_manager.py:220: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/scan_manager.py:28: secure-jwt-storage - Store JWT
secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/scan_manager.py:79: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/scan_manager.py:89: use-db-context-managers -
Always use context managers for database sessions
codex_backup_20250819_185515/scan_manager.py:220: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/scan_manager.py:40: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 6 violations in codex_backup_20250819_185515/scan_manager.py
codex_backup_20250819_185515/rules_cli.py:92: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/rules_cli.py:98: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/rules_cli.py:23: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/rules_cli.py:98: minimum-test-coverage - Maintain
80% minimum code coverage
codex_backup_20250819_185515/rules_cli.py:116: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 5 violations in codex_backup_20250819_185515/rules_cli.py
codex_backup_20250819_185515/uv_check.py:216: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/uv_check.py:38: mock-code-naming - Mock functions
must start with mock_ prefix and log warnings
codex_backup_20250819_185515/uv_check.py:126: use-uv-package-manager - Use uv
for speed and reliability
codex_backup_20250819_185515/uv_check.py:15: structured-logging - Use JSON
structured logs with consistent schema
  → Found 4 violations in codex_backup_20250819_185515/uv_check.py
codex_backup_20250819_185515/mcp_server.py:255: no-cors-wildcard - NEVER use '*'
in production CORS origins
codex_backup_20250819_185515/mcp_server.py:108: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/mcp_server.py:48: structured-logging - Use JSON
structured logs with consistent schema
codex_backup_20250819_185515/mcp_server.py:9: sanitize-production-errors -
Return generic error messages in production
codex_backup_20250819_185515/mcp_server.py:108: minimum-test-coverage - Maintain
80% minimum code coverage
codex_backup_20250819_185515/mcp_server.py:160: use-pydantic-validation - Use
Pydantic for all API input validation
  → Found 6 violations in codex_backup_20250819_185515/mcp_server.py
quality_enforcement_backup_20250819_194047/pattern_models.py:22:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/pattern_models.py:5:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/pattern_models.py:28:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/pattern_models.py:18:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 4 violations in
quality_enforcement_backup_20250819_194047/pattern_models.py
quality_enforcement_backup_20250819_194047/scanner.py:90: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/scanner.py:268: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/scanner.py:8: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/scanner.py:255:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/scanner.py:268: minimum-test-coverage
- Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/scanner.py:79:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in quality_enforcement_backup_20250819_194047/scanner.py
quality_enforcement_backup_20250819_194047/config.py:62: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/config.py:68: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/config.py:68: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 3 violations in quality_enforcement_backup_20250819_194047/config.py
quality_enforcement_backup_20250819_194047/models.py:26: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/models.py:33: minimum-test-coverage -
Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/models.py:4: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 3 violations in quality_enforcement_backup_20250819_194047/models.py
quality_enforcement_backup_20250819_194047/unified_database.py:280:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/unified_database.py:168:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/unified_database.py:8:
structured-logging - Use JSON structured logs with consistent schema
  → Found 3 violations in
quality_enforcement_backup_20250819_194047/unified_database.py
quality_enforcement_backup_20250819_194047/scan_rules.py:60: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/scan_rules.py:93: secure-jwt-storage
- Store JWT secrets in secure credential manager, never hardcode
quality_enforcement_backup_20250819_194047/scan_rules.py:25: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/scan_rules.py:114:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/scan_rules.py:165:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/scan_rules.py:262: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/scan_rules.py:25:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/scan_rules.py:292:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 8 violations in
quality_enforcement_backup_20250819_194047/scan_rules.py
quality_enforcement_backup_20250819_194047/database.py:8: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
  → Found 1 violations in quality_enforcement_backup_20250819_194047/database.py
quality_enforcement_backup_20250819_194047/client.py:83: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/client.py:36: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/client.py:248: use-uv-package-manager
- Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/client.py:13:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/client.py:36: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 5 violations in quality_enforcement_backup_20250819_194047/client.py
quality_enforcement_backup_20250819_194047/tools.py:83: no-cors-wildcard - NEVER
use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/tools.py:340: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/tools.py:83:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/tools.py:118: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 4 violations in quality_enforcement_backup_20250819_194047/tools.py
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:28:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:509:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:146:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:59:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py:509:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_194047/ai_sqlite_query.py
quality_enforcement_backup_20250819_194047/pattern_cli.py:60: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/pattern_cli.py:620: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/pattern_cli.py:9: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/pattern_cli.py:57:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/pattern_cli.py:620:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/pattern_cli.py:66:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in
quality_enforcement_backup_20250819_194047/pattern_cli.py
quality_enforcement_backup_20250819_194047/__init__.py:10:
sanitize-production-errors - Return generic error messages in production
  → Found 1 violations in quality_enforcement_backup_20250819_194047/__init__.py
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:218:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:344:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:35:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:461:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:477:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:487:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/sqlite_scanner.py:327:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in
quality_enforcement_backup_20250819_194047/sqlite_scanner.py
quality_enforcement_backup_20250819_194047/project_config.py:29:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/project_config.py:188:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/project_config.py:10:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/project_config.py:188:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_194047/project_config.py
quality_enforcement_backup_20250819_194047/scan_cli.py:281: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/scan_cli.py:293: secure-jwt-storage -
Store JWT secrets in secure credential manager, never hardcode
quality_enforcement_backup_20250819_194047/scan_cli.py:111:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/scan_cli.py:13: structured-logging -
Use JSON structured logs with consistent schema
  → Found 4 violations in quality_enforcement_backup_20250819_194047/scan_cli.py
quality_enforcement_backup_20250819_194047/fts_database_OLD.py:31:
no-cors-wildcard - NEVER use '*' in production CORS origins
  → Found 1 violations in
quality_enforcement_backup_20250819_194047/fts_database_OLD.py
quality_enforcement_backup_20250819_194047/fts_database.py:9: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
  → Found 1 violations in
quality_enforcement_backup_20250819_194047/fts_database.py
quality_enforcement_backup_20250819_194047/ai_query.py:155: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/ai_query.py:255: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/ai_query.py:130:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/ai_query.py:141: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/ai_query.py:141:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/ai_query.py:255:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/ai_query.py:261:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in quality_enforcement_backup_20250819_194047/ai_query.py
quality_enforcement_backup_20250819_194047/scan_registry.py:107:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/scan_registry.py:44:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_194047/scan_registry.py:154:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/scan_registry.py:258:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/scan_registry.py:154:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_194047/scan_registry.py
quality_enforcement_backup_20250819_194047/cli.py:251: no-cors-wildcard - NEVER
use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/cli.py:1609: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/cli.py:1721: use-db-context-managers
- Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/cli.py:361: use-uv-package-manager -
Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/cli.py:35: structured-logging - Use
JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/cli.py:1863: minimum-test-coverage -
Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/cli.py:1041: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 7 violations in quality_enforcement_backup_20250819_194047/cli.py
quality_enforcement_backup_20250819_194047/database_OLD.py:102: no-cors-wildcard
- NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/database_OLD.py:13:
use-db-context-managers - Always use context managers for database sessions
  → Found 2 violations in
quality_enforcement_backup_20250819_194047/database_OLD.py
quality_enforcement_backup_20250819_194047/portable_tools.py:97:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/portable_tools.py:97:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/portable_tools.py:291:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/portable_tools.py:212:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/portable_tools.py:93:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/portable_tools.py:97:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/portable_tools.py:229:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 7 violations in
quality_enforcement_backup_20250819_194047/portable_tools.py
quality_enforcement_backup_20250819_194047/settings.py:68: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/settings.py:67: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/settings.py:67: minimum-test-coverage
- Maintain 80% minimum code coverage
  → Found 3 violations in quality_enforcement_backup_20250819_194047/settings.py
quality_enforcement_backup_20250819_194047/pattern_importer.py:153:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/pattern_importer.py:39:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/pattern_importer.py:7:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/pattern_importer.py:154:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/pattern_importer.py:150:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 5 violations in
quality_enforcement_backup_20250819_194047/pattern_importer.py
quality_enforcement_backup_20250819_194047/exceptions.py:2:
sanitize-production-errors - Return generic error messages in production
  → Found 1 violations in
quality_enforcement_backup_20250819_194047/exceptions.py
quality_enforcement_backup_20250819_194047/gitignore_handler.py:23:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/gitignore_handler.py:25:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/gitignore_handler.py:26:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/gitignore_handler.py:30:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/gitignore_handler.py:25:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 5 violations in
quality_enforcement_backup_20250819_194047/gitignore_handler.py
quality_enforcement_backup_20250819_194047/pattern_extractor.py:48:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/pattern_extractor.py:41:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/pattern_extractor.py:153:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/pattern_extractor.py:48:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_194047/pattern_extractor.py
quality_enforcement_backup_20250819_194047/scan_manager.py:220: no-cors-wildcard
- NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/scan_manager.py:28:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_194047/scan_manager.py:79: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/scan_manager.py:89:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/scan_manager.py:220:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/scan_manager.py:40:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 6 violations in
quality_enforcement_backup_20250819_194047/scan_manager.py
quality_enforcement_backup_20250819_194047/rules_cli.py:92: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/rules_cli.py:98: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/rules_cli.py:8: structured-logging -
Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/rules_cli.py:98:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/rules_cli.py:116:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 5 violations in
quality_enforcement_backup_20250819_194047/rules_cli.py
quality_enforcement_backup_20250819_194047/uv_check.py:216: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/uv_check.py:38: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/uv_check.py:126:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/uv_check.py:12: structured-logging -
Use JSON structured logs with consistent schema
  → Found 4 violations in quality_enforcement_backup_20250819_194047/uv_check.py
quality_enforcement_backup_20250819_194047/mcp_server.py:255: no-cors-wildcard -
NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/mcp_server.py:108: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/mcp_server.py:48: structured-logging
- Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/mcp_server.py:9:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/mcp_server.py:108:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/mcp_server.py:160:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 6 violations in
quality_enforcement_backup_20250819_194047/mcp_server.py
src/main.py:1: use-uv-package-manager - Use uv for speed and reliability
src/main.py:1: use-pydantic-validation - Use Pydantic for all API input
validation
  → Found 2 violations in src/main.py
quality_enforcement_backup_20250819_200552/rules/settings_rules.py:89:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/rules/settings_rules.py:63:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_200552/rules/settings_rules.py:38:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/rules/settings_rules.py:30:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 4 violations in
quality_enforcement_backup_20250819_200552/rules/settings_rules.py
quality_enforcement_backup_20250819_200552/rules/registry.py:129:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/rules/registry.py:21:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
  → Found 2 violations in
quality_enforcement_backup_20250819_200552/rules/registry.py
quality_enforcement_backup_20250819_200552/rules/categories.py:45:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/rules/categories.py:60:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 2 violations in
quality_enforcement_backup_20250819_200552/rules/categories.py
quality_enforcement_backup_20250819_200552/rules/database_rules.py:191:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/rules/database_rules.py:34:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_200552/rules/database_rules.py:40:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/rules/database_rules.py:123:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_200552/rules/database_rules.py
quality_enforcement_backup_20250819_200552/rules/loader.py:24: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/rules/loader.py:24:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 2 violations in
quality_enforcement_backup_20250819_200552/rules/loader.py
quality_enforcement_backup_20250819_200552/data/default_patterns.py:23:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_200552/data/default_patterns.py:107:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_200552/data/default_patterns.py:144:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_200552/data/default_patterns.py:39:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_200552/data/default_patterns.py:193:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_200552/data/default_patterns.py:82:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_200552/data/default_patterns.py:148:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_200552/data/default_patterns.py:51:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 8 violations in
quality_enforcement_backup_20250819_200552/data/default_patterns.py
codex/rules/settings_rules.py:89: no-cors-wildcard - NEVER use '*' in production
CORS origins
codex/rules/settings_rules.py:63: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
codex/rules/settings_rules.py:38: sanitize-production-errors - Return generic
error messages in production
codex/rules/settings_rules.py:30: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 4 violations in codex/rules/settings_rules.py
codex/rules/registry.py:129: no-cors-wildcard - NEVER use '*' in production CORS
origins
codex/rules/registry.py:21: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
  → Found 2 violations in codex/rules/registry.py
codex/rules/categories.py:45: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/rules/categories.py:60: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 2 violations in codex/rules/categories.py
codex/rules/database_rules.py:191: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex/rules/database_rules.py:34: use-db-context-managers - Always use context
managers for database sessions
codex/rules/database_rules.py:40: sanitize-production-errors - Return generic
error messages in production
codex/rules/database_rules.py:123: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 4 violations in codex/rules/database_rules.py
codex/rules/loader.py:24: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
codex/rules/loader.py:24: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 2 violations in codex/rules/loader.py
codex/data/default_patterns.py:23: no-cors-wildcard - NEVER use '*' in
production CORS origins
codex/data/default_patterns.py:107: secure-jwt-storage - Store JWT secrets in
secure credential manager, never hardcode
codex/data/default_patterns.py:144: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
codex/data/default_patterns.py:39: use-uv-package-manager - Use uv for speed and
reliability
codex/data/default_patterns.py:193: structured-logging - Use JSON structured
logs with consistent schema
codex/data/default_patterns.py:82: sanitize-production-errors - Return generic
error messages in production
codex/data/default_patterns.py:148: minimum-test-coverage - Maintain 80% minimum
code coverage
codex/data/default_patterns.py:51: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 8 violations in codex/data/default_patterns.py
codex_backup_20250819_185515/rules/settings_rules.py:89: no-cors-wildcard -
NEVER use '*' in production CORS origins
codex_backup_20250819_185515/rules/settings_rules.py:63: secure-jwt-storage -
Store JWT secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/rules/settings_rules.py:38:
sanitize-production-errors - Return generic error messages in production
codex_backup_20250819_185515/rules/settings_rules.py:30: use-pydantic-validation
- Use Pydantic for all API input validation
  → Found 4 violations in codex_backup_20250819_185515/rules/settings_rules.py
codex_backup_20250819_185515/rules/registry.py:129: no-cors-wildcard - NEVER use
'*' in production CORS origins
codex_backup_20250819_185515/rules/registry.py:21: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
  → Found 2 violations in codex_backup_20250819_185515/rules/registry.py
codex_backup_20250819_185515/rules/categories.py:45: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/rules/categories.py:60: use-pydantic-validation -
Use Pydantic for all API input validation
  → Found 2 violations in codex_backup_20250819_185515/rules/categories.py
codex_backup_20250819_185515/rules/database_rules.py:191: no-cors-wildcard -
NEVER use '*' in production CORS origins
codex_backup_20250819_185515/rules/database_rules.py:34: use-db-context-managers
- Always use context managers for database sessions
codex_backup_20250819_185515/rules/database_rules.py:40:
sanitize-production-errors - Return generic error messages in production
codex_backup_20250819_185515/rules/database_rules.py:123: minimum-test-coverage
- Maintain 80% minimum code coverage
  → Found 4 violations in codex_backup_20250819_185515/rules/database_rules.py
codex_backup_20250819_185515/rules/loader.py:24: mock-code-naming - Mock
functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/rules/loader.py:24: minimum-test-coverage -
Maintain 80% minimum code coverage
  → Found 2 violations in codex_backup_20250819_185515/rules/loader.py
codex_backup_20250819_185515/data/default_patterns.py:23: no-cors-wildcard -
NEVER use '*' in production CORS origins
codex_backup_20250819_185515/data/default_patterns.py:107: secure-jwt-storage -
Store JWT secrets in secure credential manager, never hardcode
codex_backup_20250819_185515/data/default_patterns.py:144: mock-code-naming -
Mock functions must start with mock_ prefix and log warnings
codex_backup_20250819_185515/data/default_patterns.py:39: use-uv-package-manager
- Use uv for speed and reliability
codex_backup_20250819_185515/data/default_patterns.py:193: structured-logging -
Use JSON structured logs with consistent schema
codex_backup_20250819_185515/data/default_patterns.py:82:
sanitize-production-errors - Return generic error messages in production
codex_backup_20250819_185515/data/default_patterns.py:148: minimum-test-coverage
- Maintain 80% minimum code coverage
codex_backup_20250819_185515/data/default_patterns.py:51:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 8 violations in codex_backup_20250819_185515/data/default_patterns.py
quality_enforcement_backup_20250819_194047/rules/settings_rules.py:89:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/rules/settings_rules.py:63:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_194047/rules/settings_rules.py:38:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/rules/settings_rules.py:30:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 4 violations in
quality_enforcement_backup_20250819_194047/rules/settings_rules.py
quality_enforcement_backup_20250819_194047/rules/registry.py:129:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/rules/registry.py:21:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
  → Found 2 violations in
quality_enforcement_backup_20250819_194047/rules/registry.py
quality_enforcement_backup_20250819_194047/rules/categories.py:45:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/rules/categories.py:60:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 2 violations in
quality_enforcement_backup_20250819_194047/rules/categories.py
quality_enforcement_backup_20250819_194047/rules/database_rules.py:191:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/rules/database_rules.py:34:
use-db-context-managers - Always use context managers for database sessions
quality_enforcement_backup_20250819_194047/rules/database_rules.py:40:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/rules/database_rules.py:123:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 4 violations in
quality_enforcement_backup_20250819_194047/rules/database_rules.py
quality_enforcement_backup_20250819_194047/rules/loader.py:24: mock-code-naming
- Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/rules/loader.py:24:
minimum-test-coverage - Maintain 80% minimum code coverage
  → Found 2 violations in
quality_enforcement_backup_20250819_194047/rules/loader.py
quality_enforcement_backup_20250819_194047/data/default_patterns.py:23:
no-cors-wildcard - NEVER use '*' in production CORS origins
quality_enforcement_backup_20250819_194047/data/default_patterns.py:107:
secure-jwt-storage - Store JWT secrets in secure credential manager, never
hardcode
quality_enforcement_backup_20250819_194047/data/default_patterns.py:144:
mock-code-naming - Mock functions must start with mock_ prefix and log warnings
quality_enforcement_backup_20250819_194047/data/default_patterns.py:39:
use-uv-package-manager - Use uv for speed and reliability
quality_enforcement_backup_20250819_194047/data/default_patterns.py:193:
structured-logging - Use JSON structured logs with consistent schema
quality_enforcement_backup_20250819_194047/data/default_patterns.py:82:
sanitize-production-errors - Return generic error messages in production
quality_enforcement_backup_20250819_194047/data/default_patterns.py:148:
minimum-test-coverage - Maintain 80% minimum code coverage
quality_enforcement_backup_20250819_194047/data/default_patterns.py:51:
use-pydantic-validation - Use Pydantic for all API input validation
  → Found 8 violations in
quality_enforcement_backup_20250819_194047/data/default_patterns.py
build/lib/codex/pattern_models.py:20: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/pattern_models.py:15: structured-logging - Use JSON structured
logs with consistent schema
build/lib/codex/pattern_models.py:26: minimum-test-coverage - Maintain 80%
minimum code coverage
build/lib/codex/pattern_models.py:16: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 4 violations in build/lib/codex/pattern_models.py
build/lib/codex/scanner.py:89: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/scanner.py:224: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/scanner.py:224: minimum-test-coverage - Maintain 80% minimum
code coverage
build/lib/codex/scanner.py:78: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 4 violations in build/lib/codex/scanner.py
build/lib/codex/config.py:62: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/config.py:68: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
build/lib/codex/config.py:68: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 3 violations in build/lib/codex/config.py
build/lib/codex/models.py:25: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
build/lib/codex/models.py:32: minimum-test-coverage - Maintain 80% minimum code
coverage
build/lib/codex/models.py:4: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 3 violations in build/lib/codex/models.py
build/lib/codex/unified_database.py:280: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/unified_database.py:168: use-db-context-managers - Always use
context managers for database sessions
  → Found 2 violations in build/lib/codex/unified_database.py
build/lib/codex/database.py:101: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/database.py:13: use-db-context-managers - Always use context
managers for database sessions
  → Found 2 violations in build/lib/codex/database.py
build/lib/codex/client.py:87: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/client.py:40: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
build/lib/codex/client.py:252: use-uv-package-manager - Use uv for speed and
reliability
build/lib/codex/client.py:16: sanitize-production-errors - Return generic error
messages in production
build/lib/codex/client.py:40: minimum-test-coverage - Maintain 80% minimum code
coverage
  → Found 5 violations in build/lib/codex/client.py
build/lib/codex/tools.py:76: no-cors-wildcard - NEVER use '*' in production CORS
origins
build/lib/codex/tools.py:76: sanitize-production-errors - Return generic error
messages in production
build/lib/codex/tools.py:109: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 3 violations in build/lib/codex/tools.py
build/lib/codex/ai_sqlite_query.py:29: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/ai_sqlite_query.py:510: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/ai_sqlite_query.py:147: use-db-context-managers - Always use
context managers for database sessions
build/lib/codex/ai_sqlite_query.py:60: structured-logging - Use JSON structured
logs with consistent schema
build/lib/codex/ai_sqlite_query.py:510: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 5 violations in build/lib/codex/ai_sqlite_query.py
build/lib/codex/pattern_cli.py:62: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/pattern_cli.py:622: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/pattern_cli.py:622: structured-logging - Use JSON structured
logs with consistent schema
build/lib/codex/pattern_cli.py:59: sanitize-production-errors - Return generic
error messages in production
build/lib/codex/pattern_cli.py:622: minimum-test-coverage - Maintain 80% minimum
code coverage
build/lib/codex/pattern_cli.py:68: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 6 violations in build/lib/codex/pattern_cli.py
build/lib/codex/__init__.py:11: sanitize-production-errors - Return generic
error messages in production
  → Found 1 violations in build/lib/codex/__init__.py
build/lib/codex/sqlite_scanner.py:221: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/sqlite_scanner.py:347: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/sqlite_scanner.py:38: use-db-context-managers - Always use
context managers for database sessions
build/lib/codex/sqlite_scanner.py:464: structured-logging - Use JSON structured
logs with consistent schema
build/lib/codex/sqlite_scanner.py:480: sanitize-production-errors - Return
generic error messages in production
build/lib/codex/sqlite_scanner.py:490: minimum-test-coverage - Maintain 80%
minimum code coverage
build/lib/codex/sqlite_scanner.py:330: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 7 violations in build/lib/codex/sqlite_scanner.py
build/lib/codex/project_config.py:28: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/project_config.py:187: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/project_config.py:187: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 3 violations in build/lib/codex/project_config.py
build/lib/codex/fts_database.py:32: no-cors-wildcard - NEVER use '*' in
production CORS origins
  → Found 1 violations in build/lib/codex/fts_database.py
build/lib/codex/ai_query.py:156: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/ai_query.py:256: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/ai_query.py:131: use-uv-package-manager - Use uv for speed and
reliability
build/lib/codex/ai_query.py:142: structured-logging - Use JSON structured logs
with consistent schema
build/lib/codex/ai_query.py:142: sanitize-production-errors - Return generic
error messages in production
build/lib/codex/ai_query.py:256: minimum-test-coverage - Maintain 80% minimum
code coverage
build/lib/codex/ai_query.py:262: use-pydantic-validation - Use Pydantic for all
API input validation
  → Found 7 violations in build/lib/codex/ai_query.py
build/lib/codex/cli.py:232: no-cors-wildcard - NEVER use '*' in production CORS
origins
build/lib/codex/cli.py:1588: mock-code-naming - Mock functions must start with
mock_ prefix and log warnings
build/lib/codex/cli.py:1699: use-db-context-managers - Always use context
managers for database sessions
build/lib/codex/cli.py:342: use-uv-package-manager - Use uv for speed and
reliability
build/lib/codex/cli.py:1466: structured-logging - Use JSON structured logs with
consistent schema
build/lib/codex/cli.py:36: sanitize-production-errors - Return generic error
messages in production
build/lib/codex/cli.py:1841: minimum-test-coverage - Maintain 80% minimum code
coverage
build/lib/codex/cli.py:1020: use-pydantic-validation - Use Pydantic for all API
input validation
  → Found 8 violations in build/lib/codex/cli.py
build/lib/codex/portable_tools.py:101: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/portable_tools.py:101: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/portable_tools.py:295: use-uv-package-manager - Use uv for speed
and reliability
build/lib/codex/portable_tools.py:97: sanitize-production-errors - Return
generic error messages in production
build/lib/codex/portable_tools.py:101: minimum-test-coverage - Maintain 80%
minimum code coverage
build/lib/codex/portable_tools.py:233: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 6 violations in build/lib/codex/portable_tools.py
build/lib/codex/settings.py:68: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/settings.py:67: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/settings.py:67: minimum-test-coverage - Maintain 80% minimum
code coverage
  → Found 3 violations in build/lib/codex/settings.py
build/lib/codex/pattern_importer.py:153: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/pattern_importer.py:39: use-uv-package-manager - Use uv for
speed and reliability
build/lib/codex/pattern_importer.py:8: sanitize-production-errors - Return
generic error messages in production
build/lib/codex/pattern_importer.py:154: minimum-test-coverage - Maintain 80%
minimum code coverage
build/lib/codex/pattern_importer.py:150: use-pydantic-validation - Use Pydantic
for all API input validation
  → Found 5 violations in build/lib/codex/pattern_importer.py
build/lib/codex/exceptions.py:2: sanitize-production-errors - Return generic
error messages in production
  → Found 1 violations in build/lib/codex/exceptions.py
build/lib/codex/gitignore_handler.py:23: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/gitignore_handler.py:25: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/gitignore_handler.py:26: use-uv-package-manager - Use uv for
speed and reliability
build/lib/codex/gitignore_handler.py:30: sanitize-production-errors - Return
generic error messages in production
build/lib/codex/gitignore_handler.py:25: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 5 violations in build/lib/codex/gitignore_handler.py
build/lib/codex/pattern_extractor.py:49: mock-code-naming - Mock functions must
start with mock_ prefix and log warnings
build/lib/codex/pattern_extractor.py:42: use-uv-package-manager - Use uv for
speed and reliability
build/lib/codex/pattern_extractor.py:154: sanitize-production-errors - Return
generic error messages in production
build/lib/codex/pattern_extractor.py:49: minimum-test-coverage - Maintain 80%
minimum code coverage
  → Found 4 violations in build/lib/codex/pattern_extractor.py
build/lib/codex/uv_check.py:216: no-cors-wildcard - NEVER use '*' in production
CORS origins
build/lib/codex/uv_check.py:38: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/uv_check.py:126: use-uv-package-manager - Use uv for speed and
reliability
  → Found 3 violations in build/lib/codex/uv_check.py
build/lib/codex/mcp_server.py:257: no-cors-wildcard - NEVER use '*' in
production CORS origins
build/lib/codex/mcp_server.py:110: mock-code-naming - Mock functions must start
with mock_ prefix and log warnings
build/lib/codex/mcp_server.py:50: structured-logging - Use JSON structured logs
with consistent schema
build/lib/codex/mcp_server.py:10: sanitize-production-errors - Return generic
error messages in production
build/lib/codex/mcp_server.py:110: minimum-test-coverage - Maintain 80% minimum
code coverage
build/lib/codex/mcp_server.py:162: use-pydantic-validation - Use Pydantic for
all API input validation
  → Found 6 violations in build/lib/codex/mcp_server.py
{
  "scan_summary": {
    "total_violations": 1017,
    "files_scanned": 248,
    "exit_code": 1,
    "scan_duration_ms": 1434.2250000000001
  },
  "violations": [
    {
      "file_path": "experiment_fts.py",
      "line_number": 259,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(\"test*\", \"Find testing patterns with wildcard\"),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "experiment_fts.py",
      "line_number": 190,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'rationale': 'Required for testability',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "experiment_fts.py",
      "line_number": 89,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'name': 'use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "experiment_fts.py",
      "line_number": 258,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "(\"logging.exception\", \"Find logging exception patterns\"),",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "experiment_fts.py",
      "line_number": 258,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "(\"logging.exception\", \"Find logging exception patterns\"),",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "experiment_fts.py",
      "line_number": 190,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'rationale': 'Required for testability',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 369,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "new_line = re.sub(r'print\\s*\\(', f\"{strategy['method']}(\", original_line)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 211,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "'action': 'replace_hardcoded_path',",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 112,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if 'test' in path_str or 'test' in content:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 102,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'has_logging': any('logging' in line for line in lines[:30])",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 143,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "return \"Print statement in test context - likely debug output\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_fixer.py",
      "line_number": 112,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "if 'test' in path_str or 'test' in content:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_startup.py",
      "line_number": 17,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\"*60)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_startup.py",
      "line_number": 14,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "def test_startup_files():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_startup.py",
      "line_number": 14,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "def test_startup_files():",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "demo_negative_space_integration.py",
      "line_number": 24,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 60, file=sys.stderr)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "demo_negative_space_integration.py",
      "line_number": 15,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "from unittest.mock import patch",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "demo_negative_space_integration.py",
      "line_number": 11,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "demo_negative_space_integration.py",
      "line_number": 15,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "from unittest.mock import patch",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "demo_negative_space_integration.py",
      "line_number": 124,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Error is expected due to validation issues, but check MCP compliance",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_unified.py",
      "line_number": 22,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_unified.py",
      "line_number": 73,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_queries = [\"naming\", \"error\", \"validation\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_unified.py",
      "line_number": 70,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Test search functionality",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_unified.py",
      "line_number": 73,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "test_queries = [\"naming\", \"error\", \"validation\"]",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 42,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'cors-wildcard-refined': {",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 232,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "Today I tested my refined patterns against the same codebase.",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 68,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "r'session\\s*=.*Session\\(\\)',",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 131,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Check context requirements if specified",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 25,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'structured-logging-refined': {",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "smart_scanner.py",
      "line_number": 232,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Today I tested my refined patterns against the same codebase.",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "negative_space_analyzer.py",
      "line_number": 94,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'files_count': len(list(project_dir.rglob('*.py'))),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "negative_space_analyzer.py",
      "line_number": 128,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'has_tests': (project_dir / 'tests').exists() or bool(list(project_dir.rglob('test_*.py'))),",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "negative_space_analyzer.py",
      "line_number": 105,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "indicators = ['pyproject.toml', 'setup.py', 'requirements.txt']",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "negative_space_analyzer.py",
      "line_number": 42,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "negative_space_analyzer.py",
      "line_number": 128,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'has_tests': (project_dir / 'tests').exists() or bool(list(project_dir.rglob('test_*.py'))),",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_scanning.py",
      "line_number": 24,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 50)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_scanning.py",
      "line_number": 13,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add codex to path for testing",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_scanning.py",
      "line_number": 126,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_scanning.py",
      "line_number": 13,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Add codex to path for testing",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_scanning.py",
      "line_number": 34,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "import requests",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 115,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "output += f\"- **Rule**: {row['description']}\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 135,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'testing': 'test pytest coverage mock',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 137,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'package management': 'uv pip poetry package install',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 134,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'error handling': 'exception error logging try catch',",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 134,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'error handling': 'exception error logging try catch',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 185,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "print(\"\\n1. AI Query: 'About to implement HTTP client functionality'\")",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "ai_query_interface.py",
      "line_number": 141,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 27,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"detect\": r\"class\\s+(\\w*Heimdall\\w+)|class\\s+(\\w*Circle\\w+)|class\\s+(\\w*Hermes\\w+)\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 180,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Pattern: Proper test naming",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 242,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"name\": \"use-uv-not-pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 74,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"good_example\": \"except ValueError as e:\\n    logger.error('Invalid value', error=e)\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 70,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Always catch specific exception types\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 54,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Use functional names, not implementation specifics\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_pattern_extractor.py",
      "line_number": 146,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good_example\": \"logger.info('user_login', user_id=123, ip=request.ip)\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 13,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "def __init__(self, name, category, priority, description, **kwargs):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 12,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Simple pattern for testing.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 102,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name=\"use-uv-not-pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 116,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "description=\"Redundant exception object in logging.exception call\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 116,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "description=\"Redundant exception object in logging.exception call\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 29,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Test FTS database functionality directly.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_fts_direct.py",
      "line_number": 94,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "description=\"Use httpx instead of requests for async HTTP\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 57,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "query = f\"SELECT * FROM users WHERE id = {user_id}\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 254,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "(\"\ud83e\udd1d Collaborative Workflow\", \"Perfect for AI-assisted pair programming and code review sessions\"),",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 131,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Create a requirements file",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 97,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 309,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Main demonstration function.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ai_workflow.py",
      "line_number": 25,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "import requests",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "detailed_violation_scanner.py",
      "line_number": 91,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(f\"   - Fix CORS wildcard configurations\")",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "detailed_violation_scanner.py",
      "line_number": 86,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "print(f\"   - Review hardcoded secrets and security vulnerabilities\")",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "detailed_violation_scanner.py",
      "line_number": 92,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "print(f\"   - Ensure mock code naming compliance\")",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "test.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 85,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "self.analyze_cors_wildcard_pattern(analysis)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 43,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "latest_metadata = json.loads(rows[0][0])",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 386,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "# Record the refinement session",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 140,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "r'logger\\.(debug|info|warning|error|critical)\\s*\\([^)]*\\)',   # Logger calls",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 139,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "r'logging\\.(debug|info|warning|error|critical)\\s*\\([^)]*\\)',  # Actual logging calls",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_refiner.py",
      "line_number": 226,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "return 'function_args'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_implementation.py",
      "line_number": 76,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"\\n\" + \"=\"*60)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_implementation.py",
      "line_number": 14,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "def test_import_and_query():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_implementation.py",
      "line_number": 43,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"use uv not pip\"",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "test_implementation.py",
      "line_number": 14,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "def test_import_and_query():",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_implementation.py",
      "line_number": 57,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "result = ai_query.semantic_search(\"I want to make HTTP requests\")",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "evolution_tracker.py",
      "line_number": 111,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "SELECT COUNT(*) FROM codex_conversations",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "evolution_tracker.py",
      "line_number": 101,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Get latest cycle",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "evolution_tracker.py",
      "line_number": 101,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Get latest cycle",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "evolution_tracker.py",
      "line_number": 401,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "3. Begin cross-project pattern validation",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_violation.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "test_violation.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 220,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 34,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"testing\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 70,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "async with db.get_session() as session:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 29,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"logging\": PatternCategory.DOCUMENTATION,",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 217,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Main import function.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "import_patterns_to_sqlite.py",
      "line_number": 30,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 14,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "def __init__(self, name, category, priority, description, **kwargs):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 180,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "rationale=\"Required for testability and clean architecture - allows easy mocking and testing\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 132,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name=\"use-uv-not-pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 181,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "example_good=\"def __init__(self, database: Database, logger: Logger):\\n    self.db = database\\n    self.logger = logger\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 163,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "description=\"Redundant exception object in logging.exception call\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 345,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "demo_full_implementation.py",
      "line_number": 149,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "description=\"Use httpx instead of requests for async HTTP client\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "example.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "example.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_file.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "test_file.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 50,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if cors_config := security_section.get(\"cors_configuration\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 32,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"regex\": r\"(jwt_secret|JWT_SECRET)\\s*=\\s*['\\\"][^'\\\"]+['\\\"]\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 320,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "def extract_mock_code_patterns(mock_section: Dict[str, Any]) -> List[Dict[str, Any]]:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 121,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Always use context managers for database sessions\",",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 302,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"regex\": r\"pip install|pip freeze|requirements\\.txt\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 164,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"regex\": r\"logger\\.(info|debug|warning|error)\\([^{]\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 104,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"exception\", \"traceback\", \"debug\"],",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 196,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"function\", \"typing\", \"return type\"],",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "extract_comprehensive_patterns.py",
      "line_number": 84,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"fastapi\", \"request\", \"validation\"],",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "mycode.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "mycode.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "comprehensive_fixer.py",
      "line_number": 85,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in self.codex_dir.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "comprehensive_fixer.py",
      "line_number": 165,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "def fix_hardcoded_paths(self) -> List[Dict]:",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "comprehensive_fixer.py",
      "line_number": 414,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "This comprehensive fixing session demonstrates Codex's ability to:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "comprehensive_fixer.py",
      "line_number": 81,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Replace all print statements with proper logging.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 31,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"detect\": r\"class\\s+(\\w*Package\\w+)|(\\w+_package\\w+\\.py)\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 187,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"name\": \"test-file-naming\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 261,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Prefer uv over pip for faster, more reliable dependency management\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 130,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"fix\": \"Replace with logger.info() or appropriate log level\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 87,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Pattern: Specific exception handling",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 324,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Main function to extract and convert patterns.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "update_patterns_from_project_init.py",
      "line_number": 132,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good_example\": \"logger.info('Processing request', user_id=user_id)\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 323,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 3,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "Simplified test for SQLite-first approach core concepts.",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 27,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "# Create scan sessions table",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 204,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"category\": \"logging\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 517,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 479,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Main test function.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_sqlite_core.py",
      "line_number": 189,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"pattern_name\": \"use-httpx-not-requests\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "simple_fixer.py",
      "line_number": 158,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in self.codex_dir.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "simple_fixer.py",
      "line_number": 261,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Record the fixing session as a conversation.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "simple_fixer.py",
      "line_number": 185,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "# Replace obvious print statements with logger calls",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "simple_fixer.py",
      "line_number": 141,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'use-pydantic-validation': self.fix_pydantic_imports,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_cli_commands.py",
      "line_number": 12,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(f\"\\n{'='*60}\")",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "test_cli_commands.py",
      "line_number": 42,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "def test_cli_commands():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_cli_commands.py",
      "line_number": 3,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Test CLI commands for the new FTS functionality.",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "broader_scope_scanner.py",
      "line_number": 77,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(directory.glob('*.py'))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "broader_scope_scanner.py",
      "line_number": 21,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Scan multiple projects to test pattern effectiveness.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "broader_scope_scanner.py",
      "line_number": 70,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'requirements.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "broader_scope_scanner.py",
      "line_number": 21,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Scan multiple projects to test pattern effectiveness.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_dogfooding.py",
      "line_number": 30,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "except Exception:  # Bad: broad exception",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "test_dogfooding.py",
      "line_number": 11,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "def bad_function():",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "test_dogfooding.py",
      "line_number": 8,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "import requests  # Should trigger: use-httpx-not-requests",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in self.codex_dir.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 61,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "# Look for actual hardcoded paths that should use settings",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 76,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'is_test_file': 'test' in path_str or any('import pytest' in line for line in lines[:20]),",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 55,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "# Look for actual print statements that should be logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 118,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Test files may use print for debugging",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "final_intelligent_scanner.py",
      "line_number": 213,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\u2705 All wildcard usage is legitimate (globs, imports, function args)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 137,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'cors_wildcards_fixed': 0,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 153,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "result = self._secure_hardcoded_secret(fix_plan)",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 83,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'mock_code_compliance': self._enforce_mock_compliance(scan_results),",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 14,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 288,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'functions_renamed': 0,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "systematic_quality_enforcer.py",
      "line_number": 51,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "validation_results = self._validate_improvements()",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 212,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'name': 'cors_never_wildcard',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 243,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "r'(?:api_key|auth_token|jwt_secret)\\s*=\\s*[\"\\'][^\"\\']+[\"\\']',",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 85,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "def analyze_mock_code_patterns(self) -> List[Dict[str, Any]]:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 96,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'description': 'Enforce strict mock code naming requirements',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 135,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "r'logger\\.warning.*\u26a0\ufe0f\\s*MOCK'",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 126,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'description': 'Ensure all mock functions log warnings',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "pattern_enhancement_analyzer.py",
      "line_number": 146,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"\"\"Extract architectural separation validation patterns.\"\"\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "simple_scanner.py",
      "line_number": 96,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in directory.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 365,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "elif pattern == 'cors_never_wildcard':",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 367,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "elif pattern == 'hardcoded_secrets':",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 121,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "elif any(pattern in path_str for pattern in ['mock', 'fake', 'stub', 'dummy']):",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 45,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 97,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'has_tests': 'test' in str(file_path).lower(),",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "enhanced_intelligent_scanner.py",
      "line_number": 24,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "- Architectural validation",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 66,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'potential_cors_issue': {",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 61,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "'potential_hardcoded_path': {",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 63,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'excludes': [r'#.*\\.db', r'test.*\\.db'],",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 276,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'real_violation': f\"Print statement in {Path(candidate.file_path).name} should use logging\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 196,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if 'test' in context_text or 'debug' in context_text:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "intelligent_scanner.py",
      "line_number": 296,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'legitimate_wildcard': \"Legitimate wildcard usage (glob, imports, function args)\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "violation_analyzer.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'cors-wildcard-refined': {",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "violation_analyzer.py",
      "line_number": 25,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'structured-logging-refined': {",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "violation_analyzer.py",
      "line_number": 87,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "return 'function_args'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 139,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"allow_origins\\\\s*=\\\\s*\\\\[[^*]\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 167,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\\\\.patch\\\\(\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 656,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "print(f\"  \u2022 Create learning sessions to share architectural insights\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 614,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "['pyproject.toml', 'setup.py', 'requirements.txt']) or \\",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 111,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"logger\\\\.(?:error|warning|exception)\\\\(\",",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 111,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"logger\\\\.(?:error|warning|exception)\\\\(\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 300,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"Proper async function definitions\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "best_practices_scanner.py",
      "line_number": 394,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "elif 'api' in path_str or 'fastapi' in content_lower or 'router' in content_lower:",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "test_quick_mcp.py",
      "line_number": 12,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "from unittest.mock import patch",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "test_quick_mcp.py",
      "line_number": 5,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Simple test to verify no print statements break JSON protocol.",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_models.py",
      "line_number": 22,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_models.py",
      "line_number": 5,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_models.py",
      "line_number": 28,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_models.py",
      "line_number": 18,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION = \"validation\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 90,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "patterns_to_scan = [\"*.py\", \"*.js\", \"*.ts\", \"*.go\", \"*.rs\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 268,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 255,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Try getting all patterns to debug",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 268,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scanner.py",
      "line_number": 79,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/config.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/config.py",
      "line_number": 68,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/config.py",
      "line_number": 68,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/models.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/models.py",
      "line_number": 33,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/models.py",
      "line_number": 4,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "Using SQLModel for database persistence and Pydantic for validation.",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/unified_database.py",
      "line_number": 280,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"SELECT * FROM patterns WHERE name = ?\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/unified_database.py",
      "line_number": 168,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Get database connection context manager.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/unified_database.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{.*\\}', 'Hardcoded config dict - use Pydantic Settings'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 93,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 114,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "description=\"Always use context managers for database sessions\",",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 165,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "rationale=\"uv is 10-100x faster than pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 262,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "(r'logging\\.getLogger\\(\\)\\.setLevel', 'Setting logger level directly'),",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_rules.py",
      "line_number": 292,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "(r'request\\.json\\[', 'Direct JSON access - use Pydantic model'),",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/database.py",
      "line_number": 8,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/client.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "result.score *= (1 - match.priority.value / 10)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/client.py",
      "line_number": 36,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/client.py",
      "line_number": 248,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "requirements=f\"Detect {category} patterns in code\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/client.py",
      "line_number": 13,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, FarmAgentError, TemplateError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/client.py",
      "line_number": 36,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/tools.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/tools.py",
      "line_number": 340,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.console.logging.info(",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/tools.py",
      "line_number": 83,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/tools.py",
      "line_number": 118,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Add fix flag if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_sqlite_query.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "r\"(?:show|find|get).*violations?.*(?:in|for)\\s+(.+)\": self._query_violations_in_file,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_sqlite_query.py",
      "line_number": 146,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "WHERE v.scan_session_id = (SELECT id FROM scan_sessions ORDER BY timestamp DESC LIMIT 1)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_sqlite_query.py",
      "line_number": 59,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Process natural language query and return structured results.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "--rule \"\\\\bprint\\\\s*\\\\(\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 57,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "--category debugging \\\\",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_cli.py",
      "line_number": 66,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "--description \"Use httpx instead of requests\" \\\\",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/__init__.py",
      "line_number": 10,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, CodexError, PatternNotFoundError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 218,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(repo_path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 344,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if line.strip().startswith(\"logging.info(\") and \"test\" not in context.file_path.lower():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 35,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "self.session_id = str(uuid.uuid4())",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 461,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"to\": \"logger.info(\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 477,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"no-print-statements\": \"Difficulty debugging production issues, log noise in deployment\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 487,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Simple complexity based on lines, functions, classes",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/sqlite_scanner.py",
      "line_number": 327,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Example: Check for requests usage",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/project_config.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "scan_patterns: list[str] = field(default_factory=lambda: [\"**/*.py\", \"**/*.js\", \"**/*.ts\"])",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/project_config.py",
      "line_number": 188,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/project_config.py",
      "line_number": 10,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/project_config.py",
      "line_number": 188,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_cli.py",
      "line_number": 281,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "bar = \"\u2588\" * min(count, 50)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_cli.py",
      "line_number": 293,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "# Explain hardcoded paths scan",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_cli.py",
      "line_number": 111,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "session = await manager.run_scan_session(path, config)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_cli.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/fts_database_OLD.py",
      "line_number": 31,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/fts_database.py",
      "line_number": 9,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 155,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"score\": max(0, 1.0 - (len(violations) * 0.2))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 255,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 130,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "if \"pip install\" in code:",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 141,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 141,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 255,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/ai_query.py",
      "line_number": 261,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint pydantic',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_registry.py",
      "line_number": 107,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'Path\\(__file__\\)\\.parent\\s*/\\s*[\"\\']data[\"\\']', 'Hardcoded data directory'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_registry.py",
      "line_number": 44,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "id: str                          # Unique identifier (e.g., \"hardcoded-paths\")",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_registry.py",
      "line_number": 154,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_registry.py",
      "line_number": 258,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'logging': ['log_level', 'log_dir'],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_registry.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 251,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "exclude = [\"*.pyc\", \"__pycache__\", \".git\", \".venv\", \"venv\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 1609,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_files = [",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 1721,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"The Codex MCP server is now available in all Claude Code sessions.\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 361,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"[red]Farm SDK not available. Install with: uv pip install farm-sdk[/red]\")",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 35,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 1863,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Test MCP server functionality",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/cli.py",
      "line_number": 1041,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "- Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/database_OLD.py",
      "line_number": 102,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern.success_rate * (pattern.usage_count - 1) + 1.0",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/database_OLD.py",
      "line_number": 13,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 97,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 97,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 291,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"ruff\": \"pip install ruff\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 212,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.console.logging.info(f\"[blue]\ud83d\udd0d Analyzing repository: {self.target_dir}[/blue]\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 93,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"TRY003\", # Avoid long exception messages",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 97,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/portable_tools.py",
      "line_number": 229,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/settings.py",
      "line_number": 68,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\", \"*.pyo\", \"*.bak\", \"*~\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/settings.py",
      "line_number": 67,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/settings.py",
      "line_number": 67,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_importer.py",
      "line_number": 153,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_importer.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "anti_pattern=\"pip install, poetry install, conda install\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_importer.py",
      "line_number": 7,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import PatternImportError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_importer.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"functional\": PatternCategory.FUNCTIONAL,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_importer.py",
      "line_number": 150,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/exceptions.py",
      "line_number": 2,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "Custom exceptions for Codex.",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/gitignore_handler.py",
      "line_number": 24,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'__pycache__', '*.pyc', '*.pyo', '*.pyd', '.Python',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/gitignore_handler.py",
      "line_number": 27,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'pip-log.txt', 'pip-delete-this-directory.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/gitignore_handler.py",
      "line_number": 31,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'node_modules', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_extractor.py",
      "line_number": 41,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name='use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_extractor.py",
      "line_number": 153,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "for pattern_name, pattern_data in tool.get('exception_handling_patterns', {}).items():",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 220,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 28,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "C001 = \"hardcoded-paths\"         # Hardcoded paths instead of settings",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 79,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 89,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Represents a complete scan session with all results.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 220,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/scan_manager.py",
      "line_number": 40,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Q002 = \"complex-function\"        # Overly complex functions",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules_cli.py",
      "line_number": 92,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "files = list(path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules_cli.py",
      "line_number": 98,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules_cli.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules_cli.py",
      "line_number": 98,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules_cli.py",
      "line_number": 116,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/uv_check.py",
      "line_number": 216,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "logging.info(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/uv_check.py",
      "line_number": 38,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "self.warnings = []",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/uv_check.py",
      "line_number": 126,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Use uv pip list to check installed packages",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/uv_check.py",
      "line_number": 12,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 255,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "markdown += f\"**Found {len(patterns)} patterns**\\n\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 108,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 48,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(\"codex-mcp-server\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 9,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 108,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/mcp_server.py",
      "line_number": 160,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"description\": \"What you want to accomplish (e.g., 'make HTTP requests', 'handle errors', 'write tests')\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "demo_repository/server.py",
      "line_number": 10,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "query = f\"SELECT * FROM users WHERE id = {user_id}\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "demo_repository/server.py",
      "line_number": 2,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "from flask import Flask, request, jsonify",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "demo_repository/client.py",
      "line_number": 2,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "import requests",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "demo_repository/utils.py",
      "line_number": 7,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "demo_repository/utils.py",
      "line_number": 19,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Weak validation",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_models.py",
      "line_number": 22,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_models.py",
      "line_number": 5,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_models.py",
      "line_number": 28,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_models.py",
      "line_number": 18,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION = \"validation\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 36,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_status: Optional[str] = None",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 317,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Rollback all changes made in this session.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 531,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "comment = comment.replace('pip install', 'uv pip install')",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 212,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "fix_function: callable,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/safe_fixer.py",
      "line_number": 5,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "This module implements multiple validation layers to ensure",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_audit_trail.py",
      "line_number": 402,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "SELECT status, COUNT(*)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_audit_trail.py",
      "line_number": 652,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "pattern_name=\"mock-code-naming\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_audit_trail.py",
      "line_number": 45,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "session_id: str",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_audit_trail.py",
      "line_number": 654,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "violation_text=\"def fake_function():\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_audit_trail.py",
      "line_number": 35,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION_FAILED = \"validation_failed\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 611,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if project_analysis.violations_by_pattern.get('cors_never_wildcard', 0) > 0:",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 606,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "if project_analysis.violations_by_pattern.get('hardcoded_secrets', 0) > 0:",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 380,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 367,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Try getting all patterns to debug",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 380,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scanner.py",
      "line_number": 170,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/config.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/config.py",
      "line_number": 68,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/config.py",
      "line_number": 68,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/models.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/models.py",
      "line_number": 37,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "LOGGING = \"logging\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/models.py",
      "line_number": 33,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/models.py",
      "line_number": 4,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "Using SQLModel for database persistence and Pydantic for validation.",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 15,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"no-cors-wildcard\",  # Security critical",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 207,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "(\"secure-jwt-storage\", \"auth/jwt_handler.py\", \"JWT_SECRET = 'hardcoded'\"),",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 35,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock-code-naming\",  # Simple rename",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 208,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "(\"use-uv-package-manager\", \"scripts/install.py\", \"pip install requests\"),",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 139,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if pattern_name in [\"structured-logging\", \"sanitize-production-errors\"]:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 206,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "(\"mock-code-naming\", \"tests/test_example.py\", \"def fake_function():\"),",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_validation_rules.py",
      "line_number": 208,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "(\"use-uv-package-manager\", \"scripts/install.py\", \"pip install requests\"),",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/negative_space_patterns.py",
      "line_number": 81,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "return [NegativeSpacePattern(**pattern) for pattern in data]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/negative_space_patterns.py",
      "line_number": 104,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "problems_prevented=[\"settings_consolidation\", \"hardcoded_secrets\"],",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/negative_space_patterns.py",
      "line_number": 126,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "problems_prevented=[\"mock_naming_compliance\", \"pre_commit_skip_usage\"],",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/negative_space_patterns.py",
      "line_number": 446,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\u2022 Implement as automated checks in CI/CD pipelines",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/negative_space_patterns.py",
      "line_number": 462,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# This function would be called by the main scanner",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/unified_database.py",
      "line_number": 280,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"SELECT * FROM patterns WHERE name = ?\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/unified_database.py",
      "line_number": 168,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Get database connection context manager.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/unified_database.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{.*\\}', 'Hardcoded config dict - use Pydantic Settings'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 93,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 114,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "description=\"Always use context managers for database sessions\",",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 165,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "rationale=\"uv is 10-100x faster than pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 262,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "(r'logging\\.getLogger\\(\\)\\.setLevel', 'Setting logger level directly'),",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_rules.py",
      "line_number": 292,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "(r'request\\.json\\[', 'Direct JSON access - use Pydantic model'),",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_discovery.py",
      "line_number": 51,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "return len(self.excluded_files) / self.total_files_found * 100",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_discovery.py",
      "line_number": 109,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_discovery.py",
      "line_number": 76,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_discovery.py",
      "line_number": 109,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_discovery.py",
      "line_number": 123,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Load gitignore patterns if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/database.py",
      "line_number": 8,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/client.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "result.score *= (1 - match.priority.value / 10)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/client.py",
      "line_number": 36,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/client.py",
      "line_number": 248,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "requirements=f\"Detect {category} patterns in code\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/client.py",
      "line_number": 13,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, FarmAgentError, TemplateError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/client.py",
      "line_number": 36,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/tools.py",
      "line_number": 84,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/tools.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/tools.py",
      "line_number": 84,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/tools.py",
      "line_number": 119,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Add fix flag if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_sqlite_query.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "r\"(?:show|find|get).*violations?.*(?:in|for)\\s+(.+)\": self._query_violations_in_file,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_sqlite_query.py",
      "line_number": 146,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "WHERE v.scan_session_id = (SELECT id FROM scan_sessions ORDER BY timestamp DESC LIMIT 1)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_sqlite_query.py",
      "line_number": 59,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Process natural language query and return structured results.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "--rule \"\\\\bprint\\\\s*\\\\(\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 57,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "--category debugging \\\\",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_cli.py",
      "line_number": 66,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "--description \"Use httpx instead of requests\" \\\\",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/__init__.py",
      "line_number": 10,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, CodexError, PatternNotFoundError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 218,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(repo_path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 344,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if line.strip().startswith(\"logging.info(\") and \"test\" not in context.file_path.lower():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 35,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "self.session_id = str(uuid.uuid4())",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 461,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"to\": \"logger.info(\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 477,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"no-print-statements\": \"Difficulty debugging production issues, log noise in deployment\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 487,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Simple complexity based on lines, functions, classes",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/sqlite_scanner.py",
      "line_number": 327,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Example: Check for requests usage",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/project_config.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "scan_patterns: list[str] = field(default_factory=lambda: [\"**/*.py\", \"**/*.js\", \"**/*.ts\"])",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/project_config.py",
      "line_number": 188,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/project_config.py",
      "line_number": 10,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/project_config.py",
      "line_number": 188,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_cli.py",
      "line_number": 281,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "bar = \"\u2588\" * min(count, 50)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_cli.py",
      "line_number": 293,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "# Explain hardcoded paths scan",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_cli.py",
      "line_number": 111,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "session = await manager.run_scan_session(path, config)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_cli.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fts_database_OLD.py",
      "line_number": 31,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fts_database.py",
      "line_number": 9,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 218,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**violation,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 499,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'mock-code-naming': lambda content: fixer._fix_mock_naming_batch(content)[0],",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 653,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "'session_id': self.audit_trail.current_session_id,",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 726,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'matched_code': 'pip install requests',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 65,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "functions_modified: List[str]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_orchestrator.py",
      "line_number": 726,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'matched_code': 'pip install requests',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_context_analyzer.py",
      "line_number": 489,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if 'security' in pattern or 'jwt' in pattern or 'cors' in pattern:",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_context_analyzer.py",
      "line_number": 300,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if fix_type in [\"mock-code-naming\", \"test-assertions\"]:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_context_analyzer.py",
      "line_number": 306,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "return False, \"Function with decorators may have specific signature requirements\"",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_context_analyzer.py",
      "line_number": 371,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if 'logging.' in code or 'logger.' in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/fix_context_analyzer.py",
      "line_number": 22,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "function_name: Optional[str] = None",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 155,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"score\": max(0, 1.0 - (len(violations) * 0.2))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 255,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 130,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "if \"pip install\" in code:",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 141,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 141,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 255,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/ai_query.py",
      "line_number": 261,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint pydantic',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_registry.py",
      "line_number": 107,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'Path\\(__file__\\)\\.parent\\s*/\\s*[\"\\']data[\"\\']', 'Hardcoded data directory'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_registry.py",
      "line_number": 44,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "id: str                          # Unique identifier (e.g., \"hardcoded-paths\")",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_registry.py",
      "line_number": 154,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_registry.py",
      "line_number": 258,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'logging': ['log_level', 'log_dir'],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_registry.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 363,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "codex fix . --pattern no-cors-wildcard",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 353,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "- Automatic fixes for simple patterns (mock naming, package manager)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 343,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "bool, typer.Option(\"--rollback\", \"-r\", help=\"Rollback previous fix session\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 716,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"[red]Farm SDK not available. Install with: uv pip install farm-sdk[/red]\")",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 36,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 147,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Enhanced scan function with negative space analysis integration.",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/cli.py",
      "line_number": 243,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Run negative space analysis if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/database_OLD.py",
      "line_number": 102,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern.success_rate * (pattern.usage_count - 1) + 1.0",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/database_OLD.py",
      "line_number": 13,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_context.py",
      "line_number": 535,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "context.record_pattern_check(\"no-cors-wildcard\", Path(\"test.py\"), True, \"Found CORS wildcard\", 5.2, 0.9)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_context.py",
      "line_number": 530,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "context.record_file_included(Path(\"test.py\"), \"Python file matching scan pattern\", file_size=1024)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_context.py",
      "line_number": 98,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "# Initialize Logfire for structured logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_context.py",
      "line_number": 191,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "logfire.debug(",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_context.py",
      "line_number": 530,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "context.record_file_included(Path(\"test.py\"), \"Python file matching scan pattern\", file_size=1024)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 97,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 97,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 291,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"ruff\": \"pip install ruff\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 212,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.console.logging.info(f\"[blue]\ud83d\udd0d Analyzing repository: {self.target_dir}[/blue]\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 93,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"TRY003\", # Avoid long exception messages",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 97,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/portable_tools.py",
      "line_number": 229,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/settings.py",
      "line_number": 68,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\", \"*.pyo\", \"*.bak\", \"*~\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/settings.py",
      "line_number": 67,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/settings.py",
      "line_number": 67,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_importer.py",
      "line_number": 153,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_importer.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "anti_pattern=\"pip install, poetry install, conda install\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_importer.py",
      "line_number": 7,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import PatternImportError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_importer.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"functional\": PatternCategory.FUNCTIONAL,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_importer.py",
      "line_number": 150,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/exceptions.py",
      "line_number": 2,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "Custom exceptions for Codex.",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/gitignore_handler.py",
      "line_number": 24,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'__pycache__', '*.pyc', '*.pyo', '*.pyd', '.Python',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/gitignore_handler.py",
      "line_number": 27,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'pip-log.txt', 'pip-delete-this-directory.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/gitignore_handler.py",
      "line_number": 31,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'node_modules', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_extractor.py",
      "line_number": 41,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name='use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_extractor.py",
      "line_number": 153,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "for pattern_name, pattern_data in tool.get('exception_handling_patterns', {}).items():",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 220,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 28,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "C001 = \"hardcoded-paths\"         # Hardcoded paths instead of settings",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 79,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 89,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Represents a complete scan session with all results.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 220,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/scan_manager.py",
      "line_number": 40,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Q002 = \"complex-function\"        # Overly complex functions",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules_cli.py",
      "line_number": 92,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "files = list(path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules_cli.py",
      "line_number": 98,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules_cli.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules_cli.py",
      "line_number": 98,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules_cli.py",
      "line_number": 116,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/violation_reporter.py",
      "line_number": 325,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern_name=\"no-cors-wildcard\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/violation_reporter.py",
      "line_number": 336,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "pattern_name=\"mock-code-naming\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/violation_reporter.py",
      "line_number": 46,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "- Proper formatting without logger prefixes",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/violation_reporter.py",
      "line_number": 107,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "logfire.debug(\"File scan started\", file_path=str(file_path))",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/violation_reporter.py",
      "line_number": 340,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "matched_code=\"def fake_function():\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/uv_check.py",
      "line_number": 216,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "logging.info(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/uv_check.py",
      "line_number": 38,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "self.warnings = []",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/uv_check.py",
      "line_number": 126,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Use uv pip list to check installed packages",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/uv_check.py",
      "line_number": 12,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 255,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "markdown += f\"**Found {len(patterns)} patterns**\\n\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 108,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 48,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(\"codex-mcp-server\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 9,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 108,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/mcp_server.py",
      "line_number": 160,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"description\": \"What you want to accomplish (e.g., 'make HTTP requests', 'handle errors', 'write tests')\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/batch_fixer.py",
      "line_number": 88,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "match = re.search(r'def\\s+(fake|stub|dummy|test)_(\\w+)\\s*\\(', line)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/batch_fixer.py",
      "line_number": 23,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock-code-naming\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/batch_fixer.py",
      "line_number": 117,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"\"\"Replace all pip commands with uv.\"\"\"",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/batch_fixer.py",
      "line_number": 10,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/batch_fixer.py",
      "line_number": 82,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Fix all mock function naming in content.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 71,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"no-cors-wildcard\": FixStrategy.INTELLIGENT,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 596,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "fix_code=\"jwt_secret = os.environ.get('JWT_SECRET')\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 76,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock-code-naming\": FixStrategy.AUTOMATIC,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 90,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Run interactive fixing session.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 402,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Replace pip with uv",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 11,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 521,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if 'return' in line and ('error' in line.lower() or 'exception' in line.lower()):",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 211,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "fix_functions = {",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/interactive_fixer.py",
      "line_number": 78,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"use-pydantic-validation\": FixStrategy.INTELLIGENT,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 263,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "content = \"# -*- coding: utf-8 -*-\\n# Comment with \u00e9moji \ud83c\udf89\\nprint('hello')\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 183,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"JWT_SECRET = 'hardcoded'\"",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 12,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "from unittest.mock import MagicMock, patch",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 209,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"pip install requests\"",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 309,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logging.warning(\"Using mock function %s\", __name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 333,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "original = 'return {\"error\": str(e), \"traceback\": e.__traceback__}'",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 56,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "def test_rollback_functionality(self):",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_safe_fixing.py",
      "line_number": 209,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"pip install requests\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 35,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "password = \"hardcoded-secret\"  # Should trigger violation",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 14,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "from unittest.mock import patch, MagicMock",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 101,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger('codex')",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 207,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "pass  # Ignore other exceptions for this test",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 34,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "def example_function():",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "tests/test_mcp_protocol.py",
      "line_number": 272,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Simulate MCP request/response cycle",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/__init__.py",
      "line_number": 10,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "from .hardcoded_paths_fixer import HardcodedPathsFixer",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/__init__.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "from .print_to_logging_fixer import PrintToLoggingFixer",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/external_tools_fixer.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/print_to_logging_fixer.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "line = re.sub(r'print\\s*\\(', 'logging.info(', line)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/print_to_logging_fixer.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/import_consolidation_fixer.py",
      "line_number": 100,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in self.target_dir.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/import_consolidation_fixer.py",
      "line_number": 12,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 17,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "from hardcoded_paths_fixer import HardcodedPathsFixer",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 181,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "Each fixer is focused, testable, and can be used independently.",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 80,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "logger.info(\"Starting orchestrated fixing session...\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 20,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 175,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\u2705 Easy to debug and maintain",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/fixer_orchestrator.py",
      "line_number": 181,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Each fixer is focused, testable, and can be used independently.",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/hardcoded_paths_fixer.py",
      "line_number": 137,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "for py_file in self.target_dir.rglob(\"*.py\"):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/hardcoded_paths_fixer.py",
      "line_number": 3,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "Hardcoded Paths Fixer - Replaces hardcoded paths with settings references.",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/hardcoded_paths_fixer.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/remaining_issues_fixer.py",
      "line_number": 119,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "line = re.sub(r'print\\s*\\(', 'logging.info(', line)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "fixers/remaining_issues_fixer.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(__name__)",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_models.py",
      "line_number": 22,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_models.py",
      "line_number": 10,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_models.py",
      "line_number": 28,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_models.py",
      "line_number": 18,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION = \"validation\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 90,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "patterns_to_scan = [\"*.py\", \"*.js\", \"*.ts\", \"*.go\", \"*.rs\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 268,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 16,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 255,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Try getting all patterns to debug",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 268,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scanner.py",
      "line_number": 79,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/config.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/config.py",
      "line_number": 68,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/config.py",
      "line_number": 68,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/models.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/models.py",
      "line_number": 33,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/models.py",
      "line_number": 4,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "Using SQLModel for database persistence and Pydantic for validation.",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/unified_database.py",
      "line_number": 280,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"SELECT * FROM patterns WHERE name = ?\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/unified_database.py",
      "line_number": 168,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Get database connection context manager.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/unified_database.py",
      "line_number": 16,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{.*\\}', 'Hardcoded config dict - use Pydantic Settings'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 93,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 114,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "description=\"Always use context managers for database sessions\",",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 165,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "rationale=\"uv is 10-100x faster than pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 262,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "(r'logging\\.getLogger\\(\\)\\.setLevel', 'Setting logger level directly'),",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_rules.py",
      "line_number": 292,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "(r'request\\.json\\[', 'Direct JSON access - use Pydantic model'),",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/database.py",
      "line_number": 8,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/client.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "result.score *= (1 - match.priority.value / 10)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/client.py",
      "line_number": 36,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/client.py",
      "line_number": 248,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "requirements=f\"Detect {category} patterns in code\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/client.py",
      "line_number": 13,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, FarmAgentError, TemplateError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/client.py",
      "line_number": 36,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/tools.py",
      "line_number": 84,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/tools.py",
      "line_number": 16,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/tools.py",
      "line_number": 84,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/tools.py",
      "line_number": 119,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Add fix flag if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_sqlite_query.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "r\"(?:show|find|get).*violations?.*(?:in|for)\\s+(.+)\": self._query_violations_in_file,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_sqlite_query.py",
      "line_number": 146,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "WHERE v.scan_session_id = (SELECT id FROM scan_sessions ORDER BY timestamp DESC LIMIT 1)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_sqlite_query.py",
      "line_number": 59,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Process natural language query and return structured results.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "--rule \"\\\\bprint\\\\s*\\\\(\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 19,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 57,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "--category debugging \\\\",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_cli.py",
      "line_number": 66,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "--description \"Use httpx instead of requests\" \\\\",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/__init__.py",
      "line_number": 10,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, CodexError, PatternNotFoundError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 218,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(repo_path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 344,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if line.strip().startswith(\"logging.info(\") and \"test\" not in context.file_path.lower():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 35,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "self.session_id = str(uuid.uuid4())",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 461,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"to\": \"logger.info(\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 477,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"no-print-statements\": \"Difficulty debugging production issues, log noise in deployment\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 487,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Simple complexity based on lines, functions, classes",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/sqlite_scanner.py",
      "line_number": 327,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Example: Check for requests usage",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/project_config.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "scan_patterns: list[str] = field(default_factory=lambda: [\"**/*.py\", \"**/*.js\", \"**/*.ts\"])",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/project_config.py",
      "line_number": 188,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/project_config.py",
      "line_number": 17,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/project_config.py",
      "line_number": 188,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_cli.py",
      "line_number": 281,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "bar = \"\u2588\" * min(count, 50)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_cli.py",
      "line_number": 293,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "# Explain hardcoded paths scan",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_cli.py",
      "line_number": 111,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "session = await manager.run_scan_session(path, config)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_cli.py",
      "line_number": 23,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/fts_database_OLD.py",
      "line_number": 30,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/fts_database.py",
      "line_number": 9,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 155,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"score\": max(0, 1.0 - (len(violations) * 0.2))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 255,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 130,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "if \"pip install\" in code:",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 141,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 141,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 255,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/ai_query.py",
      "line_number": 261,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint pydantic',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_registry.py",
      "line_number": 107,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'Path\\(__file__\\)\\.parent\\s*/\\s*[\"\\']data[\"\\']', 'Hardcoded data directory'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_registry.py",
      "line_number": 44,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "id: str                          # Unique identifier (e.g., \"hardcoded-paths\")",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_registry.py",
      "line_number": 154,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_registry.py",
      "line_number": 258,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'logging': ['log_level', 'log_dir'],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_registry.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 252,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "exclude = [\"*.pyc\", \"__pycache__\", \".git\", \".venv\", \"venv\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 1610,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_files = [",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 1722,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"The Codex MCP server is now available in all Claude Code sessions.\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 362,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"[red]Farm SDK not available. Install with: uv pip install farm-sdk[/red]\")",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 48,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 1864,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Test MCP server functionality",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/cli.py",
      "line_number": 1042,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "- Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/database_OLD.py",
      "line_number": 102,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern.success_rate * (pattern.usage_count - 1) + 1.0",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/database_OLD.py",
      "line_number": 13,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 98,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 98,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 292,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"ruff\": \"pip install ruff\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 20,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 94,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"TRY003\", # Avoid long exception messages",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 98,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/portable_tools.py",
      "line_number": 230,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/settings.py",
      "line_number": 68,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\", \"*.pyo\", \"*.bak\", \"*~\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/settings.py",
      "line_number": 67,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/settings.py",
      "line_number": 67,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_importer.py",
      "line_number": 154,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_importer.py",
      "line_number": 40,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "anti_pattern=\"pip install, poetry install, conda install\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_importer.py",
      "line_number": 7,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import PatternImportError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_importer.py",
      "line_number": 155,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"functional\": PatternCategory.FUNCTIONAL,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_importer.py",
      "line_number": 151,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/exceptions.py",
      "line_number": 2,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "Custom exceptions for Codex.",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/gitignore_handler.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'__pycache__', '*.pyc', '*.pyo', '*.pyd', '.Python',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'pip-log.txt', 'pip-delete-this-directory.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/gitignore_handler.py",
      "line_number": 30,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'node_modules', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_extractor.py",
      "line_number": 49,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_extractor.py",
      "line_number": 42,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name='use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_extractor.py",
      "line_number": 154,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "for pattern_name, pattern_data in tool.get('exception_handling_patterns', {}).items():",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/pattern_extractor.py",
      "line_number": 49,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 220,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 28,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "C001 = \"hardcoded-paths\"         # Hardcoded paths instead of settings",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 79,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 89,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Represents a complete scan session with all results.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 220,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/scan_manager.py",
      "line_number": 40,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Q002 = \"complex-function\"        # Overly complex functions",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules_cli.py",
      "line_number": 92,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "files = list(path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules_cli.py",
      "line_number": 98,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules_cli.py",
      "line_number": 23,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules_cli.py",
      "line_number": 98,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules_cli.py",
      "line_number": 116,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/uv_check.py",
      "line_number": 216,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "logging.info(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/uv_check.py",
      "line_number": 38,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "self.warnings = []",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/uv_check.py",
      "line_number": 126,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Use uv pip list to check installed packages",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/uv_check.py",
      "line_number": 15,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 255,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "markdown += f\"**Found {len(patterns)} patterns**\\n\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 108,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 48,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(\"codex-mcp-server\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 9,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 108,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/mcp_server.py",
      "line_number": 160,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"description\": \"What you want to accomplish (e.g., 'make HTTP requests', 'handle errors', 'write tests')\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_models.py",
      "line_number": 22,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_models.py",
      "line_number": 5,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_models.py",
      "line_number": 28,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_models.py",
      "line_number": 18,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION = \"validation\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 90,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "patterns_to_scan = [\"*.py\", \"*.js\", \"*.ts\", \"*.go\", \"*.rs\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 268,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 255,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "# Try getting all patterns to debug",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 268,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scanner.py",
      "line_number": 79,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/config.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/config.py",
      "line_number": 68,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/config.py",
      "line_number": 68,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/models.py",
      "line_number": 26,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/models.py",
      "line_number": 33,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/models.py",
      "line_number": 4,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "Using SQLModel for database persistence and Pydantic for validation.",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/unified_database.py",
      "line_number": 280,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"SELECT * FROM patterns WHERE name = ?\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/unified_database.py",
      "line_number": 168,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Get database connection context manager.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/unified_database.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{.*\\}', 'Hardcoded config dict - use Pydantic Settings'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 93,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 114,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "description=\"Always use context managers for database sessions\",",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 165,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "rationale=\"uv is 10-100x faster than pip\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 262,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "(r'logging\\.getLogger\\(\\)\\.setLevel', 'Setting logger level directly'),",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "TESTING = \"testing\"            # Test patterns",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_rules.py",
      "line_number": 292,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "(r'request\\.json\\[', 'Direct JSON access - use Pydantic model'),",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/database.py",
      "line_number": 8,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/client.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "result.score *= (1 - match.priority.value / 10)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/client.py",
      "line_number": 36,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/client.py",
      "line_number": 248,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "requirements=f\"Detect {category} patterns in code\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/client.py",
      "line_number": 13,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, FarmAgentError, TemplateError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/client.py",
      "line_number": 36,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/tools.py",
      "line_number": 83,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/tools.py",
      "line_number": 340,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.console.logging.info(",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/tools.py",
      "line_number": 83,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/tools.py",
      "line_number": 118,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Add fix flag if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_sqlite_query.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "r\"(?:show|find|get).*violations?.*(?:in|for)\\s+(.+)\": self._query_violations_in_file,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_sqlite_query.py",
      "line_number": 146,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "WHERE v.scan_session_id = (SELECT id FROM scan_sessions ORDER BY timestamp DESC LIMIT 1)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_sqlite_query.py",
      "line_number": 59,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Process natural language query and return structured results.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_sqlite_query.py",
      "line_number": 509,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 60,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "--rule \"\\\\bprint\\\\s*\\\\(\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 9,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 57,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "--category debugging \\\\",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 620,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_cli.py",
      "line_number": 66,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "--description \"Use httpx instead of requests\" \\\\",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/__init__.py",
      "line_number": 10,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, CodexError, PatternNotFoundError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 218,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(repo_path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 344,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if line.strip().startswith(\"logging.info(\") and \"test\" not in context.file_path.lower():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 35,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "self.session_id = str(uuid.uuid4())",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 461,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"to\": \"logger.info(\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 477,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"no-print-statements\": \"Difficulty debugging production issues, log noise in deployment\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 487,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Simple complexity based on lines, functions, classes",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/sqlite_scanner.py",
      "line_number": 327,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Example: Check for requests usage",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/project_config.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "scan_patterns: list[str] = field(default_factory=lambda: [\"**/*.py\", \"**/*.js\", \"**/*.ts\"])",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/project_config.py",
      "line_number": 188,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/project_config.py",
      "line_number": 10,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/project_config.py",
      "line_number": 188,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_cli.py",
      "line_number": 281,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "bar = \"\u2588\" * min(count, 50)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_cli.py",
      "line_number": 293,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "# Explain hardcoded paths scan",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_cli.py",
      "line_number": 111,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "session = await manager.run_scan_session(path, config)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_cli.py",
      "line_number": 13,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/fts_database_OLD.py",
      "line_number": 31,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/fts_database.py",
      "line_number": 9,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Add deprecation warning",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 155,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"score\": max(0, 1.0 - (len(violations) * 0.2))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 255,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 130,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "if \"pip install\" in code:",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 141,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 141,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 255,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/ai_query.py",
      "line_number": 261,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint pydantic',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_registry.py",
      "line_number": 107,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'Path\\(__file__\\)\\.parent\\s*/\\s*[\"\\']data[\"\\']', 'Hardcoded data directory'),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_registry.py",
      "line_number": 44,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "id: str                          # Unique identifier (e.g., \"hardcoded-paths\")",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_registry.py",
      "line_number": 154,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_registry.py",
      "line_number": 258,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "'logging': ['log_level', 'log_dir'],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_registry.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Skip test files and migrations",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 251,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "exclude = [\"*.pyc\", \"__pycache__\", \".git\", \".venv\", \"venv\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 1609,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_files = [",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 1721,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"The Codex MCP server is now available in all Claude Code sessions.\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 361,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "console.logging.info(\"[red]Farm SDK not available. Install with: uv pip install farm-sdk[/red]\")",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 35,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 1863,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Test MCP server functionality",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/cli.py",
      "line_number": 1041,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "- Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/database_OLD.py",
      "line_number": 102,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern.success_rate * (pattern.usage_count - 1) + 1.0",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/database_OLD.py",
      "line_number": 13,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 97,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 97,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 291,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"ruff\": \"pip install ruff\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 212,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "self.console.logging.info(f\"[blue]\ud83d\udd0d Analyzing repository: {self.target_dir}[/blue]\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 93,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"TRY003\", # Avoid long exception messages",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 97,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/portable_tools.py",
      "line_number": 229,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/settings.py",
      "line_number": 68,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\", \"*.pyo\", \"*.bak\", \"*~\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/settings.py",
      "line_number": 67,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/settings.py",
      "line_number": 67,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_importer.py",
      "line_number": 153,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_importer.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "anti_pattern=\"pip install, poetry install, conda install\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_importer.py",
      "line_number": 7,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import PatternImportError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_importer.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"functional\": PatternCategory.FUNCTIONAL,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_importer.py",
      "line_number": 150,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/exceptions.py",
      "line_number": 2,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "Custom exceptions for Codex.",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/gitignore_handler.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'__pycache__', '*.pyc', '*.pyo', '*.pyd', '.Python',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'pip-log.txt', 'pip-delete-this-directory.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/gitignore_handler.py",
      "line_number": 30,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'node_modules', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_extractor.py",
      "line_number": 41,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name='use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_extractor.py",
      "line_number": 153,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "for pattern_name, pattern_data in tool.get('exception_handling_patterns', {}).items():",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/pattern_extractor.py",
      "line_number": 48,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 220,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 28,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "C001 = \"hardcoded-paths\"         # Hardcoded paths instead of settings",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 79,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 89,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Represents a complete scan session with all results.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 220,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/scan_manager.py",
      "line_number": 40,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "Q002 = \"complex-function\"        # Overly complex functions",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules_cli.py",
      "line_number": 92,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "files = list(path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules_cli.py",
      "line_number": 98,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules_cli.py",
      "line_number": 8,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules_cli.py",
      "line_number": 98,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', 'node_modules'",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules_cli.py",
      "line_number": 116,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/uv_check.py",
      "line_number": 216,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "logging.info(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/uv_check.py",
      "line_number": 38,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "self.warnings = []",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/uv_check.py",
      "line_number": 126,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Use uv pip list to check installed packages",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/uv_check.py",
      "line_number": 12,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "import logging",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 255,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "markdown += f\"**Found {len(patterns)} patterns**\\n\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 108,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 48,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(\"codex-mcp-server\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 9,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 108,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/mcp_server.py",
      "line_number": 160,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"description\": \"What you want to accomplish (e.g., 'make HTTP requests', 'handle errors', 'write tests')\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "src/main.py",
      "line_number": 1,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "src/main.py",
      "line_number": 1,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "pip install fastapi",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/settings_rules.py",
      "line_number": 89,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{', \"dict configuration\"),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/settings_rules.py",
      "line_number": 63,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/settings_rules.py",
      "line_number": 38,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "debug: bool = False",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/settings_rules.py",
      "line_number": 30,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "rationale=\"Pydantic Settings provides validation, type safety, and environment variable support\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/registry.py",
      "line_number": 129,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/registry.py",
      "line_number": 21,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "WARNING = \"warning\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/categories.py",
      "line_number": 45,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "W = \"W\"      # pycodestyle warnings",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/categories.py",
      "line_number": 60,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "RulePrefix.API: \"API design and validation\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/database_rules.py",
      "line_number": 191,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if re.search(r'[\"\\'].*\\b(FROM|WHERE|JOIN|INTO|VALUES)\\b', line, re.IGNORECASE):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/database_rules.py",
      "line_number": 34,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "with get_db_session() as session:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/database_rules.py",
      "line_number": 40,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "session.close()  # May not be called if exception occurs",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/database_rules.py",
      "line_number": 123,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Extract the function/class name from a call.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/loader.py",
      "line_number": 24,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/rules/loader.py",
      "line_number": 24,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"regex\": \".*/__init__\\\\.py\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 107,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"keywords\": [\"jwt_secret\", \"JWT_SECRET\", \"secret_key\", \"SECRET_KEY\"],",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 144,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"name\": \"mock-naming-convention\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Use UV package manager instead of pip or poetry\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 193,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"logger\", \"logging\", \"logging.info(\"],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 82,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Always specify exception types\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 148,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"All mock objects and functions must have mock_ prefix\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_200552/data/default_patterns.py",
      "line_number": 51,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good\": \"uv add fastapi[all]\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/settings_rules.py",
      "line_number": 89,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{', \"dict configuration\"),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/settings_rules.py",
      "line_number": 63,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/settings_rules.py",
      "line_number": 38,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "debug: bool = False",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/settings_rules.py",
      "line_number": 30,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "rationale=\"Pydantic Settings provides validation, type safety, and environment variable support\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/registry.py",
      "line_number": 129,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/registry.py",
      "line_number": 21,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "WARNING = \"warning\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/categories.py",
      "line_number": 45,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "W = \"W\"      # pycodestyle warnings",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/categories.py",
      "line_number": 60,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "RulePrefix.API: \"API design and validation\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/database_rules.py",
      "line_number": 191,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if re.search(r'[\"\\'].*\\b(FROM|WHERE|JOIN|INTO|VALUES)\\b', line, re.IGNORECASE):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/database_rules.py",
      "line_number": 34,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "with get_db_session() as session:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/database_rules.py",
      "line_number": 40,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "session.close()  # May not be called if exception occurs",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/database_rules.py",
      "line_number": 123,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Extract the function/class name from a call.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/loader.py",
      "line_number": 24,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/rules/loader.py",
      "line_number": 24,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"regex\": \".*/__init__\\\\.py\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 107,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"keywords\": [\"jwt_secret\", \"JWT_SECRET\", \"secret_key\", \"SECRET_KEY\"],",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 144,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"name\": \"mock-naming-convention\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Use UV package manager instead of pip or poetry\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 193,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"logger\", \"logging\", \"logging.info(\"],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 82,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Always specify exception types\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 148,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"All mock objects and functions must have mock_ prefix\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex/data/default_patterns.py",
      "line_number": 51,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good\": \"uv add fastapi[all]\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/settings_rules.py",
      "line_number": 89,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{', \"dict configuration\"),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/settings_rules.py",
      "line_number": 63,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/settings_rules.py",
      "line_number": 38,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "debug: bool = False",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/settings_rules.py",
      "line_number": 30,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "rationale=\"Pydantic Settings provides validation, type safety, and environment variable support\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/registry.py",
      "line_number": 129,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/registry.py",
      "line_number": 21,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "WARNING = \"warning\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/categories.py",
      "line_number": 45,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "W = \"W\"      # pycodestyle warnings",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/categories.py",
      "line_number": 60,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "RulePrefix.API: \"API design and validation\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/database_rules.py",
      "line_number": 191,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if re.search(r'[\"\\'].*\\b(FROM|WHERE|JOIN|INTO|VALUES)\\b', line, re.IGNORECASE):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/database_rules.py",
      "line_number": 34,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "with get_db_session() as session:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/database_rules.py",
      "line_number": 40,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "session.close()  # May not be called if exception occurs",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/database_rules.py",
      "line_number": 123,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Extract the function/class name from a call.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/loader.py",
      "line_number": 24,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/rules/loader.py",
      "line_number": 24,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"regex\": \".*/__init__\\\\.py\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 107,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"keywords\": [\"jwt_secret\", \"JWT_SECRET\", \"secret_key\", \"SECRET_KEY\"],",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 144,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"name\": \"mock-naming-convention\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Use UV package manager instead of pip or poetry\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 193,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"logger\", \"logging\", \"logging.info(\"],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 82,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Always specify exception types\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 148,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"All mock objects and functions must have mock_ prefix\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "codex_backup_20250819_185515/data/default_patterns.py",
      "line_number": 51,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good\": \"uv add fastapi[all]\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/settings_rules.py",
      "line_number": 89,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "(r'config\\s*=\\s*\\{', \"dict configuration\"),",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/settings_rules.py",
      "line_number": 63,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "name=\"no-hardcoded-paths\",",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/settings_rules.py",
      "line_number": 38,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "debug: bool = False",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/settings_rules.py",
      "line_number": 30,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "rationale=\"Pydantic Settings provides validation, type safety, and environment variable support\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/registry.py",
      "line_number": 129,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/registry.py",
      "line_number": 21,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "WARNING = \"warning\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/categories.py",
      "line_number": 45,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "W = \"W\"      # pycodestyle warnings",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/categories.py",
      "line_number": 60,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "RulePrefix.API: \"API design and validation\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/database_rules.py",
      "line_number": 191,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "if re.search(r'[\"\\'].*\\b(FROM|WHERE|JOIN|INTO|VALUES)\\b', line, re.IGNORECASE):",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/database_rules.py",
      "line_number": 34,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "with get_db_session() as session:",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/database_rules.py",
      "line_number": 40,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "session.close()  # May not be called if exception occurs",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/database_rules.py",
      "line_number": 123,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Extract the function/class name from a call.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/loader.py",
      "line_number": 24,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/rules/loader.py",
      "line_number": 24,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# testing_rules.register_testing_rules(registry)",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"regex\": \".*/__init__\\\\.py\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 107,
      "pattern_name": "secure-jwt-storage",
      "priority": "MANDATORY",
      "matched_code": "\"keywords\": [\"jwt_secret\", \"JWT_SECRET\", \"secret_key\", \"SECRET_KEY\"],",
      "suggestion": "Store JWT secrets in secure credential manager, never hardcode",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 144,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"name\": \"mock-naming-convention\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Use UV package manager instead of pip or poetry\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 193,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"keywords\": [\"logger\", \"logging\", \"logging.info(\"],",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 82,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"Always specify exception types\",",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 148,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"rule\": \"All mock objects and functions must have mock_ prefix\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "quality_enforcement_backup_20250819_194047/data/default_patterns.py",
      "line_number": 51,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"good\": \"uv add fastapi[all]\",",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_models.py",
      "line_number": 20,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_models.py",
      "line_number": 15,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "LOGGING = \"logging\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_models.py",
      "line_number": 26,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_models.py",
      "line_number": 16,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "VALIDATION = \"validation\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/scanner.py",
      "line_number": 89,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "patterns_to_scan = [\"*.py\", \"*.js\", \"*.ts\", \"*.go\", \"*.rs\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/scanner.py",
      "line_number": 224,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/scanner.py",
      "line_number": 224,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"*.pyc\", \"*.pyo\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/scanner.py",
      "line_number": 78,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Apply fixes if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/config.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/config.py",
      "line_number": 68,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/config.py",
      "line_number": 68,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/models.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "TESTING = \"testing\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/models.py",
      "line_number": 32,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "FUNCTIONAL = \"functional\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/models.py",
      "line_number": 4,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "Using SQLModel for database persistence and Pydantic for validation.",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/unified_database.py",
      "line_number": 280,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"SELECT * FROM patterns WHERE name = ?\",",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/unified_database.py",
      "line_number": 168,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "\"\"\"Get database connection context manager.\"\"\"",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/database.py",
      "line_number": 101,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "pattern.success_rate * (pattern.usage_count - 1) + 1.0",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/database.py",
      "line_number": 13,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "from sqlmodel.ext.asyncio.session import AsyncSession as SQLModelAsyncSession",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/client.py",
      "line_number": 87,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "result.score *= (1 - match.priority.value / 10)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/client.py",
      "line_number": 40,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/client.py",
      "line_number": 252,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "requirements=f\"Detect {category} patterns in code\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/client.py",
      "line_number": 16,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import AnalysisError, FarmAgentError, TemplateError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/client.py",
      "line_number": 40,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "async def test_farm_connection(self) -> bool:",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/tools.py",
      "line_number": 76,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/tools.py",
      "line_number": 76,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "tool_results = await asyncio.gather(*tasks, return_exceptions=True)",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/tools.py",
      "line_number": 109,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Add fix flag if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_sqlite_query.py",
      "line_number": 29,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "r\"(?:show|find|get).*violations?.*(?:in|for)\\s+(.+)\": self._query_violations_in_file,",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_sqlite_query.py",
      "line_number": 510,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_sqlite_query.py",
      "line_number": 147,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "WHERE v.scan_session_id = (SELECT id FROM scan_sessions ORDER BY timestamp DESC LIMIT 1)",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_sqlite_query.py",
      "line_number": 60,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"\"\"Process natural language query and return structured results.\"\"\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_sqlite_query.py",
      "line_number": 510,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"\"\"Create sample queries for testing and documentation.\"\"\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 62,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "--rule \"\\\\bprint\\\\s*\\\\(\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 622,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 622,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 59,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "--category debugging \\\\",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 622,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "categories = [\"error_handling\", \"naming\", \"validation\", \"logging\", \"dependencies\", \"testing\", \"imports\", \"organization\", \"git\"]",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_cli.py",
      "line_number": 68,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "--description \"Use httpx instead of requests\" \\\\",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/__init__.py",
      "line_number": 11,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import CodexError, PatternNotFoundError, AnalysisError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 221,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "python_files = list(repo_path.rglob(\"*.py\"))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 347,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "if line.strip().startswith(\"print(\") and \"test\" not in context.file_path.lower():",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 38,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "self.session_id = str(uuid.uuid4())",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 464,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "\"to\": \"logger.info(\"",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 480,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"no-print-statements\": \"Difficulty debugging production issues, log noise in deployment\"",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 490,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Simple complexity based on lines, functions, classes",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/sqlite_scanner.py",
      "line_number": 330,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Example: Check for requests usage",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/project_config.py",
      "line_number": 28,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "scan_patterns: List[str] = field(default_factory=lambda: [\"**/*.py\", \"**/*.js\", \"**/*.ts\"])",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/project_config.py",
      "line_number": 187,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/project_config.py",
      "line_number": 187,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \".coverage\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/fts_database.py",
      "line_number": 32,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "**kwargs",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 156,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"score\": max(0, 1.0 - (len(violations) * 0.2))",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 256,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 131,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "if \"pip install\" in code:",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 142,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 142,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "if \"logging.exception(\" in code and \"{e}\" in code:",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 256,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'test': 'test pytest coverage mock dependency injection',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/ai_query.py",
      "line_number": 262,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "'api': 'fastapi api rest http endpoint pydantic',",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 232,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "exclude = [\"*.pyc\", \"__pycache__\", \".git\", \".venv\", \"venv\"]",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 1588,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "test_files = [",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 1699,
      "pattern_name": "use-db-context-managers",
      "priority": "HIGH",
      "matched_code": "console.print(\"The Codex MCP server is now available in all Claude Code sessions.\")",
      "suggestion": "Always use context managers for database sessions",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 342,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "console.print(\"[red]Farm SDK not available. Install with: uv pip install farm-sdk[/red]\")",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 1466,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "console.print(\"  \u2022 Use --ai flag for structured output suitable for AI assistants\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 36,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import CodexError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 1841,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "# Test MCP server functionality",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/cli.py",
      "line_number": 1020,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "- Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 101,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 101,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 295,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "\"ruff\": \"pip install ruff\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 97,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "\"TRY003\", # Avoid long exception messages",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 101,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"tests/*\" = [\"TRY301\", \"S101\"]  # Allow assert in tests",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/portable_tools.py",
      "line_number": 233,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "# Install missing tools if requested",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/settings.py",
      "line_number": 68,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "\"*.pyc\", \"*.pyo\", \"*.bak\", \"*~\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/settings.py",
      "line_number": 67,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/settings.py",
      "line_number": 67,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\".pytest_cache\", \".mypy_cache\", \"node_modules\",",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_importer.py",
      "line_number": 153,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"mock\": PatternCategory.TESTING,",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_importer.py",
      "line_number": 39,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "anti_pattern=\"pip install, poetry install, conda install\",",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_importer.py",
      "line_number": 8,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "from .exceptions import PatternImportError",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_importer.py",
      "line_number": 154,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"functional\": PatternCategory.FUNCTIONAL,",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_importer.py",
      "line_number": 150,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"validation\": PatternCategory.VALIDATION,",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/exceptions.py",
      "line_number": 2,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "Custom exceptions for Codex.",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/gitignore_handler.py",
      "line_number": 23,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "'__pycache__', '*.pyc', '*.pyo', '*.pyd', '.Python',",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/gitignore_handler.py",
      "line_number": 26,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "'pip-log.txt', 'pip-delete-this-directory.txt',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/gitignore_handler.py",
      "line_number": 30,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "'node_modules', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/gitignore_handler.py",
      "line_number": 25,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "'.pytest_cache', '.mypy_cache', '.coverage', '.tox',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_extractor.py",
      "line_number": 49,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_extractor.py",
      "line_number": 42,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "name='use-uv-not-pip',",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_extractor.py",
      "line_number": 154,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "for pattern_name, pattern_data in tool.get('exception_handling_patterns', {}).items():",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/pattern_extractor.py",
      "line_number": 49,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "example_good='uv add httpx\\nuv sync\\nuv run pytest',",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/uv_check.py",
      "line_number": 216,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "print(\"=\" * 40)",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/uv_check.py",
      "line_number": 38,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "self.warnings = []",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/uv_check.py",
      "line_number": 126,
      "pattern_name": "use-uv-package-manager",
      "priority": "HIGH",
      "matched_code": "# Use uv pip list to check installed packages",
      "suggestion": "Use uv for speed and reliability",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 257,
      "pattern_name": "no-cors-wildcard",
      "priority": "MANDATORY",
      "matched_code": "markdown += f\"**Found {len(patterns)} patterns**\\n\\n\"",
      "suggestion": "NEVER use '*' in production CORS origins",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 110,
      "pattern_name": "mock-code-naming",
      "priority": "MANDATORY",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Mock functions must start with mock_ prefix and log warnings",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 50,
      "pattern_name": "structured-logging",
      "priority": "HIGH",
      "matched_code": "logger = logging.getLogger(\"codex-mcp-server\")",
      "suggestion": "Use JSON structured logs with consistent schema",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 10,
      "pattern_name": "sanitize-production-errors",
      "priority": "HIGH",
      "matched_code": "import traceback",
      "suggestion": "Return generic error messages in production",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 110,
      "pattern_name": "minimum-test-coverage",
      "priority": "HIGH",
      "matched_code": "\"description\": \"Path to file being worked on (e.g., 'src/api.py', 'tests/test_client.py')\"",
      "suggestion": "Maintain 80% minimum code coverage",
      "confidence": 0.9
    },
    {
      "file_path": "build/lib/codex/mcp_server.py",
      "line_number": 162,
      "pattern_name": "use-pydantic-validation",
      "priority": "HIGH",
      "matched_code": "\"description\": \"What you want to accomplish (e.g., 'make HTTP requests', 'handle errors', 'write tests')\"",
      "suggestion": "Use Pydantic for all API input validation",
      "confidence": 0.9
    }
  ]
}
