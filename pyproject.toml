[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "codex"
version = "0.1.0"
description = "Universal code generation platform with pattern-based best practices"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "sqlmodel>=0.0.14",
    "aiosqlite>=0.19",
    "typer>=0.12",
    "rich>=13.0",
    "httpx>=0.25",
    "cookiecutter>=2.6",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "toml>=0.10.2",
    "mcp>=1.0.0",
    "logfire>=0.1.0",
    "greenlet>=3.2.4",
    "pytest>=8.4.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pytest>=8.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.1"
]

[project.scripts]
codex = "codex.cli:cli"

[tool.setuptools]
packages = ["codex"]

[tool.setuptools.package-data]
codex = ["data/*.md"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py311"
required-version = ">=0.8.0"

[tool.ruff.lint]
# Intelligent selection: Focus on real issues, not style preferences
select = [
    "E",      # pycodestyle errors
    "F",      # Pyflakes (undefined names, unused imports)
    "I",      # isort (import sorting)
    "UP",     # pyupgrade (Python version-specific)
    "B",      # flake8-bugbear (common bugs)
    "C4",     # flake8-comprehensions
    "PERF",   # Performance anti-patterns
    "RUF",    # Ruff-specific rules
]

# Extended selection for gradual adoption
extend-select = [
    "SIM",    # flake8-simplify (but allow some patterns)
    "ARG",    # flake8-unused-arguments
    "TRY",    # tryceratops (exception handling)
]

ignore = [
    # Line length - handled by formatter
    "E501",

    # Legitimate patterns in our codebase
    "PLC0415",  # Import outside top-level (needed for circular deps)
    "B008",     # Function calls in argument defaults
    "ARG002",   # Unused arguments (needed for interfaces/callbacks)

    # Style preferences (not bugs)
    "SIM102",   # Collapsible if (sometimes clearer as-is)
    "SIM105",   # contextlib.suppress (explicit try/except clearer)
    "SIM108",   # Ternary operator (not always more readable)

    # Complexity metrics (refactor gradually)
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR0911",  # Too many return statements

    # Design choices
    "LOG015",   # Root logger (acceptable in CLI tools)
    "TRY003",   # Long exception messages
    "TRY300",   # Consider else (not always clearer)

    # False positives
    "PLR2004",  # Magic values (constants overkill for simple cases)
    "PERF401",  # Manual list comp (sometimes more readable)
    "RUF012",   # Mutable class attrs (we know what we're doing)
]

# Auto-fixable rules
fixable = [
    "F401",     # Remove unused imports
    "I",        # Sort imports
    "UP",       # Upgrade syntax
    "F541",     # Remove f-string placeholders
    "B007",     # Unused loop variables â†’ _
    "RUF100",   # Remove unused noqa
]

# Strict for new code, lenient for existing
[tool.ruff.lint.per-file-ignores]
# CLI has many late imports and complex logic
"codex/cli.py" = ["E402", "PLC0415", "PLR"]

# Test files can be more relaxed
"tests/**/*.py" = ["ARG", "PLR2004", "S101", "F841"]

# Experimental code is exempt from most rules
"experiments/**/*.py" = ["ALL"]
"scripts/**/*.py" = ["ALL"]

# __init__ files have different import patterns
"**/__init__.py" = ["E402", "F401", "F403"]

# Pattern files are data, not code
"**/default_patterns.py" = ["E501"]
"**/pattern_*.py" = ["E501"]

[tool.mypy]
python_version = "3.11"
# Start with minimal checks - 80/20 rule
ignore_missing_imports = true
allow_untyped_defs = true
allow_untyped_calls = true
warn_return_any = false
warn_unused_ignores = false
check_untyped_defs = false
no_implicit_optional = true
show_error_codes = true

# Critical paths - Type check these strictly
[[tool.mypy.overrides]]
module = [
    "codex.models",
    "codex.pattern_models",
    "codex.database",
    "codex.config",
]
disallow_untyped_defs = true
check_untyped_defs = true
warn_return_any = true

# Non-critical paths - Ignore errors for now
[[tool.mypy.overrides]]
module = [
    "codex.cli",
    "codex.tools",
    "codex.portable_tools",
    "codex.fix_*",
    "codex.scan_*",
    "codex.interactive_*",
    "codex.batch_*",
    "codex.violation_*",
]
ignore_errors = true

# Test files - No type checking needed
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Experimental code - No type checking
[[tool.mypy.overrides]]
module = "experiments.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
